@startuml file
interface FileRepository {
    +get(FilePointer): File
    +tryGet(FilePointer): ?File
    +getReference(FilePointer): File
    +clear(): void
    +createFromString(FilePointer, string)
    +createFromStream(FilePointer, resource|Stream)
    +createFromLocalFile(FilePointer, string)
    +delete(FilePointer): void
    +copy(File|FilePointer, File|FilePointer): File
    +move(File|FilePointer, File|FilePointer): File
    +createTemporaryFile()
}

interface DirectoryInterface {
    +name: FileName
}

interface FilePointer {
    filesystemIdentifier: string
    key: string
    +isEqualTo(File|FilePointer): bool
    +isSameFilesystem(File|FilePointer): bool
}

DirectoryInterface o-- FilePointer
DirectoryInterface o-- File
DirectoryInterface o-- DirectoryInterface
DirectoryInterface::name *-- FileName

FileRepository o--- File
FilePointer --* File::pointer
FilePointer -- File

interface File {
    +filesystemIdentifier: ?string
    +key: string
    +pointer: FilePointer
    +isEqualTo(File|FilePointer): bool
    +isSameFilesystem(File|FilePointer): bool
    +name: FileName
    +setName(string): void
    +setContent(string): void
    +setContentFromStream(resource|Stream): void
    +content: string
    +contentAsStream: Stream
    +saveToLocalFile(string): SplFileInfo
    +createLocalTemporaryFile(): SplFileInfo
    +type: FileType
    +setType(string): void
    +size: int
    +lastModified: DateTime
    +getDerivation(string): FilePointer
    +get(string): mixed
}

File::name *-- FileName
File::type *-- FileType

interface FileName {
    +full: string|Translatable
    +setFull(string): void
    +base: string|Translatable
    +setBase(string): void
    +extension: string
    +setExtension(string): void
    +hasExtension(): bool
}

interface FileType {
    +name: string
    +type: string
    +subType: string
    +commonExtensions: array
    +extension: ?string
    +description: string|Translatable
}
@enduml