"use strict";(self.webpackChunkrekalogika_docs=self.webpackChunkrekalogika_docs||[]).push([[5108],{2937:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>l,frontMatter:()=>o,metadata:()=>r,toc:()=>h});var a=t(5893),i=t(1151);const o={title:"Batch Processing"},s=void 0,r={id:"domain-event/batch-processing",title:"Batch Processing",description:"How to handle domain events in batch processing.",source:"@site/docs/domain-event/10-batch-processing.md",sourceDirName:"domain-event",slug:"/domain-event/batch-processing",permalink:"/domain-event/batch-processing",draft:!1,unlisted:!1,editUrl:"https://github.com/rekalogika/rekalogika-docs/edit/main/docs/domain-event/10-batch-processing.md",tags:[],version:"current",sidebarPosition:10,frontMatter:{title:"Batch Processing"},sidebar:"docs",previous:{title:"Transactional Outbox Pattern",permalink:"/domain-event/transactional-outbox-pattern"},next:{title:"Tips",permalink:"/domain-event/tips"}},c={},h=[{value:"Common Patterns",id:"common-patterns",level:2}];function d(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,i.a)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.p,{children:"How to handle domain events in batch processing."}),"\n",(0,a.jsx)(n.h2,{id:"common-patterns",children:"Common Patterns"}),"\n",(0,a.jsx)(n.p,{children:"To handle domain events in batch processing, you probably want to disable\nauto-dispatch. This way, your equatable events will only be dispatched once at\nthe end of the batch processing, and you can avoid expensive event listeners\nfrom affecting the performance of your batch processing."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-php",children:"use Rekalogika\\DomainEvent\\DomainEventAwareEntityManagerInterface;\n\n/** @var DomainEventEntityManagerInterface $entityManager */\n\n// highlight-start\n// disable autodispatching of domain events\n$entityManager->setAutoDispatchDomainEvents(false);\n// highlight-end\n\n// Do some batch processing\n$batchSize = 20;\n$i = 1;\n\nforeach (...) { // example loop, can also be a while, for, etc loop too.\n    // Do some processing here. You can persist, update, or remove entities,\n    // operations that might emit domain events.\n\n    if ($i % $batchSize === 0) {\n        // highlight-start\n        // dispatches domain events in the pre-flush phase\n        $entityManager->dispatchPreFlushDomainEvents();\n        // highlight-end\n\n        // flushes the changes to the database\n        $entityManager->flush();\n\n        // detaches all objects from Doctrine\n        $entityManager->clear(); \n    }\n\n    $i++;\n}\n\n// do not forget to handle the remaining items\n$entityManager->dispatchPreFlushDomainEvents();\n$entityManager->flush();\n$entityManager->clear(); \n\n// highlight-start\n// dispatches domain events in the post-flush phase\n$entityManager->dispatchPostFlushDomainEvents();\n// highlight-end\n\n// highlight-start\n// reenable autodispatching of domain events\n$entityManager->setAutoDispatchDomainEvents(true);\n// highlight-end\n"})})]})}function l(e={}){const{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},1151:(e,n,t)=>{t.d(n,{Z:()=>r,a:()=>s});var a=t(7294);const i={},o=a.createContext(i);function s(e){const n=a.useContext(o);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),a.createElement(o.Provider,{value:n},e.children)}}}]);