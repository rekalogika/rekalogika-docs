"use strict";(self.webpackChunkrekalogika_docs=self.webpackChunkrekalogika_docs||[]).push([[1377],{849:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>h,frontMatter:()=>r,metadata:()=>o,toc:()=>l});const o=JSON.parse('{"id":"pivot-table/grouping","title":"Grouping Strategies","description":"The framework expects the data to be already \'cubed\' by the database.","source":"@site/docs/pivot-table/04-grouping.md","sourceDirName":"pivot-table","slug":"/pivot-table/grouping","permalink":"/pivot-table/grouping","draft":false,"unlisted":false,"editUrl":"https://github.com/rekalogika/rekalogika-docs/edit/main/docs/pivot-table/04-grouping.md","tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"title":"Grouping Strategies"},"sidebar":"docs","previous":{"title":"Rendering a Pivot Table","permalink":"/pivot-table/rendering"},"next":{"title":"Integration","permalink":"/pivot-table/integration"}}');var i=t(4848),s=t(8453);const r={title:"Grouping Strategies"},a=void 0,c={},l=[{value:"CUBE Strategy",id:"cube-strategy",level:2},{value:"ROLLUP Strategy",id:"rollup-strategy",level:2},{value:"No Grouping",id:"no-grouping",level:2}];function d(e){const n={admonition:"admonition",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.p,{children:"The framework expects the data to be already 'cubed' by the database.\nNevertheless, it attempts to accommodate less comprehensive grouping strategies\nas explained below."}),"\n",(0,i.jsx)(n.h2,{id:"cube-strategy",children:"CUBE Strategy"}),"\n",(0,i.jsxs)(n.p,{children:["The preferred grouping strategy is ",(0,i.jsx)(n.code,{children:"CUBE"}),", which means that the data is\npre-aggregated for all combinations of dimensions. By using ",(0,i.jsx)(n.code,{children:"CUBE"}),", you will get\naccurate ordering, all the possible subtotals, and no wasted cells on pivoted\ndimensions."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sql",children:"SELECT name, country, month, COUNT(*) AS count, SUM(price) AS sum,\n    GROUPING(name, country, month) AS grouping\nFROM items\n-- highlight-next-line\nGROUP BY CUBE(name, country, month)\nORDER BY name, country, month\n"})}),"\n",(0,i.jsx)(n.admonition,{type:"tip",children:(0,i.jsxs)(n.p,{children:["Even if the database does not support ",(0,i.jsx)(n.code,{children:"CUBE"}),", it may be possible to emulate\n",(0,i.jsx)(n.code,{children:"CUBE"}),". The technique is beyond the scope of this documentation, but if you can\ndo it, the result should be the same as using ",(0,i.jsx)(n.code,{children:"CUBE"}),"."]})}),"\n",(0,i.jsx)(n.h2,{id:"rollup-strategy",children:"ROLLUP Strategy"}),"\n",(0,i.jsxs)(n.p,{children:["If your database does not support ",(0,i.jsx)(n.code,{children:"CUBE"}),", but supports ",(0,i.jsx)(n.code,{children:"ROLLUP"}),", you can use it\ninstead. But note that with ",(0,i.jsx)(n.code,{children:"ROLLUP"}),", some subtotals are not possible. And in\nsome cases, the ordering may not follow the specified ",(0,i.jsx)(n.code,{children:"ORDER BY"})," clause."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sql",children:"SELECT name, country, month, COUNT(*) AS count, SUM(price) AS sum,\n    GROUPING(name, country, month) AS grouping\nFROM items\n-- highlight-next-line\nGROUP BY ROLLUP(name, country, month)\nORDER BY name, country, month\n"})}),"\n",(0,i.jsxs)(n.admonition,{type:"warning",children:[(0,i.jsxs)(n.p,{children:["If ",(0,i.jsx)(n.code,{children:"ROLLUP"})," is used, then all the specified dimensions must be used everywhere,\nand they must be used in the same ordering:"]}),(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["The dimensions and their ordering in the ",(0,i.jsx)(n.code,{children:"GROUP BY ROLLUP"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:["The ",(0,i.jsx)(n.code,{children:"dimensionFields"})," argument of ",(0,i.jsx)(n.code,{children:"ArrayTableFactory::createCube()"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:["The ",(0,i.jsx)(n.code,{children:"rows"})," and ",(0,i.jsx)(n.code,{children:"columns"})," arguments of\n",(0,i.jsx)(n.code,{children:"ArrayTableFactory::createPivotTable()"}),". The order is ",(0,i.jsx)(n.code,{children:"rows"})," first, then\n",(0,i.jsx)(n.code,{children:"columns"}),"."]}),"\n"]})]}),"\n",(0,i.jsx)(n.h2,{id:"no-grouping",children:"No Grouping"}),"\n",(0,i.jsxs)(n.p,{children:["The framework can also work with data that is only grouped by the full set of\ndimensions. In this case, no subtotals are possible, and like ",(0,i.jsx)(n.code,{children:"ROLLUP"}),", the\nordering may not follow the specified ",(0,i.jsx)(n.code,{children:"ORDER BY"})," clause."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sql",children:"SELECT name, country, month, COUNT(*) AS count, SUM(price) AS sum\nFROM items\n-- highlight-next-line\nGROUP BY name, country, month\nORDER BY name, country, month\n"})})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>a});var o=t(6540);const i={},s=o.createContext(i);function r(e){const n=o.useContext(s);return o.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),o.createElement(s.Provider,{value:n},e.children)}}}]);