"use strict";(self.webpackChunkrekalogika_docs=self.webpackChunkrekalogika_docs||[]).push([[751],{8868:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>s,default:()=>d,frontMatter:()=>o,metadata:()=>c,toc:()=>p});var a=n(5893),r=n(1151);const o={title:"Mapping Between Object and Array"},s=void 0,c={id:"mapper/object-array",title:"Mapping Between Object and Array",description:"Mapping between an object and an array follows the same semantics as [mapping",source:"@site/docs/mapper/04-object-array.md",sourceDirName:"mapper",slug:"/mapper/object-array",permalink:"/mapper/object-array",draft:!1,unlisted:!1,editUrl:"https://github.com/rekalogika/rekalogika-docs/edit/main/docs/mapper/04-object-array.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{title:"Mapping Between Object and Array"},sidebar:"docs",previous:{title:"Mapping Arrays & Array-Like Objects",permalink:"/mapper/collection"},next:{title:"Context and Mapping Options",permalink:"/mapper/context-options"}},i={},p=[];function l(e){const t={a:"a",code:"code",p:"p",...(0,r.a)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsxs)(t.p,{children:["Mapping between an object and an array follows the same semantics as ",(0,a.jsxs)(t.a,{href:"object#classes-with-dynamic-properties-including-stdclass",children:["mapping\ninvolving an ",(0,a.jsx)(t.code,{children:"stdClass"}),"\nobject"]}),"."]}),"\n",(0,a.jsxs)(t.p,{children:["Internally, Mapper will convert the array to ",(0,a.jsx)(t.code,{children:"stdClass"}),", and convert the result\nback to an array if necessary."]})]})}function d(e={}){const{wrapper:t}={...(0,r.a)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(l,{...e})}):l(e)}},1151:(e,t,n)=>{n.d(t,{Z:()=>c,a:()=>s});var a=n(7294);const r={},o=a.createContext(r);function s(e){const t=a.useContext(o);return a.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),a.createElement(o.Provider,{value:t},e.children)}}}]);