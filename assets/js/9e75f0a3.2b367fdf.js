"use strict";(self.webpackChunkrekalogika_docs=self.webpackChunkrekalogika_docs||[]).push([[8039],{4402:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>r,contentTitle:()=>d,default:()=>h,frontMatter:()=>l,metadata:()=>n,toc:()=>o});const n=JSON.parse('{"id":"file/metadata","title":"Metadata","description":"This chapter describes how file metadata is handled by this library.","source":"@site/docs/file/05-metadata.md","sourceDirName":"file","slug":"/file/metadata","permalink":"/file/metadata","draft":false,"unlisted":false,"editUrl":"https://github.com/rekalogika/rekalogika-docs/edit/main/docs/file/05-metadata.md","tags":[],"version":"current","sidebarPosition":5,"frontMatter":{"title":"Metadata"},"sidebar":"docs","previous":{"title":"Adapters","permalink":"/file/adapters"},"next":{"title":"Derivation","permalink":"/file/derivation"}}');var i=a(4848),s=a(8453);const l={title:"Metadata"},d=void 0,r={},o=[{value:"Primary Metadata",id:"primary-metadata",level:2},{value:"Metadata Objects",id:"metadata-objects",level:2},{value:"Getting Metadata Objects",id:"getting-metadata-objects",level:2},{value:"Setting Metadata",id:"setting-metadata",level:2},{value:"Low-Level Metadata Handling",id:"low-level-metadata-handling",level:2}];function c(e){const t={a:"a",admonition:"admonition",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.p,{children:"This chapter describes how file metadata is handled by this library."}),"\n",(0,i.jsx)(t.h2,{id:"primary-metadata",children:"Primary Metadata"}),"\n",(0,i.jsxs)(t.p,{children:["Firstly, ",(0,i.jsx)(t.code,{children:"FileInterface"})," has several methods that return and set what can be\nconsidered metadata of the file:"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-php",children:"use Rekalogika\\Contracts\\File\\FileInterface;\n\n/** @var FileInterface $file */\n\n// Returns the file's name\n$name = (string) $file->getName();\n\n// Returns the file's MIME type\n$mime = (string) $file->getType();\n\n// Returns the file's size in bytes\n$size = $file->getSize();\n\n// Returns the file's last modified time\n$lastModified = $file->getLastModified();\n"})}),"\n",(0,i.jsx)(t.h2,{id:"metadata-objects",children:"Metadata Objects"}),"\n",(0,i.jsxs)(t.p,{children:["A ",(0,i.jsx)(t.code,{children:"FileInterface"})," can also have several metadata objects associated with it. A\nmetadata object is an object that represents a specific type of metadata of the\nfile."]}),"\n",(0,i.jsx)(t.p,{children:"These are the metadata objects that are currently implemented:"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"RawMetadataInterface"}),": Represents the raw metadata object. It is a simple\nkey-value object. The value can be a string, integer, boolean, or null."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"FileMetadataInterface"}),": Represents the metadata that every file has: name,\ntype, size, and last modified time."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"HttpMetadataInterface"}),": Represents metadata used in HTTP responses. It is\nused when streaming the file to the client over HTTP."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"ImageMetadataInterface"}),": Contains metadata specific to images, including\nimage dimension and orientation."]}),"\n"]}),"\n",(0,i.jsx)(t.h2,{id:"getting-metadata-objects",children:"Getting Metadata Objects"}),"\n",(0,i.jsxs)(t.p,{children:["The ",(0,i.jsx)(t.code,{children:"FileInterface"})," has a ",(0,i.jsx)(t.code,{children:"get()"})," method that returns an associated object of\nthe file. The caller can use this method to get a specific metadata object of a\nfile."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-php",children:"use Rekalogika\\Contracts\\File\\FileInterface;\n\n/** @var FileInterface $file */\n\n// Returns the FileMetadataInterface object\n$fileMetadata = $file->get(FileMetadataInterface::class);\n\n// Returns the ImageMetadataInterface object\n$imageMetadata = $file->get(ImageMetadataInterface::class);\n\n// Getting image related metadata\n$width = $file->get(ImageMetadataInterface::class)->getWidth();\n$height = $file->get(ImageMetadataInterface::class)->getHeight();\n"})}),"\n",(0,i.jsx)(t.p,{children:"You can also use string aliases instead of FQCNs. This is useful when specifying\nFQCNs is inconvenient, like in Twig templates:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-twig",children:'<img src="{{ image_file|temporary_url }}"\n   width="{{ image_file.get(\'imageMetadata\').width }}"\n   height="{{ image_file.get(\'imageMetadata\').height }}">\n'})}),"\n",(0,i.jsx)(t.h2,{id:"setting-metadata",children:"Setting Metadata"}),"\n",(0,i.jsxs)(t.p,{children:["Metadata objects can provide methods that can be used to set the metadata value.\nFor example, the ",(0,i.jsx)(t.code,{children:"FileMetadataInterface"})," has ",(0,i.jsx)(t.code,{children:"setName()"})," and ",(0,i.jsx)(t.code,{children:"setType()"}),", the\n",(0,i.jsx)(t.code,{children:"HttpMetadataInterface"})," has ",(0,i.jsx)(t.code,{children:"setDisposition()"}),", etc. After setting the metadata\nusing these methods, the caller must call ",(0,i.jsx)(t.code,{children:"flush()"})," to persist the changes."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-php",children:"use Rekalogika\\Contracts\\File\\FileInterface;\nuse Rekalogika\\Contracts\\File\\Metadata\\HttpMetadataInterface;\n\n/** @var FileInterface $file */\n\n// Each of the following will be flush automatically individually, and will\n// require two roundtrips to the storage backend\n$file->setType('image/jpeg');\n$file->setName('foo.jpg');\n\n// The following needs an explicit flush(). It will only require one roundtrip\n// to the storage backend.\n$file->get(FileMetadataInterface::class)?->setType('image/jpeg'); \n$file->get(FileMetadataInterface::class)?->setName('foo.jpg'); \n$file->flush();\n"})}),"\n",(0,i.jsx)(t.admonition,{type:"note",children:(0,i.jsx)(t.p,{children:"Local files don't persist metadata. Changes in the metadata are only valid for\nthe duration of the request. However, if the file is copied or moved to a\nnon-local filesystem, the metadata will be copied and persisted by the\ndestination file."})}),"\n",(0,i.jsx)(t.h2,{id:"low-level-metadata-handling",children:"Low-Level Metadata Handling"}),"\n",(0,i.jsxs)(t.p,{children:["In a non-local filesystem, the library stores a file's metadata in a ",(0,i.jsx)(t.a,{href:"https://en.wikipedia.org/wiki/Sidecar_file",children:"sidecar\nfile"})," in the JSON format. If the\nfile key is ",(0,i.jsx)(t.code,{children:"foo/bar.txt"}),", the metadata file key will be\n",(0,i.jsx)(t.code,{children:"foo/bar.txt.metadata"}),"."]}),"\n",(0,i.jsx)(t.p,{children:"Rationale:"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"Supports all filesystems."}),"\n",(0,i.jsx)(t.li,{children:"Uniform way of handling metadata with all filesystems."}),"\n",(0,i.jsx)(t.li,{children:"Simpler administration. i.e. when copying between different filesystems."}),"\n",(0,i.jsxs)(t.li,{children:["Implements coarse-grained ",(0,i.jsx)(t.a,{href:"https://martinfowler.com/eaaCatalog/remoteFacade.html",children:"remote fa\xe7ade pattern"})," to improve performance with remote filesystems."]}),"\n"]}),"\n",(0,i.jsx)(t.p,{children:"With the local filesystem, the library provides the same interface as above but\ndoes not save the metadata to a sidecar file. Instead, the metadata is\ndetermined from the file and stored in an in-memory cache. Any changes to the\nmetadata are not persisted and are only valid in the current request but will be\nconsidered if the caller copies or moves the file to a non-local filesystem."}),"\n",(0,i.jsx)(t.p,{children:"The caller is expected to treat files in the local filesystem as transient\nobjects and expected to copy or move the files to a non-local filesystem if they\nwish to store the file."})]})}function h(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},8453:(e,t,a)=>{a.d(t,{R:()=>l,x:()=>d});var n=a(6540);const i={},s=n.createContext(i);function l(e){const t=n.useContext(s);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function d(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),n.createElement(s.Provider,{value:t},e.children)}}}]);