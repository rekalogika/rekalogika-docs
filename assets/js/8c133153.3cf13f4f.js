"use strict";(self.webpackChunkrekalogika_docs=self.webpackChunkrekalogika_docs||[]).push([[7805],{5406:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>h,frontMatter:()=>a,metadata:()=>r,toc:()=>l});var i=n(5893),s=n(1151);const a={title:"Tips and Caveats"},o=void 0,r={id:"domain-event/tips",title:"Tips and Caveats",description:"This chapter explains the tips and our best practices that others might find",source:"@site/docs/domain-event/21-tips.md",sourceDirName:"domain-event",slug:"/domain-event/tips",permalink:"/domain-event/tips",draft:!1,unlisted:!1,editUrl:"https://github.com/rekalogika/rekalogika-docs/edit/main/docs/domain-event/21-tips.md",tags:[],version:"current",sidebarPosition:21,frontMatter:{title:"Tips and Caveats"},sidebar:"docs",previous:{title:"Testing",permalink:"/domain-event/testing"},next:{title:"rekalogika/file",permalink:"/file/"}},c={},l=[{value:"Use UUIDs as Identifiers",id:"use-uuids-as-identifiers",level:2},{value:"Choosing Dispatching Strategy",id:"choosing-dispatching-strategy",level:2},{value:"Caveats",id:"caveats",level:2}];function d(e){const t={code:"code",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.p,{children:"This chapter explains the tips and our best practices that others might find\nuseful, but not strictly required."}),"\n",(0,i.jsx)(t.h2,{id:"use-uuids-as-identifiers",children:"Use UUIDs as Identifiers"}),"\n",(0,i.jsxs)(t.p,{children:["Use UUIDs as entity identifiers & have the entities generate one for themselves\non instantiation. That means new entities already have an ID before ",(0,i.jsx)(t.code,{children:"flush()"}),"."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-php",children:"use Symfony\\Component\\Uid\\UuidV7;\n\nclass Post\n{\n    private string $id;\n\n    public function __construct(string $title)\n    {\n        $this->id = new UuidV7();\n    }\n\n    // ...\n}\n"})}),"\n",(0,i.jsx)(t.p,{children:"Therefore, you can reliably store the ID in your event objects, instead of the\nobject itself. Using the ID in the events means your events can be reliably\nserialized, and you can pass them anywhere without alteration."}),"\n",(0,i.jsx)(t.h2,{id:"choosing-dispatching-strategy",children:"Choosing Dispatching Strategy"}),"\n",(0,i.jsx)(t.p,{children:"If you want to do something similar to what you are used to doing with\napplication events, you probably want the post-flush strategy."}),"\n",(0,i.jsx)(t.p,{children:"Use post-flush for things that should occur only if the change is successful,\nlike notifications, etc."}),"\n",(0,i.jsxs)(t.p,{children:["Use pre-flush events to make alterations to your domain that will be\n",(0,i.jsx)(t.code,{children:"flush()"}),"-ed together along with the other changes."]}),"\n",(0,i.jsx)(t.h2,{id:"caveats",children:"Caveats"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:["Currently only supports ",(0,i.jsx)(t.code,{children:"EntityManager"}),". Support for other ",(0,i.jsx)(t.code,{children:"ObjectManager"}),"s\nis planned."]}),"\n",(0,i.jsx)(t.li,{children:"Symfony Event Dispatcher does not currently support event inheritance. This\nneeds to be mentioned because many programmers expect an event dispatcher to\nsupport event inheritance, especially when working with a large amount of\nevent objects."}),"\n"]})]})}function h(e={}){const{wrapper:t}={...(0,s.a)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},1151:(e,t,n)=>{n.d(t,{Z:()=>r,a:()=>o});var i=n(7294);const s={},a=i.createContext(s);function o(e){const t=i.useContext(a);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),i.createElement(a.Provider,{value:t},e.children)}}}]);