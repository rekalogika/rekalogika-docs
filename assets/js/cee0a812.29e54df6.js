"use strict";(self.webpackChunkrekalogika_docs=self.webpackChunkrekalogika_docs||[]).push([[6386],{3670:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>d,frontMatter:()=>r,metadata:()=>s,toc:()=>c});var n=a(4848),i=a(8453);const r={title:"Immutable Objects"},o=void 0,s={id:"mapper/object/immutable-objects",title:"Immutable Objects",description:"Immutable objects are objects whose state cannot be changed after they are",source:"@site/docs/mapper/02-object/06-immutable-objects.md",sourceDirName:"mapper/02-object",slug:"/mapper/object/immutable-objects",permalink:"/mapper/object/immutable-objects",draft:!1,unlisted:!1,editUrl:"https://github.com/rekalogika/rekalogika-docs/edit/main/docs/mapper/02-object/06-immutable-objects.md",tags:[],version:"current",sidebarPosition:6,frontMatter:{title:"Immutable Objects"},sidebar:"docs",previous:{title:"Dynamic Properties & Property Overloading",permalink:"/mapper/object/dynamic-properties"},next:{title:"Extra Target Values",permalink:"/mapper/object/extra-target-values"}},l={},c=[{value:"Immutable Setter a.k.a. Wither Method",id:"immutable-setter-aka-wither-method",level:2},{value:"Unalterable Objects",id:"unalterable-objects",level:2},{value:"Determining If an Object is Unalterable",id:"determining-if-an-object-is-unalterable",level:2},{value:"Overriding the Detection",id:"overriding-the-detection",level:2}];function h(e){const t={code:"code",h2:"h2",li:"li",ol:"ol",p:"p",...(0,i.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.p,{children:"Immutable objects are objects whose state cannot be changed after they are\ncreated. Their state is set during construction and cannot be changed."}),"\n",(0,n.jsx)(t.h2,{id:"immutable-setter-aka-wither-method",children:"Immutable Setter a.k.a. Wither Method"}),"\n",(0,n.jsx)(t.p,{children:"While the object itself is immutable, it can provide an immutable setter method,\nalso known as a wither method. Rather than returning void or itself, the wither\nmethod returns a new instance of the object with the changed state."}),"\n",(0,n.jsx)(t.p,{children:"Mapper support these immutable setters, as well as immutable adders and\nremovers. The caveat is that the host object that contains the immutable object\nmust have a setter method that accepts the new instance. Otherwise, the mapping\nwill fail with an exception."}),"\n",(0,n.jsx)(t.h2,{id:"unalterable-objects",children:"Unalterable Objects"}),"\n",(0,n.jsx)(t.p,{children:"Unalterable objects are our terms for objects that are immutable and do not have\na standard way that Mapper can use to alter their state, including through the\nmeans of the wither method."}),"\n",(0,n.jsx)(t.p,{children:"When trying to map from a source to an unalterable object, Mapper won't involve\nthe existing object, and assume it is null. Instead, it will instantiate a new\ninstance of the same type through the constructor."}),"\n",(0,n.jsx)(t.h2,{id:"determining-if-an-object-is-unalterable",children:"Determining If an Object is Unalterable"}),"\n",(0,n.jsx)(t.p,{children:"Mapper uses a simple heuristic to determine if an object is unalterable:"}),"\n",(0,n.jsxs)(t.ol,{children:["\n",(0,n.jsx)(t.li,{children:"All of its properties are not writable."}),"\n",(0,n.jsx)(t.li,{children:"The above also applies to objects accessible from its readable properties."}),"\n"]}),"\n",(0,n.jsx)(t.h2,{id:"overriding-the-detection",children:"Overriding the Detection"}),"\n",(0,n.jsxs)(t.p,{children:["The detection strategy should work most of the time, but if the heuristic fails,\nyou can override the detection by adding the attribute ",(0,n.jsx)(t.code,{children:"#[Unalterable]"})," or\n",(0,n.jsx)(t.code,{children:"#[Unalterable(false)]"})," to the class."]})]})}function d(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(h,{...e})}):h(e)}},8453:(e,t,a)=>{a.d(t,{R:()=>o,x:()=>s});var n=a(6540);const i={},r=n.createContext(i);function o(e){const t=n.useContext(r);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function s(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),n.createElement(r.Provider,{value:t},e.children)}}}]);