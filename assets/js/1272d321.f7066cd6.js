"use strict";(self.webpackChunkrekalogika_docs=self.webpackChunkrekalogika_docs||[]).push([[1029],{8453:(e,t,n)=>{n.d(t,{R:()=>d,x:()=>r});var i=n(6540);const s={},l=i.createContext(s);function d(e){const t=i.useContext(l);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:d(e.components),i.createElement(l.Provider,{value:t},e.children)}},9716:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>h,contentTitle:()=>r,default:()=>o,frontMatter:()=>d,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"analytics/internals/partitioning","title":"Partitioning","description":"Why?","source":"@site/docs/analytics/99-internals/01-partitioning.md","sourceDirName":"analytics/99-internals","slug":"/analytics/internals/partitioning","permalink":"/analytics/internals/partitioning","draft":false,"unlisted":false,"editUrl":"https://github.com/rekalogika/rekalogika-docs/edit/main/docs/analytics/99-internals/01-partitioning.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"title":"Partitioning"},"sidebar":"docs","previous":{"title":"Internals","permalink":"/analytics/internals/"},"next":{"title":"Refresh Mechanism","permalink":"/analytics/internals/refresh"}}');var s=n(4848),l=n(8453);const d={title:"Partitioning"},r=void 0,h={},c=[{value:"Why?",id:"why",level:2},{value:"How It Works",id:"how-it-works",level:2},{value:"Example of Partitioning",id:"example-of-partitioning",level:2},{value:"Queries",id:"queries",level:2},{value:"Updates",id:"updates",level:2},{value:"In the Real World",id:"in-the-real-world",level:2}];function a(e){const t={admonition:"admonition",code:"code",h2:"h2",p:"p",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,l.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.h2,{id:"why",children:"Why?"}),"\n",(0,s.jsx)(t.p,{children:"Partitioning lets the framework update the summary table incrementally. Without\npartitioning, processing a source table with billions of records might probably\ntake days or even weeks to finish."}),"\n",(0,s.jsx)(t.p,{children:"Because an RDBMS is ACID compliant, it will also need to store both old and\nnew records of the source table while the processing is ongoing, which will\ntake up a lot of space and may cause fragmentation."}),"\n",(0,s.jsx)(t.h2,{id:"how-it-works",children:"How It Works"}),"\n",(0,s.jsxs)(t.p,{children:["The following table shows how the records are partitioned using the hypothetical\n",(0,s.jsx)(t.code,{children:"IntegerPartition"})," with 1-2-3-4-5-6 bits of partitioning width. The leftmost\ncolumn indicates the level. Other cells are the partitions of that level.\nNumbers in the cells indicate the partitioning key range that are rolled-up in\nthe partition."]}),"\n",(0,s.jsxs)("table",{class:"partitioning",children:[(0,s.jsxs)("tr",{children:[(0,s.jsx)("th",{children:"L6"}),(0,s.jsx)("td",{colspan:"32",children:"0-63"})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("th",{children:"L5"}),(0,s.jsx)("td",{colspan:"16",children:"0-31"}),(0,s.jsx)("td",{colspan:"16",children:"32-63"})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("th",{children:"L4"}),(0,s.jsx)("td",{colspan:"8",children:"0-15"}),(0,s.jsx)("td",{colspan:"8",children:"16-31"}),(0,s.jsx)("td",{colspan:"8",children:"32-47"}),(0,s.jsx)("td",{colspan:"8",children:"48-63"})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("th",{children:"L3"}),(0,s.jsx)("td",{colspan:"4",children:"0-7"}),(0,s.jsx)("td",{colspan:"4",children:"8-15"}),(0,s.jsx)("td",{colspan:"4",children:"16-23"}),(0,s.jsx)("td",{colspan:"4",children:"24-31"}),(0,s.jsx)("td",{colspan:"4",children:"32-39"}),(0,s.jsx)("td",{colspan:"4",children:"40-47"}),(0,s.jsx)("td",{colspan:"4",children:"48-55"}),(0,s.jsx)("td",{colspan:"4",children:"56-63"})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("th",{children:"L2"}),(0,s.jsx)("td",{colspan:"2",children:"0-3"}),(0,s.jsx)("td",{colspan:"2",children:"4-7"}),(0,s.jsx)("td",{colspan:"2",children:"8-11"}),(0,s.jsx)("td",{colspan:"2",children:"12-15"}),(0,s.jsx)("td",{colspan:"2",children:"16-19"}),(0,s.jsx)("td",{colspan:"2",children:"20-23"}),(0,s.jsx)("td",{colspan:"2",children:"24-27"}),(0,s.jsx)("td",{colspan:"2",children:"28-31"}),(0,s.jsx)("td",{colspan:"2",children:"32-35"}),(0,s.jsx)("td",{colspan:"2",children:"36-39"}),(0,s.jsx)("td",{colspan:"2",children:"40-43"}),(0,s.jsx)("td",{colspan:"2",children:"44-47"}),(0,s.jsx)("td",{colspan:"2",children:"48-51"}),(0,s.jsx)("td",{colspan:"2",children:"52-55"}),(0,s.jsx)("td",{colspan:"2",children:"56-59"}),(0,s.jsx)("td",{colspan:"2",children:"60-63"})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("th",{children:"L1"}),(0,s.jsx)("td",{children:"0-1"}),(0,s.jsx)("td",{children:"2-3"}),(0,s.jsx)("td",{children:"4-5"}),(0,s.jsx)("td",{children:"6-7"}),(0,s.jsx)("td",{children:"8-9"}),(0,s.jsx)("td",{children:"10-11"}),(0,s.jsx)("td",{children:"12-13"}),(0,s.jsx)("td",{children:"14-15"}),(0,s.jsx)("td",{children:"16-17"}),(0,s.jsx)("td",{children:"18-19"}),(0,s.jsx)("td",{children:"20-21"}),(0,s.jsx)("td",{children:"22-23"}),(0,s.jsx)("td",{children:"24-25"}),(0,s.jsx)("td",{children:"26-27"}),(0,s.jsx)("td",{children:"28-29"}),(0,s.jsx)("td",{children:"30-31"}),(0,s.jsx)("td",{children:"32-33"}),(0,s.jsx)("td",{children:"34-35"}),(0,s.jsx)("td",{children:"36-37"}),(0,s.jsx)("td",{children:"38-39"}),(0,s.jsx)("td",{children:"40-41"}),(0,s.jsx)("td",{children:"42-43"}),(0,s.jsx)("td",{children:"44-45"}),(0,s.jsx)("td",{children:"46-47"}),(0,s.jsx)("td",{children:"48-49"}),(0,s.jsx)("td",{children:"50-51"}),(0,s.jsx)("td",{children:"52-53"}),(0,s.jsx)("td",{children:"54-55"}),(0,s.jsx)("td",{children:"56-57"}),(0,s.jsx)("td",{children:"58-59"}),(0,s.jsx)("td",{children:"60-61"}),(0,s.jsx)("td",{children:"62-63"})]})]}),"\n",(0,s.jsx)(t.h2,{id:"example-of-partitioning",children:"Example of Partitioning"}),"\n",(0,s.jsx)(t.p,{children:"With the above partitioning scheme above, now suppose our source entity has the\nfollowing records:"}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{children:"ID"}),(0,s.jsx)(t.th,{children:"Value"})]})}),(0,s.jsxs)(t.tbody,{children:[(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"8"}),(0,s.jsx)(t.td,{children:"2"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"9"}),(0,s.jsx)(t.td,{children:"3"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"10"}),(0,s.jsx)(t.td,{children:"6"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"11"}),(0,s.jsx)(t.td,{children:"7"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"12"}),(0,s.jsx)(t.td,{children:"10"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"13"}),(0,s.jsx)(t.td,{children:"5"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"14"}),(0,s.jsx)(t.td,{children:"4"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"15"}),(0,s.jsx)(t.td,{children:"1"})]})]})]}),"\n",(0,s.jsx)(t.p,{children:"The framework will roll up those records into the following level 1 partitions:"}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{children:"Level"}),(0,s.jsx)(t.th,{children:"Key"}),(0,s.jsx)(t.th,{children:"Sum of Value"})]})}),(0,s.jsxs)(t.tbody,{children:[(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"L1"}),(0,s.jsx)(t.td,{children:"8"}),(0,s.jsx)(t.td,{children:"5"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"L1"}),(0,s.jsx)(t.td,{children:"10"}),(0,s.jsx)(t.td,{children:"13"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"L1"}),(0,s.jsx)(t.td,{children:"12"}),(0,s.jsx)(t.td,{children:"15"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"L1"}),(0,s.jsx)(t.td,{children:"14"}),(0,s.jsx)(t.td,{children:"5"})]})]})]}),"\n",(0,s.jsx)(t.p,{children:"Then, in turn those level 1 partitions will be rolled up into level 2 partitions:"}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{children:"Level"}),(0,s.jsx)(t.th,{children:"Key"}),(0,s.jsx)(t.th,{children:"Sum of Value"})]})}),(0,s.jsxs)(t.tbody,{children:[(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"L2"}),(0,s.jsx)(t.td,{children:"8"}),(0,s.jsx)(t.td,{children:"18"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"L2"}),(0,s.jsx)(t.td,{children:"12"}),(0,s.jsx)(t.td,{children:"20"})]})]})]}),"\n",(0,s.jsx)(t.p,{children:"Then, again, those level 2 partitions will be rolled up into level 3 partitions:"}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{children:"Level"}),(0,s.jsx)(t.th,{children:"Key"}),(0,s.jsx)(t.th,{children:"Sum of Value"})]})}),(0,s.jsx)(t.tbody,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"L3"}),(0,s.jsx)(t.td,{children:"8"}),(0,s.jsx)(t.td,{children:"38"})]})})]}),"\n",(0,s.jsx)(t.p,{children:"And so forth until we reach the top level."}),"\n",(0,s.jsx)(t.admonition,{type:"info",children:(0,s.jsx)(t.p,{children:"In the summary table, a partition is identified by its level and key. With our\ninteger partition, the key is the same as the first possible source ID in the partition."})}),"\n",(0,s.jsx)(t.h2,{id:"queries",children:"Queries"}),"\n",(0,s.jsx)(t.p,{children:"If we currently have 21 records already rolled-up, these are the partition that\nwe will have. If we were to perform a query, the framework will union the\nrecords from the highlighted partitions to get the result:"}),"\n",(0,s.jsxs)("table",{class:"partitioning",children:[(0,s.jsx)("tr",{children:(0,s.jsx)("th",{children:"L6"})}),(0,s.jsx)("tr",{children:(0,s.jsx)("th",{children:"L5"})}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("th",{children:"L4"}),(0,s.jsx)("td",{colspan:"8",class:"highlight",children:"0-15"})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("th",{children:"L3"}),(0,s.jsx)("td",{colspan:"4",children:"0-7"}),(0,s.jsx)("td",{colspan:"4",children:"8-15"})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("th",{children:"L2"}),(0,s.jsx)("td",{colspan:"2",children:"0-3"}),(0,s.jsx)("td",{colspan:"2",children:"4-7"}),(0,s.jsx)("td",{colspan:"2",children:"8-11"}),(0,s.jsx)("td",{colspan:"2",children:"12-15"}),(0,s.jsx)("td",{colspan:"2",class:"highlight",children:"16-19"})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("th",{children:"L1"}),(0,s.jsx)("td",{children:"0-1"}),(0,s.jsx)("td",{children:"2-3"}),(0,s.jsx)("td",{children:"4-5"}),(0,s.jsx)("td",{children:"6-7"}),(0,s.jsx)("td",{children:"8-9"}),(0,s.jsx)("td",{children:"10-11"}),(0,s.jsx)("td",{children:"12-13"}),(0,s.jsx)("td",{children:"14-15"}),(0,s.jsx)("td",{children:"16-17"}),(0,s.jsx)("td",{children:"18-19"}),(0,s.jsx)("td",{class:"highlight",children:"20-21"})]})]}),"\n",(0,s.jsx)(t.h2,{id:"updates",children:"Updates"}),"\n",(0,s.jsx)(t.p,{children:"Now suppose the framework knows that the record #11 has been updated. It will\nrefresh the partition L1 10-11. Afterward, it will refresh its parent partition,\nwhich is the partition L2 8-11, and so on until it reaches the top level."}),"\n",(0,s.jsx)(t.p,{children:"These are the partitions that will get updated when that happens:"}),"\n",(0,s.jsxs)("table",{class:"partitioning",children:[(0,s.jsx)("tr",{children:(0,s.jsx)("th",{children:"L6"})}),(0,s.jsx)("tr",{children:(0,s.jsx)("th",{children:"L5"})}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("th",{children:"L4"}),(0,s.jsx)("td",{colspan:"8",class:"highlight",children:"0-15"})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("th",{children:"L3"}),(0,s.jsx)("td",{colspan:"4",children:"0-7"}),(0,s.jsx)("td",{class:"highlight",colspan:"4",children:"8-15"})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("th",{children:"L2"}),(0,s.jsx)("td",{colspan:"2",children:"0-3"}),(0,s.jsx)("td",{colspan:"2",children:"4-7"}),(0,s.jsx)("td",{class:"highlight",colspan:"2",children:"8-11"}),(0,s.jsx)("td",{colspan:"2",children:"12-15"}),(0,s.jsx)("td",{colspan:"2",children:"16-19"})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("th",{children:"L1"}),(0,s.jsx)("td",{children:"0-1"}),(0,s.jsx)("td",{children:"2-3"}),(0,s.jsx)("td",{children:"4-5"}),(0,s.jsx)("td",{children:"6-7"}),(0,s.jsx)("td",{children:"8-9"}),(0,s.jsx)("td",{class:"highlight",children:"10-11"}),(0,s.jsx)("td",{children:"12-13"}),(0,s.jsx)("td",{children:"14-15"}),(0,s.jsx)("td",{children:"16-17"}),(0,s.jsx)("td",{children:"18-19"}),(0,s.jsx)("td",{children:"20-21"})]})]}),"\n",(0,s.jsx)(t.h2,{id:"in-the-real-world",children:"In the Real World"}),"\n",(0,s.jsx)(t.p,{children:"Having a partitioning scheme with 1-bit width as above is useful for\nexplanation, but will be pretty inefficient. Our default integer partition is\nusing 11-22-33-44-55 bits of partitioning width. This means that the first level\ncontains the data rolled-up from up to 2048 records, the second level contains 4\nmillions records that are rolled-up from the first level, and so on."})]})}function o(e={}){const{wrapper:t}={...(0,l.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(a,{...e})}):a(e)}}}]);