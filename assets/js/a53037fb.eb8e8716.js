"use strict";(self.webpackChunkrekalogika_docs=self.webpackChunkrekalogika_docs||[]).push([[4414],{4129:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>t,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"analytics/summary-entity/dimensions","title":"Dimensions","description":"A summary table can have one or more dimensions. Dimensions are properties of","source":"@site/docs/analytics/02-summary-entity/03-dimensions.md","sourceDirName":"analytics/02-summary-entity","slug":"/analytics/summary-entity/dimensions","permalink":"/analytics/summary-entity/dimensions","draft":false,"unlisted":false,"editUrl":"https://github.com/rekalogika/rekalogika-docs/edit/main/docs/analytics/02-summary-entity/03-dimensions.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"title":"Dimensions"},"sidebar":"docs","previous":{"title":"Partitioning","permalink":"/analytics/summary-entity/partitioning"},"next":{"title":"Measures","permalink":"/analytics/summary-entity/measures"}}');var r=i(4848),a=i(8453);const t={title:"Dimensions"},o=void 0,l={},c=[{value:"Dimension Definition",id:"dimension-definition",level:2},{value:"Hierarchical Dimensions",id:"hierarchical-dimensions",level:2}];function d(e){const n={a:"a",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,a.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.p,{children:"A summary table can have one or more dimensions. Dimensions are properties of\nthe source entity that are used to group the data. They have distinct, descriptive\nvalues."}),"\n",(0,r.jsx)(n.h2,{id:"dimension-definition",children:"Dimension Definition"}),"\n",(0,r.jsxs)(n.p,{children:["In a summary table, a dimension is marked by the ",(0,r.jsx)(n.code,{children:"#[Analytics\\Dimension]"}),"\nattribute."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-php",children:"use Doctrine\\DBAL\\Types\\Types;\nuse Doctrine\\ORM\\Mapping as ORM;\nuse Rekalogika\\Analytics\\Core\\Metadata as Analytics;\nuse Rekalogika\\Analytics\\Core\\ValueResolver\\PropertyValue;\nuse Symfony\\Component\\Translation\\TranslatableMessage;\n\nclass YourSummary extends Summary\n{\n    #[ORM\\Column(type: Types::STRING)]\n    // highlight-start\n    #[Analytics\\Dimension(\n        source: new PropertyValue('status'),\n        label: new TranslatableMessage('Status'),\n    )]\n    // highlight-end\n    private ?string $status = null;\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"Arguments:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"source"}),": A ",(0,r.jsx)(n.a,{href:"../value-resolver",children:(0,r.jsx)(n.code,{children:"ValueResolver"})})," or a string that defines how\nto get the value from the source entity. A string will be converted to a\n",(0,r.jsx)(n.code,{children:"PropertyValue"})," internally."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"label"}),": A label for the dimension. An output renderer will be able to use it\nas a column header or a chart legend. It can be a string or a\n",(0,r.jsx)(n.code,{children:"TranslatableInterface"})," instance, which allows it to be translated into\ndifferent languages."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"orderBy"}),": Can be ",(0,r.jsx)(n.code,{children:"Order::Ascending"})," or ",(0,r.jsx)(n.code,{children:"Order::Descending"}),". This\ndefines how the dimension values are ordered in the summary table. If not\nspecified, the default order is ascending."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"nullLabel"}),": Describes the dimension value when the source value is ",(0,r.jsx)(n.code,{children:"null"}),", so\nthe final output can be made more readable."]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"hierarchical-dimensions",children:"Hierarchical Dimensions"}),"\n",(0,r.jsxs)(n.p,{children:["A dimension can be hierarchical. A common example is the ",(0,r.jsx)(n.code,{children:"time"})," dimension. The\n",(0,r.jsx)(n.code,{children:"time"})," dimension can be further divided into ",(0,r.jsx)(n.code,{children:"year"}),", ",(0,r.jsx)(n.code,{children:"month"}),", ",(0,r.jsx)(n.code,{children:"day"}),", and more.\nThe caller will then be able to decide whether to group the time by ",(0,r.jsx)(n.code,{children:"year"}),",\n",(0,r.jsx)(n.code,{children:"month"}),", or ",(0,r.jsx)(n.code,{children:"day"}),", etc."]}),"\n",(0,r.jsxs)(n.p,{children:["A hierarchical dimension is represented by a Doctrine embeddable. The following\nexample uses a ",(0,r.jsx)(n.code,{children:"TimeDimensionHierarchy"}),"."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-php",children:"use Doctrine\\ORM\\Mapping as ORM;\nuse Rekalogika\\Analytics\\Core\\Metadata as Analytics;\nuse Rekalogika\\Analytics\\Time\\Hierarchy\\TimeDimensionHierarchy;\nuse Rekalogika\\Analytics\\Core\\ValueResolver\\PropertyValue;\n\nclass YourSummary extends Summary\n{\n    #[ORM\\Embedded()]\n    #[Analytics\\Dimension(\n        source: new PropertyValue('time'),\n    )]\n    private TimeDimensionHierarchy $time;\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"The framework provides these predefined time hierarchies:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"TimeDimensionHierarchy"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"DateDimensionHierarchy"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"SimpleTimeDimensionHierarchy"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"SimpleDateDimensionHierarchy"})}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>t,x:()=>o});var s=i(6540);const r={},a=s.createContext(r);function t(e){const n=s.useContext(a);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:t(e.components),s.createElement(a.Provider,{value:n},e.children)}}}]);