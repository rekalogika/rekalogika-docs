"use strict";(self.webpackChunkrekalogika_docs=self.webpackChunkrekalogika_docs||[]).push([[9684],{2226:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>c,contentTitle:()=>s,default:()=>d,frontMatter:()=>i,metadata:()=>o,toc:()=>g});var t=n(5893),r=n(1151);const i={title:"Batch Processing"},s=void 0,o={id:"rekapager/batch-processing",title:"Batch Processing",description:"Any PageableInterface objects can be used to iterate its underlying data page",source:"@site/docs/rekapager/05-batch-processing.md",sourceDirName:"rekapager",slug:"/rekapager/batch-processing",permalink:"/rekapager/batch-processing",draft:!1,unlisted:!1,editUrl:"https://github.com/rekalogika/rekalogika-docs/edit/main/docs/rekapager/05-batch-processing.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{title:"Batch Processing"},sidebar:"docs",previous:{title:"Pager and Pager Items",permalink:"/rekapager/pager-pageritem"},next:{title:"Integrating Rekapager into a Framework",permalink:"/rekapager/integrating"}},c={},g=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"Batch Processing",id:"batch-processing",level:2}];function l(e){const a={a:"a",admonition:"admonition",code:"code",h2:"h2",p:"p",pre:"pre",...(0,r.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(a.p,{children:["Any ",(0,t.jsx)(a.code,{children:"PageableInterface"})," objects can be used to iterate its underlying data page\nby page."]}),"\n",(0,t.jsx)(a.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,t.jsxs)(a.p,{children:["When using the library only for batch processing, you only need to ",(0,t.jsx)(a.a,{href:"adapters",children:"install the\nadapters"})," you need. Framework integration is not required."]}),"\n",(0,t.jsx)(a.h2,{id:"batch-processing",children:"Batch Processing"}),"\n",(0,t.jsx)(a.p,{children:"To iterate over a large amount of data, you can use the following pattern:"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-php",children:"use Doctrine\\ORM\\EntityManagerInterface;\nuse Rekalogika\\Rekapager\\PageableInterface;\n\n/** @var PageableInterface $pageable */\n/** @var EntityManagerInterface $entityManager */\n\nforeach ($pageable->withItemsPerPage(1000)->getPages() as $page) {\n    foreach ($page as $item) {\n        // Do something with the item\n    }\n\n    // Do something after each page here\n    // With Doctrine, you'd usually want to flush() and clear() here\n    $entityManager->flush(); // if required\n    $entitymanager->clear();\n}\n"})}),"\n",(0,t.jsx)(a.admonition,{title:"Protip",type:"tip",children:(0,t.jsx)(a.p,{children:"You should always use keyset pagination for batch processing large amounts of\ndata residing in a database."})})]})}function d(e={}){const{wrapper:a}={...(0,r.a)(),...e.components};return a?(0,t.jsx)(a,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}},1151:(e,a,n)=>{n.d(a,{Z:()=>o,a:()=>s});var t=n(7294);const r={},i=t.createContext(r);function s(e){const a=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(a):{...a,...e}}),[a,e])}function o(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),t.createElement(i.Provider,{value:a},e.children)}}}]);