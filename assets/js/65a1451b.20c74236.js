"use strict";(self.webpackChunkrekalogika_docs=self.webpackChunkrekalogika_docs||[]).push([[6454],{8453:(n,e,t)=>{t.d(e,{R:()=>a,x:()=>r});var s=t(6540);const i={},o=s.createContext(i);function a(n){const e=s.useContext(o);return s.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function r(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(i):n.components||i:a(n.components),s.createElement(o.Provider,{value:e},n.children)}},9991:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>c,contentTitle:()=>r,default:()=>h,frontMatter:()=>a,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"domain-event/transaction","title":"Transactions","description":"The framework fully supports transaction, as long as the caller uses the","source":"@site/docs/domain-event/05-transaction.md","sourceDirName":"domain-event","slug":"/domain-event/transaction","permalink":"/domain-event/transaction","draft":false,"unlisted":false,"editUrl":"https://github.com/rekalogika/rekalogika-docs/edit/main/docs/domain-event/05-transaction.md","tags":[],"version":"current","sidebarPosition":5,"frontMatter":{"title":"Transactions"},"sidebar":"docs","previous":{"title":"Equatable Domain Events","permalink":"/domain-event/equatable"},"next":{"title":"Manual Control","permalink":"/domain-event/manual-control"}}');var i=t(4848),o=t(8453);const a={title:"Transactions"},r=void 0,c={},l=[{value:"Semantics",id:"semantics",level:2},{value:"Managing Transaction Using DBAL is not Supported",id:"managing-transaction-using-dbal-is-not-supported",level:2}];function d(n){const e={admonition:"admonition",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.R)(),...n.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(e.p,{children:"The framework fully supports transaction, as long as the caller uses the\nmethods provided by the entity manager."}),"\n",(0,i.jsx)(e.h2,{id:"semantics",children:"Semantics"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"Immediate events are dispatched immediately as usual."}),"\n",(0,i.jsxs)(e.li,{children:["Pre-flush events will be dispatched before every ",(0,i.jsx)(e.code,{children:"flush()"})," regardless of the\ntransaction status."]}),"\n",(0,i.jsxs)(e.li,{children:["Post-flush events will be dispatched after the outermost ",(0,i.jsx)(e.code,{children:"commit()"}),"."]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.code,{children:"rollback()"})," clears the pending post-flush events collected during the\ntransaction, but retains the events collected before the transaction."]}),"\n",(0,i.jsxs)(e.li,{children:["The events are collected only on ",(0,i.jsx)(e.code,{children:"flush()"}),"."]}),"\n"]}),"\n",(0,i.jsx)(e.h2,{id:"managing-transaction-using-dbal-is-not-supported",children:"Managing Transaction Using DBAL is not Supported"}),"\n",(0,i.jsx)(e.admonition,{type:"warning",children:(0,i.jsxs)(e.p,{children:["Doing the transaction by hand using DBAL's ",(0,i.jsx)(e.code,{children:"Connection"})," is not supported. Always\ndo the transaction using entity manager's methods of ",(0,i.jsx)(e.code,{children:"beginTransaction()"}),",\n",(0,i.jsx)(e.code,{children:"commit()"}),", ",(0,i.jsx)(e.code,{children:"rollback()"}),", ",(0,i.jsx)(e.code,{children:"transactional()"})," and ",(0,i.jsx)(e.code,{children:"wrapInTransaction()"}),"."]})}),"\n",(0,i.jsx)(e.p,{children:"Don't do like this snippet taken from Doctrine's documentation:"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-php",children:"// warning: don't do this\n$em->getConnection()->beginTransaction(); // \ud83d\udc4e\ntry {\n    // ... do some work\n    $user = new User;\n    $user->setName('George');\n    $em->persist($user);\n    $em->flush();\n    $em->getConnection()->commit(); // \ud83d\udc4e\n} catch (Exception $e) {\n    $em->getConnection()->rollBack(); // \ud83d\udc4e\n    throw $e;\n}\n"})}),"\n",(0,i.jsx)(e.p,{children:"Instead, do this:"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-php",children:"// highlight-next-line\n$em->beginTransaction(); // \ud83d\udc4d\ntry {\n    // ... do some work\n    $user = new User;\n    $user->setName('George');\n    $em->persist($user);\n    $em->flush();\n    // highlight-next-line\n    $em->commit(); // \ud83d\udc4d\n} catch (Exception $e) {\n    // highlight-next-line\n    $em->rollback(); // \ud83d\udc4d\n    throw $e;\n}\n"})})]})}function h(n={}){const{wrapper:e}={...(0,o.R)(),...n.components};return e?(0,i.jsx)(e,{...n,children:(0,i.jsx)(d,{...n})}):d(n)}}}]);