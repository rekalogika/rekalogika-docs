"use strict";(self.webpackChunkrekalogika_docs=self.webpackChunkrekalogika_docs||[]).push([[3892],{2041:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>c,default:()=>r,frontMatter:()=>a,metadata:()=>i,toc:()=>h});const i=JSON.parse('{"id":"domain-event/dispatch-events","title":"Dispatch Events","description":"When a domain event is dispatched, another event is dispatched. The event wraps","source":"@site/docs/domain-event/07-dispatch-events.md","sourceDirName":"domain-event","slug":"/domain-event/dispatch-events","permalink":"/domain-event/dispatch-events","draft":false,"unlisted":false,"editUrl":"https://github.com/rekalogika/rekalogika-docs/edit/main/docs/domain-event/07-dispatch-events.md","tags":[],"version":"current","sidebarPosition":7,"frontMatter":{"title":"Dispatch Events"},"sidebar":"docs","previous":{"title":"Manual Control","permalink":"/domain-event/manual-control"},"next":{"title":"Testing","permalink":"/domain-event/testing"}}');var s=t(4848),o=t(8453);const a={title:"Dispatch Events"},c=void 0,d={},h=[{value:"List of the Dispatch Events",id:"list-of-the-dispatch-events",level:2},{value:"Listening to the Dispatch Events",id:"listening-to-the-dispatch-events",level:2},{value:"Purpose",id:"purpose",level:2}];function l(e){const n={admonition:"admonition",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.p,{children:"When a domain event is dispatched, another event is dispatched. The event wraps\nthe original domain event, allowing you to listen to all domain events in a\nsingle listener."}),"\n",(0,s.jsx)(n.p,{children:"These events are dispatched using the default Symfony event dispatcher."}),"\n",(0,s.jsx)(n.h2,{id:"list-of-the-dispatch-events",children:"List of the Dispatch Events"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"DomainEventImmediateDispatchEvent"}),": dispatched immediately after the domain\nevent is recorded."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"DomainEventPreFlushDispatchEvent"}),": dispatched before the ",(0,s.jsx)(n.code,{children:"flush()"})," is called."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"DomainEventPostFlushDispatchEvent"}),": dispatched after the ",(0,s.jsx)(n.code,{children:"flush()"})," is called."]}),"\n"]}),"\n",(0,s.jsx)(n.admonition,{type:"note",children:(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"DomainEventPreFlushDispatchEvent"})," and ",(0,s.jsx)(n.code,{children:"DomainEventPostFlushDispatchEvent"})," also\nincludes the ",(0,s.jsx)(n.code,{children:"ObjectManager"})," (",(0,s.jsx)(n.code,{children:"EntityManager"}),") instance that manages the object\nthat emitted the domain event."]})}),"\n",(0,s.jsx)(n.h2,{id:"listening-to-the-dispatch-events",children:"Listening to the Dispatch Events"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-php",children:"use Symfony\\Component\\EventDispatcher\\Attribute\\AsEventListener;\n\n#[AsEventListener]\nclass PreFlushDispatchEventListener\n{\n    public function __invoke(DomainEventPreFlushDispatchEvent $event) {\n        // log the $event, publish the $event on an event bus, etc\n    }\n}\n"})}),"\n",(0,s.jsx)(n.h2,{id:"purpose",children:"Purpose"}),"\n",(0,s.jsx)(n.p,{children:"This mechanism is created to allow you to build on top of the domain events. For\nexample, you can record the events for audit trails, or publish the events on an\nevent bus."}),"\n",(0,s.jsx)(n.admonition,{type:"info",children:(0,s.jsxs)(n.p,{children:["The package ",(0,s.jsx)(n.code,{children:"rekalogika/domain-event-outbox"})," is completely decoupled from\n",(0,s.jsx)(n.code,{children:"rekalogika/domain-event"}),". The only thing that connects them is the event ",(0,s.jsx)(n.code,{children:"DomainEventPreFlushDispatchEvent"}),"."]})})]})}function r(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>c});var i=t(6540);const s={},o=i.createContext(s);function a(e){const n=i.useContext(o);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),i.createElement(o.Provider,{value:n},e.children)}}}]);