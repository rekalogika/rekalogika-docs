"use strict";(self.webpackChunkrekalogika_docs=self.webpackChunkrekalogika_docs||[]).push([[1049],{2719:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>a,default:()=>h,frontMatter:()=>l,metadata:()=>i,toc:()=>o});const i=JSON.parse('{"id":"analytics/summary-entity/partitioning","title":"Partitioning","description":"For performance and to facilitate incremental updates, the summary table is","source":"@site/docs/analytics/02-summary-entity/02-partitioning.md","sourceDirName":"analytics/02-summary-entity","slug":"/analytics/summary-entity/partitioning","permalink":"/analytics/summary-entity/partitioning","draft":false,"unlisted":false,"editUrl":"https://github.com/rekalogika/rekalogika-docs/edit/main/docs/analytics/02-summary-entity/02-partitioning.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"title":"Partitioning"},"sidebar":"docs","previous":{"title":"Summary Class","permalink":"/analytics/summary-entity/summary-class"},"next":{"title":"Dimensions","permalink":"/analytics/summary-entity/dimensions"}}');var r=n(4848),s=n(8453);const l={title:"Partitioning"},a=void 0,d={},o=[{value:"Best Practices, or TLDR;",id:"best-practices-or-tldr",level:2},{value:"Concepts",id:"concepts",level:2},{value:"Available Partitioning Strategies",id:"available-partitioning-strategies",level:2},{value:"<code>DefaultIntegerPartition</code>",id:"defaultintegerpartition",level:3},{value:"<code>UuidV7IntegerPartition</code>",id:"uuidv7integerpartition",level:3},{value:"Custom Integer Partition",id:"custom-integer-partition",level:3},{value:"Custom Non-Integer Partition",id:"custom-non-integer-partition",level:3},{value:"How Partitioning Works",id:"how-partitioning-works",level:2}];function c(e){const t={admonition:"admonition",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(t.p,{children:["For performance and to facilitate incremental updates, the summary table is\npartitioned according to the property tagged with the ",(0,r.jsx)(t.code,{children:"#[Analytics\\Partition]"}),"\nattribute. This property must be a Doctrine embeddable that implements\n",(0,r.jsx)(t.code,{children:"Partition"}),"."]}),"\n",(0,r.jsx)(t.admonition,{type:"warning",children:(0,r.jsx)(t.p,{children:"The partitioning term used here is different from the partitioning term used in\nthe database. Although, it might be possible to use the summary partitioning key\nas the database partition key."})}),"\n",(0,r.jsx)(t.h2,{id:"best-practices-or-tldr",children:"Best Practices, or TLDR;"}),"\n",(0,r.jsx)(t.p,{children:"If the source entity uses an auto-incrementing integer primary key, use this\npartitioning scheme:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-php",children:"use Doctrine\\ORM\\Mapping as ORM;\nuse Rekalogika\\Analytics\\Attribute as Analytics;\nuse Rekalogika\\Analytics\\Model\\Summary;\nuse Rekalogika\\Analytics\\Partition\\DefaultIntegerPartition;\nuse Rekalogika\\Analytics\\ValueResolver\\PropertyValueResolver;\n\nclass YourSummary extends Summary\n{\n    // highlight-start\n    #[ORM\\Embedded()]\n    #[Analytics\\Partition(new PropertyValueResolver('id'))]\n    private DefaultIntegerPartition $partition;\n    // highlight-end\n}\n"})}),"\n",(0,r.jsx)(t.p,{children:"If your source entity uses UUIDv7 (or ULID) as the primary key, use this\npartitioning scheme:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-php",children:"use Doctrine\\ORM\\Mapping as ORM;\nuse Rekalogika\\Analytics\\Attribute as Analytics;\nuse Rekalogika\\Analytics\\Model\\Partition\\UuidV7IntegerPartition;\nuse Rekalogika\\Analytics\\Model\\Summary;\nuse Rekalogika\\Analytics\\ValueResolver\\UuidToTruncatedIntegerResolver;\n\nclass YourSummary extends Summary\n{\n    // highlight-start\n    #[ORM\\Embedded()]\n    #[Analytics\\Partition(new UuidToTruncatedIntegerResolver('id'))]\n    private UuidV7IntegerPartition $partition;\n    // highlight-end\n}\n"})}),"\n",(0,r.jsx)(t.h2,{id:"concepts",children:"Concepts"}),"\n",(0,r.jsxs)(t.p,{children:["A property of the source entity is designated the ",(0,r.jsx)(t.strong,{children:"partitioning key"}),". The key\nis used to partition the data. The key is usually the primary key of the source\nentity, but not necessarily so. The key must be monotonic, or always increasing,\nbut not necessarily unique."]}),"\n",(0,r.jsxs)(t.p,{children:["Partitioning is divided into ",(0,r.jsx)(t.strong,{children:"levels"}),". Each level consists of multiple\n",(0,r.jsx)(t.strong,{children:"partition"})," of the same length, one after the other. Levels are indicated by a\nnumber. A lower level has a shorter length than a higher level."]}),"\n",(0,r.jsxs)(t.p,{children:["A partition is indicated by the ",(0,r.jsx)(t.strong,{children:"level"})," and the ",(0,r.jsx)(t.strong,{children:"key"}),". A partition of a\nlevel consists of several partitions of the lower level, except the lowermost\nlevel."]}),"\n",(0,r.jsxs)(t.p,{children:["Records from the source entity are grouped by a specific lowest level partition\naccording to the ",(0,r.jsx)(t.strong,{children:"partitioning key"}),", and rolled up into that partition. Then,\neventually, the lowest level accumulates enough partitions, and in turn they are\nrolled up into the next higher level partition. And so on, until the highest\nlevel is reached."]}),"\n",(0,r.jsx)(t.p,{children:"If new source entities are added, they will be rolled up to the newest lowest\nlevel partition, and the framework does not need to reprocess the entire summary\ntable."}),"\n",(0,r.jsx)(t.p,{children:"If changes are detected in the old records, the lowest partition is marked as\ndirty. The framework will reprocess the dirty partition, then mark the higher\nlevel partition as dirty, and so on, until it bubbles up to the highest level.\nAgain, the framework does not need to reprocess the entire summary table."}),"\n",(0,r.jsx)(t.h2,{id:"available-partitioning-strategies",children:"Available Partitioning Strategies"}),"\n",(0,r.jsx)(t.h3,{id:"defaultintegerpartition",children:(0,r.jsx)(t.code,{children:"DefaultIntegerPartition"})}),"\n",(0,r.jsx)(t.p,{children:"Suitable for partitioning auto-incrementing integer primary keys. It partitions\nusing 11, 22, 33, 44, and 55 bits of width. A 11-bit partition aggregates up to\n2048 records."}),"\n",(0,r.jsx)(t.h3,{id:"uuidv7integerpartition",children:(0,r.jsx)(t.code,{children:"UuidV7IntegerPartition"})}),"\n",(0,r.jsxs)(t.p,{children:["Suitable for partitioning UUIDv7 (or ULID) primary keys. It should be coupled\nby a ",(0,r.jsx)(t.code,{children:"UuidToTruncatedIntegerResolver"})," value resolver that truncates the 128-bit\nUUID to a 48-bit integer."]}),"\n",(0,r.jsx)(t.p,{children:"UUIDv7 stores the time in the first 48 bits. So, the widths of each level\ncorrespond to the following intervals:"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:"22 bits: corresponds to 1.165 hour interval"}),"\n",(0,r.jsx)(t.li,{children:"27 bits: corresponds to 1.6 days interval"}),"\n",(0,r.jsx)(t.li,{children:"32 bits: corresponds to 50 days interval"}),"\n",(0,r.jsx)(t.li,{children:"37 bits: corresponds to 4.3 years interval"}),"\n"]}),"\n",(0,r.jsx)(t.h3,{id:"custom-integer-partition",children:"Custom Integer Partition"}),"\n",(0,r.jsxs)(t.p,{children:["You can create a custom integer partition by extending ",(0,r.jsx)(t.code,{children:"IntegerPartition"}),"."]}),"\n",(0,r.jsx)(t.h3,{id:"custom-non-integer-partition",children:"Custom Non-Integer Partition"}),"\n",(0,r.jsxs)(t.p,{children:["You might be able to create your own non-integer partition by implementing the\n",(0,r.jsx)(t.code,{children:"Partition"})," interface, but currently this is untested and unsupported."]}),"\n",(0,r.jsx)(t.h2,{id:"how-partitioning-works",children:"How Partitioning Works"}),"\n",(0,r.jsxs)(t.p,{children:["The following table shows how the records are partitioned using the hypothetical\n",(0,r.jsx)(t.code,{children:"IntegerPartition"})," with 1-2-3-4-5-6 bits of partitioning width. The leftmost\ncolumn indicates the level. Other cells are the partitions of that level.\nNumbers in the cells indicate the partitioning key range that are rolled-up in\nthe partition."]}),"\n",(0,r.jsxs)("table",{class:"partitioning",children:[(0,r.jsxs)("tr",{children:[(0,r.jsx)("th",{children:"L6"}),(0,r.jsx)("td",{colspan:"32",children:"0-63"})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("th",{children:"L5"}),(0,r.jsx)("td",{colspan:"16",children:"0-31"}),(0,r.jsx)("td",{colspan:"16",children:"32-63"})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("th",{children:"L4"}),(0,r.jsx)("td",{colspan:"8",children:"0-15"}),(0,r.jsx)("td",{colspan:"8",children:"16-31"}),(0,r.jsx)("td",{colspan:"8",children:"32-47"}),(0,r.jsx)("td",{colspan:"8",children:"48-63"})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("th",{children:"L3"}),(0,r.jsx)("td",{colspan:"4",children:"0-7"}),(0,r.jsx)("td",{colspan:"4",children:"8-15"}),(0,r.jsx)("td",{colspan:"4",children:"16-23"}),(0,r.jsx)("td",{colspan:"4",children:"24-31"}),(0,r.jsx)("td",{colspan:"4",children:"32-39"}),(0,r.jsx)("td",{colspan:"4",children:"40-47"}),(0,r.jsx)("td",{colspan:"4",children:"48-55"}),(0,r.jsx)("td",{colspan:"4",children:"56-63"})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("th",{children:"L2"}),(0,r.jsx)("td",{colspan:"2",children:"0-3"}),(0,r.jsx)("td",{colspan:"2",children:"4-7"}),(0,r.jsx)("td",{colspan:"2",children:"8-11"}),(0,r.jsx)("td",{colspan:"2",children:"12-15"}),(0,r.jsx)("td",{colspan:"2",children:"16-19"}),(0,r.jsx)("td",{colspan:"2",children:"20-23"}),(0,r.jsx)("td",{colspan:"2",children:"24-27"}),(0,r.jsx)("td",{colspan:"2",children:"28-31"}),(0,r.jsx)("td",{colspan:"2",children:"32-35"}),(0,r.jsx)("td",{colspan:"2",children:"36-39"}),(0,r.jsx)("td",{colspan:"2",children:"40-43"}),(0,r.jsx)("td",{colspan:"2",children:"44-47"}),(0,r.jsx)("td",{colspan:"2",children:"48-51"}),(0,r.jsx)("td",{colspan:"2",children:"52-55"}),(0,r.jsx)("td",{colspan:"2",children:"56-59"}),(0,r.jsx)("td",{colspan:"2",children:"60-63"})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("th",{children:"L1"}),(0,r.jsx)("td",{children:"0-1"}),(0,r.jsx)("td",{children:"2-3"}),(0,r.jsx)("td",{children:"4-5"}),(0,r.jsx)("td",{children:"6-7"}),(0,r.jsx)("td",{children:"8-9"}),(0,r.jsx)("td",{children:"10-11"}),(0,r.jsx)("td",{children:"12-13"}),(0,r.jsx)("td",{children:"14-15"}),(0,r.jsx)("td",{children:"16-17"}),(0,r.jsx)("td",{children:"18-19"}),(0,r.jsx)("td",{children:"20-21"}),(0,r.jsx)("td",{children:"22-23"}),(0,r.jsx)("td",{children:"24-25"}),(0,r.jsx)("td",{children:"26-27"}),(0,r.jsx)("td",{children:"28-29"}),(0,r.jsx)("td",{children:"30-31"}),(0,r.jsx)("td",{children:"32-33"}),(0,r.jsx)("td",{children:"34-35"}),(0,r.jsx)("td",{children:"36-37"}),(0,r.jsx)("td",{children:"38-39"}),(0,r.jsx)("td",{children:"40-41"}),(0,r.jsx)("td",{children:"42-43"}),(0,r.jsx)("td",{children:"44-45"}),(0,r.jsx)("td",{children:"46-47"}),(0,r.jsx)("td",{children:"48-49"}),(0,r.jsx)("td",{children:"50-51"}),(0,r.jsx)("td",{children:"52-53"}),(0,r.jsx)("td",{children:"54-55"}),(0,r.jsx)("td",{children:"56-57"}),(0,r.jsx)("td",{children:"58-59"}),(0,r.jsx)("td",{children:"60-61"}),(0,r.jsx)("td",{children:"62-63"})]})]}),"\n",(0,r.jsx)(t.p,{children:"If we currently have 21 records already rolled-up, these are the partition that\nwe will have. If we were to perform a query, the framework will combine the\nhighlighted partitions to get the result:"}),"\n",(0,r.jsxs)("table",{class:"partitioning",children:[(0,r.jsx)("tr",{children:(0,r.jsx)("th",{children:"L6"})}),(0,r.jsx)("tr",{children:(0,r.jsx)("th",{children:"L5"})}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("th",{children:"L4"}),(0,r.jsx)("td",{colspan:"8",class:"highlight",children:"0-15"})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("th",{children:"L3"}),(0,r.jsx)("td",{colspan:"4",children:"0-7"}),(0,r.jsx)("td",{colspan:"4",children:"8-15"})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("th",{children:"L2"}),(0,r.jsx)("td",{colspan:"2",children:"0-3"}),(0,r.jsx)("td",{colspan:"2",children:"4-7"}),(0,r.jsx)("td",{colspan:"2",children:"8-11"}),(0,r.jsx)("td",{colspan:"2",children:"12-15"}),(0,r.jsx)("td",{colspan:"2",class:"highlight",children:"16-19"})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("th",{children:"L1"}),(0,r.jsx)("td",{children:"0-1"}),(0,r.jsx)("td",{children:"2-3"}),(0,r.jsx)("td",{children:"4-5"}),(0,r.jsx)("td",{children:"6-7"}),(0,r.jsx)("td",{children:"8-9"}),(0,r.jsx)("td",{children:"10-11"}),(0,r.jsx)("td",{children:"12-13"}),(0,r.jsx)("td",{children:"14-15"}),(0,r.jsx)("td",{children:"16-17"}),(0,r.jsx)("td",{children:"18-19"}),(0,r.jsx)("td",{class:"highlight",children:"20-21"})]})]})]})}function h(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>l,x:()=>a});var i=n(6540);const r={},s=i.createContext(r);function l(e){const t=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:l(e.components),i.createElement(s.Provider,{value:t},e.children)}}}]);