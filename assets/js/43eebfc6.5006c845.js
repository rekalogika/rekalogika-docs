"use strict";(self.webpackChunkrekalogika_docs=self.webpackChunkrekalogika_docs||[]).push([[9660],{618:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>d,frontMatter:()=>s,metadata:()=>i,toc:()=>l});var r=n(5893),a=n(1151);const s={title:"Batch Processing"},o=void 0,i={id:"rekapager/batch-processing",title:"Batch Processing",description:"Any PageableInterface objects can be used to iterate its underlying data page",source:"@site/docs/rekapager/07-batch-processing.md",sourceDirName:"rekapager",slug:"/rekapager/batch-processing",permalink:"/rekapager/batch-processing",draft:!1,unlisted:!1,editUrl:"https://github.com/rekalogika/rekalogika-docs/edit/main/docs/rekapager/07-batch-processing.md",tags:[],version:"current",sidebarPosition:7,frontMatter:{title:"Batch Processing"},sidebar:"docs",previous:{title:"API Platform Integration",permalink:"/rekapager/api-platform"},next:{title:"Integrating Rekapager into a Framework",permalink:"/rekapager/integrating"}},c={},l=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"Batch Processing",id:"batch-processing",level:2},{value:"Comparison to <code>Query::toIterable()</code>",id:"comparison-to-querytoiterable",level:2}];function h(e){const t={a:"a",admonition:"admonition",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,a.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(t.p,{children:["Any ",(0,r.jsx)(t.code,{children:"PageableInterface"})," objects can be used to iterate its underlying data page\nby page."]}),"\n",(0,r.jsx)(t.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,r.jsxs)(t.p,{children:["When using the library only for batch processing, you only need to ",(0,r.jsx)(t.a,{href:"adapters",children:"install the\nadapters"})," you need. Framework integration is not required."]}),"\n",(0,r.jsx)(t.h2,{id:"batch-processing",children:"Batch Processing"}),"\n",(0,r.jsx)(t.p,{children:"To iterate over a large amount of data, you can use the following pattern:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-php",children:"use Doctrine\\ORM\\EntityManagerInterface;\nuse Rekalogika\\Rekapager\\PageableInterface;\n\n/** @var PageableInterface $pageable */\n/** @var EntityManagerInterface $entityManager */\n\nforeach ($pageable->withItemsPerPage(1000)->getPages() as $page) {\n    foreach ($page as $item) {\n        // Do something with the item\n    }\n\n    // Do something after each page here\n    // With Doctrine, you'd usually want to flush() and clear() here\n    $entityManager->flush(); // if required\n    $entitymanager->clear();\n}\n"})}),"\n",(0,r.jsx)(t.admonition,{title:"Protip",type:"tip",children:(0,r.jsx)(t.p,{children:"You should always use keyset pagination for batch processing large amounts of\ndata residing in a database. Offset pagination will become slower as the offset\nincreases."})}),"\n",(0,r.jsxs)(t.h2,{id:"comparison-to-querytoiterable",children:["Comparison to ",(0,r.jsx)(t.code,{children:"Query::toIterable()"})]}),"\n",(0,r.jsxs)(t.p,{children:["Doctrine's documentation ",(0,r.jsxs)(t.a,{href:"https://www.doctrine-project.org/projects/doctrine-orm/en/latest/reference/batch-processing.html#iterating-results",children:["recommends using\n",(0,r.jsx)(t.code,{children:"Query::toIterable()"})]}),"\nto iterate over large result sets. This, however, has several drawbacks:"]}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:["\n",(0,r.jsxs)(t.p,{children:["Contrary to what one might expect, ",(0,r.jsx)(t.code,{children:"toIterable()"})," actually runs the query only\nonce, then loads the entire result into memory, which can be problematic for\nlarge result sets. It only saves us memory in the hydration phase, in the\nsense that it does not hydrate the result into entities all at once."]}),"\n"]}),"\n",(0,r.jsxs)(t.li,{children:["\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.code,{children:"toIterable()"})," may not trigger the ",(0,r.jsxs)(t.a,{href:"https://www.doctrine-project.org/projects/doctrine-orm/en/latest/reference/events.html#postload",children:[(0,r.jsx)(t.code,{children:"postLoad"})," event\nhandlers"]}),".\nTherefore, your entities might not behave the same way as when you load them\nnormally."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(t.p,{children:["Using ",(0,r.jsx)(t.code,{children:"PageableInterface"})," for batch processing should solve these issues."]})]})}function d(e={}){const{wrapper:t}={...(0,a.a)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(h,{...e})}):h(e)}},1151:(e,t,n)=>{n.d(t,{Z:()=>i,a:()=>o});var r=n(7294);const a={},s=r.createContext(a);function o(e){const t=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),r.createElement(s.Provider,{value:t},e.children)}}}]);