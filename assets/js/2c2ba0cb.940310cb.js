"use strict";(self.webpackChunkrekalogika_docs=self.webpackChunkrekalogika_docs||[]).push([[422],{3752:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>r,default:()=>u,frontMatter:()=>o,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"pivot-table/intro","title":"Introduction","description":"A PHP library for transforming multidimensional data into a pivot table.","source":"@site/docs/pivot-table/00-intro.md","sourceDirName":"pivot-table","slug":"/pivot-table/intro","permalink":"/pivot-table/intro","draft":false,"unlisted":false,"editUrl":"https://github.com/rekalogika/rekalogika-docs/edit/main/docs/pivot-table/00-intro.md","tags":[],"version":"current","sidebarPosition":0,"frontMatter":{"title":"Introduction"},"sidebar":"docs","previous":{"title":"rekalogika/pivot-table","permalink":"/pivot-table/"},"next":{"title":"Quick Start","permalink":"/pivot-table/quick-start"}}');var s=n(4848),a=n(8453);const o={title:"Introduction"},r=void 0,l={},d=[{value:"Features",id:"features",level:2},{value:"Design Philosophy",id:"design-philosophy",level:2},{value:"Requirements",id:"requirements",level:2},{value:"Installation",id:"installation",level:2}];function c(e){const t={code:"code",h2:"h2",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.p,{children:"A PHP library for transforming multidimensional data into a pivot table."}),"\n",(0,s.jsx)(t.h2,{id:"features",children:"Features"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Handles complex data"}),". Renders complex multi-dimensional data involving\nmultiple dimensions and measures into equally complex pivot tables."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Flexible pivoting"}),": Configure which dimensions should be pivoted (in\ncolumns) vs unpivoted (in rows)."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Measures are dimension"}),": Measures are regarded as a special dimension\n",(0,s.jsx)(t.code,{children:"@values"})," that can be flexibly positioned in the pivot structure."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Subtotals"}),": Renders subtotals if they exist in the source data."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Dimension ordering"}),": Honors the ordering of dimensions as specified in the\n",(0,s.jsx)(t.code,{children:"ORDER BY"})," clause of the SQL query."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Accepts simple array data"}),": Compatible with all result set formats. Does\nnot require specific database and database access libraries."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Custom integration options"}),": Options for deeper integration with your\napplication by providing your custom data structure in table-like data, or in\ndata cube if your data is already in that format."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Customizable legends"}),": Define custom labels for dimensions, measures, and\nsubtotals."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Does not require a specific data type"}),": Your dimension members and measure\nvalues can be of any type, including enums, entity objects, money-pattern\nobjects, etc. You can supply a custom renderer to format the output as\nrequired."]}),"\n"]}),"\n",(0,s.jsx)(t.h2,{id:"design-philosophy",children:"Design Philosophy"}),"\n",(0,s.jsx)(t.p,{children:"The library only transforms the data into a pivot table, but does not perform\nany calculations like sum, average, etc, including for calculating subtotals.\nThis decision is taken because some aggregation functions, like Hyperloglog, are\ndatabase specific, and cannot be easily performed using PHP. Instead, it expects\nthe data to be already cubed."}),"\n",(0,s.jsx)(t.p,{children:"If your data needs to be manually cubed, then it should be possible to use a\ncubing layer, but it is not yet written."}),"\n",(0,s.jsx)(t.h2,{id:"requirements",children:"Requirements"}),"\n",(0,s.jsx)(t.p,{children:"PHP 8.2 or higher."}),"\n",(0,s.jsxs)(t.p,{children:["Technically, the library does not require a specific database software, it does\nnot even require a database at all. However, it works best if the data is\nproperly cubed. If you are getting the data from a database, the most convenient\nway to accomplish that is to use a database server that supports the ",(0,s.jsx)(t.code,{children:"GROUP BY CUBE()"})," clause, like PostgreSQL and SQL Server."]}),"\n",(0,s.jsx)(t.h2,{id:"installation",children:"Installation"}),"\n",(0,s.jsx)(t.p,{children:"Install via Composer:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-bash",children:"composer require rekalogika/pivot-table\n"})})]})}function u(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>o,x:()=>r});var i=n(6540);const s={},a=i.createContext(s);function o(e){const t=i.useContext(a);return i.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),i.createElement(a.Provider,{value:t},e.children)}}}]);