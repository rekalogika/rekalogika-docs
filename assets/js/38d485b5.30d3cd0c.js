"use strict";(self.webpackChunkrekalogika_docs=self.webpackChunkrekalogika_docs||[]).push([[7696],{8453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>a});var i=t(6540);const o={},r=i.createContext(o);function s(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),i.createElement(r.Provider,{value:n},e.children)}},9639:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>p,frontMatter:()=>s,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"api-lite/intro","title":"Introduction","description":"A set of tools to simplify working with [API","source":"@site/docs/api-lite/00-intro.md","sourceDirName":"api-lite","slug":"/api-lite/intro","permalink":"/api-lite/intro","draft":false,"unlisted":false,"editUrl":"https://github.com/rekalogika/rekalogika-docs/edit/main/docs/api-lite/00-intro.md","tags":[],"version":"current","sidebarPosition":0,"frontMatter":{"title":"Introduction"},"sidebar":"docs","previous":{"title":"rekalogika/api-lite","permalink":"/api-lite/"},"next":{"title":"Components Overview","permalink":"/api-lite/components"}}');var o=t(4848),r=t(8453);const s={title:"Introduction"},a=void 0,l={},c=[{value:"Motivation",id:"motivation",level:2},{value:"Installation",id:"installation",level:2},{value:"Synopsis",id:"synopsis",level:2},{value:"To-Do List",id:"to-do-list",level:2},{value:"License",id:"license",level:2},{value:"Contributing",id:"contributing",level:2}];function d(e){const n={a:"a",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(n.p,{children:["A set of tools to simplify working with ",(0,o.jsx)(n.a,{href:"https://api-platform.com/",children:"API\nPlatform"})," in your projects. Comes with guides,\npatterns, and practical examples for building API Platform-based projects."]}),"\n",(0,o.jsx)(n.p,{children:"Apply existing knowledge, experience, and patterns of working with Symfony\ncontrollers to API Platform state providers and processors. Decouple your\npersistence layer from the API frontend layer. Apply Domain-Driven Design (DDD)\nprinciples to your API Platform-based projects, as well as other architectural\npatterns and best practices, including SOLID, onion architecture, clean\narchitecture, hexagonal architecture, and others."}),"\n",(0,o.jsx)(n.p,{children:"'Lite' means we are refraining from using all of API Platform's features and\nautomations in favor of better readability, simplicity, and flexibility."}),"\n",(0,o.jsx)(n.h2,{id:"motivation",children:"Motivation"}),"\n",(0,o.jsx)(n.p,{children:"API Platform documentation encourages developers to use plain old PHP objects\n(POPOs) or data transfer objects (DTOs) as the models for API communication,\ninstead of using domain entities directly for this purpose. But it does not\nestablish a practical working patterns for that approach."}),"\n",(0,o.jsxs)(n.p,{children:["Practically all the examples and demos we find on the Internet still\nattach ",(0,o.jsx)(n.code,{children:"ApiResource"})," to Doctrine entities."]}),"\n",(0,o.jsx)(n.p,{children:"Sometimes API Platform can feel very rigid. It can be difficult to figure out\nhow to accomplish things outside its conventions. There are ways around any\nproblem, just not always immediately obvious. It can feel like that we just want\nto express what we need by writing a PHP code, not by figuring out the correct\ncombination of attributes to use."}),"\n",(0,o.jsx)(n.p,{children:"Those coming from Symfony controllers might find API Platform's approach very\ndifferent, but it does not have to be."}),"\n",(0,o.jsx)(n.h2,{id:"installation",children:"Installation"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"composer require rekalogika/api-lite\n"})}),"\n",(0,o.jsx)(n.h2,{id:"synopsis",children:"Synopsis"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-php",children:"use Doctrine\\Common\\Collections\\Collection;\nuse Rekalogika\\ApiLite\\State\\AbstractProvider;\nuse Rekalogika\\Mapper\\CollectionInterface;\n\n#[ApiResource(\n    shortName: 'Book',\n    operations: [\n        new Get(\n            uriTemplate: '/books/{id}',\n            provider: BookProvider::class\n        ),\n    ]\n)]\nclass BookDto\n{\n    public ?Uuid $id = null;\n    public ?string $title = null;\n    public ?string $description = null;\n\n    /**\n     * @var ?CollectionInterface<int,ReviewDto>\n     */\n    public ?CollectionInterface $reviews = null;\n}\n\n/**\n * @extends AbstractProvider<BookDto>\n */\nclass BookProvider extends AbstractProvider\n{\n    public function __construct(\n        private BookRepository $bookRepository\n    ) {\n    }\n\n    public function provide(\n        Operation $operation,\n        array $uriVariables = [],\n        array $context = []\n    ): object|array|null {\n        $book = $this->bookRepository\n            ->find($uriVariables['id'] ?? null)\n            ?? throw new NotFoundException('Book not found');\n\n        $this->denyAccessUnlessGranted('view', $book);\n\n        return $this->map($book, BookDto::class);\n    }\n}\n"})}),"\n",(0,o.jsx)(n.h2,{id:"to-do-list",children:"To-Do List"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Figure out & implement filtering."}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"license",children:"License"}),"\n",(0,o.jsx)(n.p,{children:"MIT"}),"\n",(0,o.jsx)(n.h2,{id:"contributing",children:"Contributing"}),"\n",(0,o.jsxs)(n.p,{children:["Issues and pull requests should be filed in the GitHub repository\n",(0,o.jsx)(n.a,{href:"https://github.com/rekalogika/api-lite",children:"rekalogika/api-lite"}),"."]})]})}function p(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}}}]);