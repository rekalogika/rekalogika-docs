"use strict";(self.webpackChunkrekalogika_docs=self.webpackChunkrekalogika_docs||[]).push([[3919],{2210:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>p,frontMatter:()=>i,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"rekapager/adapters/doctrine-orm-nativequery","title":"Doctrine ORM NativeQuery","description":"NativeQueryAdapter allows you to use Doctrine\'s native SQL functionality. It","source":"@site/docs/rekapager/02-adapters/02-doctrine-orm-nativequery.md","sourceDirName":"rekapager/02-adapters","slug":"/rekapager/adapters/doctrine-orm-nativequery","permalink":"/rekapager/adapters/doctrine-orm-nativequery","draft":false,"unlisted":false,"editUrl":"https://github.com/rekalogika/rekalogika-docs/edit/main/docs/rekapager/02-adapters/02-doctrine-orm-nativequery.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"title":"Doctrine ORM NativeQuery"},"sidebar":"docs","previous":{"title":"Doctrine ORM QueryBuilder","permalink":"/rekapager/adapters/doctrine-orm-querybuilder"},"next":{"title":"Doctrine Collections Selectable","permalink":"/rekapager/adapters/doctrine-collection-selectable"}}');var a=t(4848),o=t(8453);const i={title:"Doctrine ORM NativeQuery"},s=void 0,l={},c=[{value:"Installation",id:"installation",level:2},{value:"Usage",id:"usage",level:2}];function u(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"NativeQueryAdapter"})," allows you to use Doctrine's native SQL functionality. It\nsupports only keyset pagination."]}),"\n",(0,a.jsx)(n.h2,{id:"installation",children:"Installation"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"composer require rekalogika/rekapager-doctrine-orm-adapter\n"})}),"\n",(0,a.jsx)(n.h2,{id:"usage",children:"Usage"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-php",children:"use Doctrine\\Common\\Collections\\Order;\nuse Doctrine\\ORM\\EntityManagerInterface;\nuse Doctrine\\ORM\\Query\\ResultSetMappingBuilder;\nuse Rekalogika\\Rekapager\\Doctrine\\ORM\\NativeQueryAdapter;\nuse Rekalogika\\Rekapager\\Doctrine\\ORM\\Parameter;\nuse Rekalogika\\Rekapager\\Keyset\\KeysetPageable;\n\n/** @var EntityManagerInterface $entityManager */\n\n$resultSetMapping = new ResultSetMappingBuilder($entityManager);\n$resultSetMapping->addRootEntityFromClassMetadata(Post::class, 'p');\n\n$sql = \"\n    SELECT {$resultSetMapping}, {{SELECT}}\n    FROM post p\n    WHERE p.group = :group {{WHERE}}\n    ORDER BY {{ORDER}}\n    LIMIT {{LIMIT}} OFFSET {{OFFSET}}\n\";\n\n$countSql = \"\n    SELECT COUNT(*) AS count\n    FROM (\n        SELECT *\n        FROM post p\n        WHERE p.group = :group {{WHERE}}\n        ORDER BY {{ORDER}}\n        LIMIT {{LIMIT}} OFFSET {{OFFSET}}\n    )\n\";\n\n$countAllSql = \"\n    SELECT COUNT(*) AS count\n    FROM post p\n    WHERE p.set_name = :setName\n\";\n\n$adapter = new NativeQueryAdapter(\n    entityManager: $this->entityManager,\n\n    // The ResultSetMapping or ResultSetMappingBuilder instance\n    resultSetMapping: $resultSetMapping,\n\n    // The SQL query, must contain placeholders for {{SELECT}}, {{WHERE}},\n    // {{ORDER}}, {{LIMIT}}, and {{OFFSET}}\n    sql: $sql,\n\n    // The SQL query for counting records, must contain placeholders for\n    // {{WHERE}}, {{ORDER}}, {{LIMIT}}, and {{OFFSET}}. The count field must\n    // be using the alias 'count'. Optional. If null, the adapter will use $sql\n    // encased in a subquery.\n    countSql: $countSql,\n\n    // The SQL query for counting all records. Optional. If null, the total will\n    // not be available.\n    countAllSql: $countAllSql,\n\n    // The ordering must be provided here, not directly in the SQL query.\n    orderBy: [\n        'p.date' => Order::Descending,\n        'p.title' => Order::Ascending,\n        'p.id' => Order::Ascending,\n    ],\n\n    // The parameters for the query.\n    parameters: [\n        new Parameter('group', 'some group'),\n    ],\n\n    // The property of the result that will be used as the index. Optional.\n    indexBy: 'id',\n);\n\n$pageable = new KeysetPageable($adapter);\n"})})]})}function p(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(u,{...e})}):u(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>s});var r=t(6540);const a={},o=r.createContext(a);function i(e){const n=r.useContext(o);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),r.createElement(o.Provider,{value:n},e.children)}}}]);