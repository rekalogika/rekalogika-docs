"use strict";(self.webpackChunkrekalogika_docs=self.webpackChunkrekalogika_docs||[]).push([[465],{5445:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>a,toc:()=>l});const a=JSON.parse('{"id":"rekapager/batch-processing/pageable","title":"Using Pageable for Batch Processing","description":"Any PageableInterface objects can be used to iterate its underlying data page","source":"@site/docs/rekapager/06-batch-processing/01-pageable.md","sourceDirName":"rekapager/06-batch-processing","slug":"/rekapager/batch-processing/pageable","permalink":"/rekapager/batch-processing/pageable","draft":false,"unlisted":false,"editUrl":"https://github.com/rekalogika/rekalogika-docs/edit/main/docs/rekapager/06-batch-processing/01-pageable.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"title":"Using Pageable for Batch Processing"},"sidebar":"docs","previous":{"title":"Batch Processing","permalink":"/rekapager/batch-processing/"},"next":{"title":"Simple Batch Command","permalink":"/rekapager/batch-processing/batch-command"}}');var s=t(4848),r=t(8453);const i={title:"Using Pageable for Batch Processing"},o=void 0,c={},l=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"Batch Processing",id:"batch-processing",level:2},{value:"Always Use Keyset Pagination",id:"always-use-keyset-pagination",level:2},{value:"Comparison to <code>Query::toIterable()</code>",id:"comparison-to-querytoiterable",level:2},{value:"Running the Batch Process",id:"running-the-batch-process",level:2}];function h(e){const n={a:"a",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.p,{children:["Any ",(0,s.jsx)(n.code,{children:"PageableInterface"})," objects can be used to iterate its underlying data page\nby page. Rather than loading the entire data set into memory, you can process\nthe data in multiple batches (or pages, or chunks, or slices)."]}),"\n",(0,s.jsx)(n.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,s.jsxs)(n.p,{children:["When using the library only for batch processing, you only need to ",(0,s.jsx)(n.a,{href:"../adapters",children:"install the\nadapters"})," you need. Framework integration is not required."]}),"\n",(0,s.jsx)(n.h2,{id:"batch-processing",children:"Batch Processing"}),"\n",(0,s.jsx)(n.p,{children:"To iterate over a large amount of data, you can use the following pattern:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-php",children:"use Doctrine\\ORM\\EntityManagerInterface;\nuse Rekalogika\\Rekapager\\PageableInterface;\n\n/** @var PageableInterface $pageable */\n/** @var EntityManagerInterface $entityManager */\n\nforeach ($pageable->withItemsPerPage(1000)->getPages() as $page) {\n    foreach ($page as $item) {\n        // Do something with the item\n    }\n\n    // Do something after each page here\n    // With Doctrine, you'd usually want to flush() and clear() here\n    $entityManager->flush(); // if required\n    $entityManager->clear();\n}\n"})}),"\n",(0,s.jsx)(n.h2,{id:"always-use-keyset-pagination",children:"Always Use Keyset Pagination"}),"\n",(0,s.jsx)(n.p,{children:"While it is possible to use traditional offset pagination, you should always use\nkeyset pagination for batch processing:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"With offset pagination you risk missing items, or processing the same items\nmultiple times, if the underlying data changes while you are processing it."}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Offset pagination will become slower and slower as you go further away from\nthe first page."}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.h2,{id:"comparison-to-querytoiterable",children:["Comparison to ",(0,s.jsx)(n.code,{children:"Query::toIterable()"})]}),"\n",(0,s.jsxs)(n.p,{children:["Doctrine's documentation ",(0,s.jsxs)(n.a,{href:"https://www.doctrine-project.org/projects/doctrine-orm/en/latest/reference/batch-processing.html#iterating-results",children:["recommends using\n",(0,s.jsx)(n.code,{children:"Query::toIterable()"})]}),"\nto iterate over large result sets. This, however, has several drawbacks:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["Contrary to what one might expect, ",(0,s.jsx)(n.code,{children:"toIterable()"})," actually runs the query only\nonce, then loads the entire result into memory, which can be problematic for\nlarge result sets. It only saves us memory and time in the hydration phase, in\nthe sense that it does not hydrate the result into entities all at once."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Even when you don't care about memory usage, queries with large results will be\nmuch slower to execute. The application must wait for the query to finish, and\ndepending on the application, it may affect interactivity and user experience."}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["With ",(0,s.jsx)(n.code,{children:"toIterable()"}),", during the ",(0,s.jsx)(n.code,{children:"postLoad"})," event, the state of the entity is\n",(0,s.jsx)(n.a,{href:"https://www.doctrine-project.org/projects/doctrine-orm/en/latest/reference/events.html#postload",children:"not guaranteed to be\nconsistent"}),"\nas when loading the entity normally. So, if you have ",(0,s.jsx)(n.code,{children:"postLoad"})," listener on\nyour entities, your entities might not behave the same way as when you load\nthem normally."]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["Using ",(0,s.jsx)(n.code,{children:"PageableInterface"})," for batch processing should solve these issues."]}),"\n",(0,s.jsx)(n.h2,{id:"running-the-batch-process",children:"Running the Batch Process"}),"\n",(0,s.jsxs)(n.p,{children:["The most common way to run a batch process is to create a console command. Read\nthe ",(0,s.jsx)(n.a,{href:"./batch-command",children:"Simple Batch Command"})," documentation for more information."]})]})}function d(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(h,{...e})}):h(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>o});var a=t(6540);const s={},r=a.createContext(s);function i(e){const n=a.useContext(r);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),a.createElement(r.Provider,{value:n},e.children)}}}]);