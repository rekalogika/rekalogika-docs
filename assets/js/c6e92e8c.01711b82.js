"use strict";(self.webpackChunkrekalogika_docs=self.webpackChunkrekalogika_docs||[]).push([[2186],{4747:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>u,frontMatter:()=>s,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"analytics/user-interface/formatter-services","title":"Formatter Services","description":"Formatter services are utility services that transforms values in the query","source":"@site/docs/analytics/11-user-interface/11-formatter-services.md","sourceDirName":"analytics/11-user-interface","slug":"/analytics/user-interface/formatter-services","permalink":"/analytics/user-interface/formatter-services","draft":false,"unlisted":false,"editUrl":"https://github.com/rekalogika/rekalogika-docs/edit/main/docs/analytics/11-user-interface/11-formatter-services.md","tags":[],"version":"current","sidebarPosition":11,"frontMatter":{"title":"Formatter Services"},"sidebar":"docs","previous":{"title":"Spreadsheet Renderer","permalink":"/analytics/user-interface/spreadsheet-renderer"},"next":{"title":"Internals","permalink":"/analytics/internals/"}}');var i=t(4848),o=t(8453);const s={title:"Formatter Services"},a=void 0,c={},l=[{value:"Example: <code>MoneyNumberifier</code>",id:"example-moneynumberifier",level:2},{value:"Example: <code>CountryWithFlagHtmlifier</code>",id:"example-countrywithflaghtmlifier",level:2}];function d(e){const n={code:"code",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.p,{children:"Formatter services are utility services that transforms values in the query\nresult to the format expected by other parts of the framework. There are four\ntypes of formatter services available:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"Stringifier"}),": Converts a value to a string."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"Numberifier"}),": Converts a value to an integer or float. Used by ",(0,i.jsx)(n.code,{children:"ChartBuilder"}),"\nto convert measures to numbers."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"Htmlifier"}),": Converts a value to an HTML string. Used by anything that renders\nthe result to HTML."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"Cellifier"}),": Converts a value to a ",(0,i.jsx)(n.code,{children:"CellProperties"})," object, which is an object\nthat describes a cell in a spreadsheet. Used by ",(0,i.jsx)(n.code,{children:"SpreadsheetRenderer"}),"."]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"The default formatter services try to do the conversion in a best-effort basis,\nbut if they can't, you need to implement the formatter service for the types\nyou need."}),"\n",(0,i.jsxs)(n.h2,{id:"example-moneynumberifier",children:["Example: ",(0,i.jsx)(n.code,{children:"MoneyNumberifier"})]}),"\n",(0,i.jsxs)(n.p,{children:["This is the numberifier for the ",(0,i.jsx)(n.code,{children:"Money"})," object of the ",(0,i.jsx)(n.code,{children:"brick/money"})," package. The\n",(0,i.jsx)(n.code,{children:"Money::__toString()"})," does not return a number, but a string with the currency\ncode, so the framework cannot automatically convert it to a number. This is how\nyou can implement the ",(0,i.jsx)(n.code,{children:"Numberifier"})," for the ",(0,i.jsx)(n.code,{children:"Money"})," object:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-php",children:"use Brick\\Money\\Money;\nuse Rekalogika\\Analytics\\Frontend\\Formatter\\Numberifier;\nuse Rekalogika\\Analytics\\Frontend\\Formatter\\ValueNotSupportedException;\n\nfinal class MoneyNumberifier implements Numberifier\n{\n    #[\\Override]\n    public function toNumber(mixed $input): float\n    {\n        if (!$input instanceof Money) {\n            throw new ValueNotSupportedException();\n        }\n\n        return $input->getAmount()->toFloat();\n    }\n}\n"})}),"\n",(0,i.jsxs)(n.h2,{id:"example-countrywithflaghtmlifier",children:["Example: ",(0,i.jsx)(n.code,{children:"CountryWithFlagHtmlifier"})]}),"\n",(0,i.jsxs)(n.p,{children:["Suppose you have a ",(0,i.jsx)(n.code,{children:"Country"})," object, and it would be nice to render it with a\nflag emoji. You can implement the ",(0,i.jsx)(n.code,{children:"Htmlifier"})," for the ",(0,i.jsx)(n.code,{children:"Country"})," object like this:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-php",children:"use Rekalogika\\Analytics\\Frontend\\Formatter\\Htmlifier;\nuse Rekalogika\\Analytics\\Frontend\\Formatter\\ValueNotSupportedException;\nuse Rekalogika\\Analytics\\Tests\\App\\Entity\\Country;\n\nfinal class CountryHtmlifier implements Htmlifier\n{\n    #[\\Override]\n    public function toHtml(mixed $input): string\n    {\n        if (!$input instanceof Country) {\n            throw new ValueNotSupportedException();\n        }\n\n        $emoji = $this->countryCodeToEmojiFlag($input->getCode());\n\n        return \\sprintf(\n            '%s %s',\n            $emoji,\n            $input->getName() ?? '',\n        );\n    }\n\n    /**\n     * @see https://nick.blog/2018/07/27/php-display-country-flag-emoji-from-iso-3166-1-alpha-2-country-codes/\n     */\n    private function countryCodeToEmojiFlag(string $countryCode): string\n    {\n        $countryCode = strtoupper($countryCode); // Ensure uppercase\n        $flag = '';\n\n        foreach (str_split($countryCode) as $char) {\n            /** @psalm-suppress PossiblyFalseOperand */\n            $flag .= mb_convert_encoding('&#' . (127397 + \\ord($char)) . ';', 'UTF-8', 'HTML-ENTITIES');\n        }\n\n        return $flag;\n    }\n}\n"})})]})}function u(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>a});var r=t(6540);const i={},o=r.createContext(i);function s(e){const n=r.useContext(o);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),r.createElement(o.Provider,{value:n},e.children)}}}]);