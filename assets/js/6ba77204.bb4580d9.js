"use strict";(self.webpackChunkrekalogika_docs=self.webpackChunkrekalogika_docs||[]).push([[2592],{168:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>d,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"analytics/query/querying","title":"Querying","description":"To work with the summary entities, the framework provides SummaryManager","source":"@site/docs/analytics/04-query/01-querying.md","sourceDirName":"analytics/04-query","slug":"/analytics/query/querying","permalink":"/analytics/query/querying","draft":false,"unlisted":false,"editUrl":"https://github.com/rekalogika/rekalogika-docs/edit/main/docs/analytics/04-query/01-querying.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"title":"Querying"},"sidebar":"docs","previous":{"title":"Queries","permalink":"/analytics/query/"},"next":{"title":"Table Result","permalink":"/analytics/query/table-result"}}');var s=n(4848),a=n(8453);const i={title:"Querying"},o=void 0,d={},c=[{value:"<code>SummaryManager</code>",id:"summarymanager",level:2},{value:"Querying the Summary",id:"querying-the-summary",level:2},{value:"Query Methods",id:"query-methods",level:2},{value:"<code>groupBy</code> and <code>addGroupBy</code>",id:"groupby-and-addgroupby",level:3},{value:"<code>select</code> and <code>addSelect</code>",id:"select-and-addselect",level:3},{value:"<code>where</code> and <code>andWhere</code>",id:"where-and-andwhere",level:3},{value:"The <code>Result</code> Object",id:"the-result-object",level:2}];function l(e){const r={code:"code",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(r.p,{children:["To work with the summary entities, the framework provides ",(0,s.jsx)(r.code,{children:"SummaryManager"}),"\nand ",(0,s.jsx)(r.code,{children:"SummaryManagerRegistry"}),"."]}),"\n",(0,s.jsx)(r.h2,{id:"summarymanager",children:(0,s.jsx)(r.code,{children:"SummaryManager"})}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.code,{children:"SummaryManager"})," is a service that lets you interact with a specific summary\nentity. To get an instance of ",(0,s.jsx)(r.code,{children:"SummaryManager"}),", you can use the\n",(0,s.jsx)(r.code,{children:"SummaryManagerRegistry"})," service."]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-php",children:"use Rekalogika\\Analytics\\Contracts\\SummaryManagerRegistry;\n\n/** @var SummaryManagerRegistry $summaryManagerRegistry */\n\n$summaryManager = $summaryManagerRegistry->getManager(YourSummary::class);\n"})}),"\n",(0,s.jsx)(r.h2,{id:"querying-the-summary",children:"Querying the Summary"}),"\n",(0,s.jsxs)(r.p,{children:["You can query the summary entity using the ",(0,s.jsx)(r.code,{children:"createQuery"})," method. The method\nreturns an instance of ",(0,s.jsx)(r.code,{children:"Query"})," that you can use to build your query."]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-php",children:"use Doctrine\\Common\\Collections\\Criteria;\nuse Rekalogika\\Analytics\\Contracts\\SummaryManagerRegistry;\n\n/** @var SummaryManagerRegistry $summaryManagerRegistry */\n\n$result = $summaryManagerRegistry\n    ->getManager(OrderSummary::class)\n    ->createQuery()\n    ->groupBy('time.year', 'customerCountry') // property names of the dimension\n    ->select('price', 'count') // property names of the measures\n    ->where(Criteria::expr()->eq('time.year', 2023))\n    ->getResult();\n"})}),"\n",(0,s.jsxs)(r.p,{children:["The result is an instance of ",(0,s.jsx)(r.code,{children:"Result"}),". It presents the query result in three\nshapes, for user convenience:"]}),"\n",(0,s.jsxs)(r.ol,{children:["\n",(0,s.jsxs)(r.li,{children:["\n",(0,s.jsx)(r.p,{children:"Table format, similar to a SQL result set. A record contains one or more\nmeasures."}),"\n"]}),"\n",(0,s.jsxs)(r.li,{children:["\n",(0,s.jsx)(r.p,{children:"Normal table format, similar to the table format, but only contains one\nmeasure per record."}),"\n"]}),"\n",(0,s.jsxs)(r.li,{children:["\n",(0,s.jsx)(r.p,{children:"Tree format."}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(r.h2,{id:"query-methods",children:"Query Methods"}),"\n",(0,s.jsxs)(r.p,{children:["The methods of the ",(0,s.jsx)(r.code,{children:"Query"})," object are modeled after the Doctrine ",(0,s.jsx)(r.code,{children:"QueryBuilder"}),"\nmethods. The methods are chainable, so you can write the query in a fluent\nstyle."]}),"\n",(0,s.jsxs)(r.h3,{id:"groupby-and-addgroupby",children:[(0,s.jsx)(r.code,{children:"groupBy"})," and ",(0,s.jsx)(r.code,{children:"addGroupBy"})]}),"\n",(0,s.jsxs)(r.p,{children:["The ",(0,s.jsx)(r.code,{children:"groupBy"})," method is used to specify the dimensions of the query. The\ndimension name is the same as the property name of your summary class. The order\nin ",(0,s.jsx)(r.code,{children:"groupBy"})," is important, and will be used to determine the order of the\ndimensions in the result."]}),"\n",(0,s.jsxs)(r.h3,{id:"select-and-addselect",children:[(0,s.jsx)(r.code,{children:"select"})," and ",(0,s.jsx)(r.code,{children:"addSelect"})]}),"\n",(0,s.jsxs)(r.p,{children:["The ",(0,s.jsx)(r.code,{children:"select"})," method is used to specify the measures of the query. Again, the\nmeasure name is the name of the property in the summary class."]}),"\n",(0,s.jsxs)(r.h3,{id:"where-and-andwhere",children:[(0,s.jsx)(r.code,{children:"where"})," and ",(0,s.jsx)(r.code,{children:"andWhere"})]}),"\n",(0,s.jsxs)(r.p,{children:["The ",(0,s.jsx)(r.code,{children:"where"})," method is used to filter the data. The method accepts a Doctrine\nCriteria ",(0,s.jsx)(r.code,{children:"Expression"})," object."]}),"\n",(0,s.jsxs)(r.h2,{id:"the-result-object",children:["The ",(0,s.jsx)(r.code,{children:"Result"})," Object"]}),"\n",(0,s.jsxs)(r.p,{children:["The ",(0,s.jsx)(r.code,{children:"Result"})," object provides the user with methods to get the data in the\nuser's preferred format."]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-php",children:"use Rekalogika\\Analytics\\Contracts\\Result\\Result;\n\n/** @var Result $result */\n// Get the result in table format\n$table = $result->getTable();\n\n// Get the result in normal table format\n$normalTable = $result->getNormalTable();\n\n// Get the result in tree format\n$tree = $result->getTree();\n"})})]})}function u(e={}){const{wrapper:r}={...(0,a.R)(),...e.components};return r?(0,s.jsx)(r,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},8453:(e,r,n)=>{n.d(r,{R:()=>i,x:()=>o});var t=n(6540);const s={},a=t.createContext(s);function i(e){const r=t.useContext(a);return t.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function o(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),t.createElement(a.Provider,{value:r},e.children)}}}]);