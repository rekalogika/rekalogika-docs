"use strict";(self.webpackChunkrekalogika_docs=self.webpackChunkrekalogika_docs||[]).push([[5566],{1236:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>p,frontMatter:()=>s,metadata:()=>o,toc:()=>c});var i=t(4848),r=t(8453);const s={title:"Introduction"},a=void 0,o={id:"mapper/intro",title:"Introduction",description:"rekalogika/mapper is an object mapper for PHP and Symfony, also commonly known",source:"@site/docs/mapper/00-intro.md",sourceDirName:"mapper",slug:"/mapper/intro",permalink:"/mapper/intro",draft:!1,unlisted:!1,editUrl:"https://github.com/rekalogika/rekalogika-docs/edit/main/docs/mapper/00-intro.md",tags:[],version:"current",sidebarPosition:0,frontMatter:{title:"Introduction"},sidebar:"docs",previous:{title:"rekalogika/mapper",permalink:"/mapper/"},next:{title:"Installation & Basic Usage",permalink:"/mapper/installation-usage"}},l={},c=[{value:"Synopsis",id:"synopsis",level:2},{value:"Why Use a Mapper?",id:"why-use-a-mapper",level:2},{value:"Features",id:"features",level:2},{value:"General",id:"general",level:3},{value:"Custom Mapping",id:"custom-mapping",level:3},{value:"Object Lazy-Loading",id:"object-lazy-loading",level:3},{value:"Arrays and Array-Like Objects",id:"arrays-and-array-like-objects",level:3},{value:"Array-Like Lazy-Loading",id:"array-like-lazy-loading",level:3},{value:"Development Experience (DX)",id:"development-experience-dx",level:3},{value:"To-Do List",id:"to-do-list",level:2},{value:"License",id:"license",level:2},{value:"Contributing",id:"contributing",level:2}];function d(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"rekalogika/mapper"})," is an object mapper for PHP and Symfony, also commonly known\nas an automapper. It maps an object to another object. Primarily used to map an\nentity to a DTO, but also useful for other mapping purposes. It removes the\ncomplexity of mapping an object to another object, and even an object graph to\nanother object graph."]}),"\n",(0,i.jsx)(n.h2,{id:"synopsis",children:"Synopsis"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-php",children:"use App\\Entity\\Book;\nuse Rekalogika\\Mapper\\MapperInterface;\n\n/** @var MapperInterface $mapper */\n/** @var Book $book */\n\n$result = $mapper->map($book, BookDto::class);\n\n// or map to an existing object\n\n$bookDto = new BookDto();\n$mapper->map($book, $bookDto);\n"})}),"\n",(0,i.jsx)(n.h2,{id:"why-use-a-mapper",children:"Why Use a Mapper?"}),"\n",(0,i.jsx)(n.p,{children:"Why do we need to use a mapper to save a few keystrokes, and not just use\nsomething simple like this?"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-php",children:"class BookDto\n{\n    public static function create(Book $book): self\n    {\n        $dto = new self();\n        // ...\n\n        return $dto;\n    }\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"Everyone must have that idea at some point. However, as the project grows, the\ntarget classes (DTOs) may start to reference each other, and become a rich\nobject graph. Your code will start to have many special cases, and is no longer\nas simple as you thought it would be. It becomes harder to maintain, and then\neventually forces you to sit back and try to resolve the problem. When (if?) you\nsuccessfully engineer a solution, you will end up with something that resembles\na mapping framework anyway."}),"\n",(0,i.jsx)(n.p,{children:"Mapping can be simple, but can also become a highly complex task. A mapper is\ncreated out of necessity to handle the complexity, not just as a means of saving\na few keystrokes."}),"\n",(0,i.jsx)(n.h2,{id:"features",children:"Features"}),"\n",(0,i.jsx)(n.h3,{id:"general",children:"General"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Automatically lists the properties of the source and target, detects their\ntypes, and maps them accordingly."}),"\n",(0,i.jsx)(n.li,{children:"Reads the type from PHP type declaration and PHPDoc annotations, including\nthe type of the nested objects."}),"\n",(0,i.jsx)(n.li,{children:"Does not attempt to circumvent your class constraints. Reads only from and\nwrites only to public properties, getters, setters. Does not instantiate\nobjects without their constructor."}),"\n",(0,i.jsx)(n.li,{children:"Constructor initialization."}),"\n",(0,i.jsx)(n.li,{children:"Supports immutable setters, also known as wither methods."}),"\n",(0,i.jsx)(n.li,{children:"Handles nested objects."}),"\n",(0,i.jsx)(n.li,{children:"Handles recursion and circular references."}),"\n",(0,i.jsx)(n.li,{children:"Inheritance support. Maps to abstract classes and interfaces using an\ninheritance map attribute."}),"\n",(0,i.jsxs)(n.li,{children:["Maps to and from ",(0,i.jsx)(n.code,{children:"stdClass"}),", objects extending ",(0,i.jsx)(n.code,{children:"stdClass"}),", and other objects\nwith dynamic properties (",(0,i.jsx)(n.code,{children:"#[AllowDynamicProperties]"}),")."]}),"\n",(0,i.jsx)(n.li,{children:"Specify the source or target using property path."}),"\n",(0,i.jsx)(n.li,{children:"Maps an object to an array, and vice versa."}),"\n",(0,i.jsx)(n.li,{children:"Support for variadic setters and constructors."}),"\n",(0,i.jsx)(n.li,{children:"Support for third-party objects: Doctrine Collections, Symfony Uid, Ramsey\nUUID."}),"\n",(0,i.jsx)(n.li,{children:"DateTime timezone and format conversion."}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"custom-mapping",children:"Custom Mapping"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Override the mapping of a specific property using a custom property mapper."}),"\n",(0,i.jsx)(n.li,{children:"Override the mapping between two specific classes using a custom object\nmapper."}),"\n",(0,i.jsx)(n.li,{children:"Extend the mapper by creating new transformers, or decorating the existing\nones."}),"\n",(0,i.jsx)(n.li,{children:"Match classes using attributes in your transformers, in addition to using\nclass names."}),"\n",(0,i.jsx)(n.li,{children:"Preset mapping. Provide a table of predetermined mappings that the mapper can\nuse."}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"object-lazy-loading",children:"Object Lazy-Loading"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"If possible, target objects are lazy-loaded. The mapping does not take place\nuntil the target is accessed, and will never take place if it is never\naccessed."}),"\n",(0,i.jsx)(n.li,{children:"Attempts to detect identifier properties on the source side. Those properties\nwill be mapped eagerly to the target side, as they should not trigger the\nhydration of the source. As an example, API Platform will be able to generate\nIRIs without causing Doctrine to hydrate the entire object graph."}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"arrays-and-array-like-objects",children:"Arrays and Array-Like Objects"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Handles the mapping between ",(0,i.jsx)(n.code,{children:"array"})," or array-like objects."]}),"\n",(0,i.jsx)(n.li,{children:"Handles adder and remover methods on the target side."}),"\n",(0,i.jsx)(n.li,{children:"Supports immutable adders and removers, where the methods return a new\ninstance of the host object."}),"\n",(0,i.jsxs)(n.li,{children:["Handles non-string & non-integer keys in array-like objects, including\n",(0,i.jsx)(n.code,{children:"SplObjectStorage"}),"."]}),"\n",(0,i.jsx)(n.li,{children:"Option to remove existing items from the target if they are not present in the\nsource."}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"array-like-lazy-loading",children:"Array-Like Lazy-Loading"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Lazy loading if the target is type-hinted with ",(0,i.jsx)(n.code,{children:"ArrayAccess"}),", ",(0,i.jsx)(n.code,{children:"Traversable"})," or\n",(0,i.jsx)(n.code,{children:"CollectionInterface"}),". The target will not iterate the source object until it\nis accessed, or never if it is never accessed."]}),"\n",(0,i.jsx)(n.li,{children:"Stream mapping. Maps the source members to the target side as they are being\niterated. This may consume less memory."}),"\n",(0,i.jsxs)(n.li,{children:["With lazy loading, if the source is a ",(0,i.jsx)(n.code,{children:"Countable"}),", then the target will also\nbe a ",(0,i.jsx)(n.code,{children:"Countable"}),". With an extra-lazy Doctrine Collection, the consumer will be\nable to count the target without causing a full hydration of the source."]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"development-experience-dx",children:"Development Experience (DX)"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Helpful exception messages."}),"\n",(0,i.jsx)(n.li,{children:"Console commands for debugging."}),"\n",(0,i.jsx)(n.li,{children:"Data collector and profiler integration."}),"\n",(0,i.jsx)(n.li,{children:"Coded from the start using PHP 8, strict types, and maxed-out PHPStan and\nPsalm level."}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"to-do-list",children:"To-Do List"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Option to read & write to private properties."}),"\n",(0,i.jsxs)(n.li,{children:["Migrate engine to ",(0,i.jsx)(n.code,{children:"symfony/type-info"}),"."]}),"\n",(0,i.jsx)(n.li,{children:"Auto-detect static factory method."}),"\n",(0,i.jsx)(n.li,{children:"Use our own interface for proxy objects."}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"MapFrom"})," and ",(0,i.jsx)(n.code,{children:"MapTo"})," attributes."]}),"\n",(0,i.jsx)(n.li,{children:"Improve non-framework usage."}),"\n",(0,i.jsx)(n.li,{children:"Warm up proxies on build time from the list of classes provided by the user."}),"\n",(0,i.jsxs)(n.li,{children:["Lazy-loading using Doctrine ",(0,i.jsx)(n.code,{children:"Collection"})," type hint on the target side."]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"license",children:"License"}),"\n",(0,i.jsx)(n.p,{children:"MIT"}),"\n",(0,i.jsx)(n.h2,{id:"contributing",children:"Contributing"}),"\n",(0,i.jsxs)(n.p,{children:["Issues and pull requests should be filed in the GitHub repository\n",(0,i.jsx)(n.a,{href:"https://github.com/rekalogika/mapper",children:"rekalogika/mapper"}),"."]})]})}function p(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>o});var i=t(6540);const r={},s=i.createContext(r);function a(e){const n=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),i.createElement(s.Provider,{value:n},e.children)}}}]);