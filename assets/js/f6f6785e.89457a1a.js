"use strict";(self.webpackChunkrekalogika_docs=self.webpackChunkrekalogika_docs||[]).push([[7496],{7927:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>s,contentTitle:()=>a,default:()=>p,frontMatter:()=>o,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"file-bundle/zip-streaming","title":"Streaming a ZIP File of Files","description":"This chapter explains how to stream-download a ZIP file containing several","source":"@site/docs/file-bundle/14-zip-streaming.md","sourceDirName":"file-bundle","slug":"/file-bundle/zip-streaming","permalink":"/file-bundle/zip-streaming","draft":false,"unlisted":false,"editUrl":"https://github.com/rekalogika/rekalogika-docs/edit/main/docs/file-bundle/14-zip-streaming.md","tags":[],"version":"current","sidebarPosition":14,"frontMatter":{"title":"Streaming a ZIP File of Files"},"sidebar":"docs","previous":{"title":"Implementing a Collection of Files","permalink":"/file-bundle/collection"},"next":{"title":"Command Line Utilities","permalink":"/file-bundle/cli"}}');var r=i(4848),l=i(8453);const o={title:"Streaming a ZIP File of Files"},a=void 0,s={},c=[{value:"Concepts",id:"concepts",level:2},{value:"Basic Usage",id:"basic-usage",level:2},{value:"In Controllers",id:"in-controllers",level:2},{value:"Dealing With Doctrine Collections Containing Files",id:"dealing-with-doctrine-collections-containing-files",level:2},{value:"Returning a <code>DirectoryInterface</code> in the Getter Itself",id:"returning-a-directoryinterface-in-the-getter-itself",level:2},{value:"Creating a Link to the ZIP File",id:"creating-a-link-to-the-zip-file",level:2},{value:"In Twig Templates",id:"in-twig-templates",level:2}];function d(e){const n={a:"a",admonition:"admonition",code:"code",h2:"h2",p:"p",pre:"pre",...(0,l.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.p,{children:"This chapter explains how to stream-download a ZIP file containing several\nfiles to the client's web browser."}),"\n",(0,r.jsxs)(n.admonition,{title:"Preparation",type:"info",children:[(0,r.jsxs)(n.p,{children:["You need to install the package ",(0,r.jsx)(n.code,{children:"rekalogika/file-zip"})," to use this feature:"]}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"composer require rekalogika/file-zip\n"})})]}),"\n",(0,r.jsx)(n.h2,{id:"concepts",children:"Concepts"}),"\n",(0,r.jsxs)(n.p,{children:["A ",(0,r.jsx)(n.code,{children:"DirectoryInterface"})," represents a tree of files. It contains entries of\n",(0,r.jsx)(n.code,{children:"FileInterface"}),", ",(0,r.jsx)(n.code,{children:"FilePointerInterface"}),", or other ",(0,r.jsx)(n.code,{children:"DirectoryInterface"}),". The\n",(0,r.jsx)(n.code,{children:"FileZip"})," service turns a ",(0,r.jsx)(n.code,{children:"DirectoryInterface"})," into a ZIP file."]}),"\n",(0,r.jsx)(n.p,{children:"The ZIP file is created on the fly and streamed to the client's web browser,\nand does not involve a temporary file. Therefore, the operation is relatively\ninexpensive."}),"\n",(0,r.jsx)(n.admonition,{type:"note",children:(0,r.jsxs)(n.p,{children:["We are using the ",(0,r.jsx)(n.a,{href:"https://github.com/maennchen/ZipStream-PHP",children:"ZipStream-PHP"}),"\npackage under the hood."]})}),"\n",(0,r.jsx)(n.h2,{id:"basic-usage",children:"Basic Usage"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"FileZip::streamZip()"})," method takes a ",(0,r.jsx)(n.code,{children:"DirectoryInterface"})," and streams\na ZIP file to the client's web browser."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-php",children:"use Rekalogika\\File\\Zip\\FileZip;\nuse Rekalogika\\Contracts\\File\\DirectoryInterface;\nuse Rekalogika\\File\\Directory;\nuse Rekalogika\\Contracts\\File\\FileInterface;\n\n/** @var FileZip $fileZip */\n/** @var FileInterface $file1 */\n/** @var FileInterface $file2 */\n/** @var FileInterface $file3 */\n\n$directory = new Directory('my_zip_file', [$file1, $file2, $file3]);\n$fileZip->streamZip($directory);\n"})}),"\n",(0,r.jsx)(n.h2,{id:"in-controllers",children:"In Controllers"}),"\n",(0,r.jsxs)(n.p,{children:["To get an HTTP Foundation ",(0,r.jsx)(n.code,{children:"Response"})," object, use\n",(0,r.jsx)(n.code,{children:"FileZip::createZipResponse()"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-php",children:"use Rekalogika\\File\\Zip\\FileZip;\nuse Rekalogika\\File\\Directory;\nuse Rekalogika\\Contracts\\File\\FileInterface;\n\nclass SomeController {\n    public function download(FileZip $fileZip): Response\n    {\n        /** @var FileInterface $file1 */\n        /** @var FileInterface $file2 */\n        /** @var FileInterface $file3 */\n        \n        $directory = new Directory('my_zip_file', [$file1, $file2, $file3]);\n\n        return $fileZip->createZipResponse($directory);\n    }\n}\n"})}),"\n",(0,r.jsx)(n.h2,{id:"dealing-with-doctrine-collections-containing-files",children:"Dealing With Doctrine Collections Containing Files"}),"\n",(0,r.jsxs)(n.p,{children:["To convert a Doctrine collection of files into a ",(0,r.jsx)(n.code,{children:"DirectoryInterface"}),", you can\nuse ",(0,r.jsx)(n.code,{children:"FileCollection"}),"."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-php",children:"use Doctrine\\Common\\Collections\\Collection;\nuse Rekalogika\\Domain\\File\\Association\\Entity\\FileCollection;\nuse Rekalogika\\Contracts\\File\\DirectoryInterface;\nuse Rekalogika\\Contracts\\File\\FileInterface;\nuse Rekalogika\\File\\Directory;\nuse Rekalogika\\File\\Zip\\FileZip;\n\nclass SomeController {\n    public function download(Product $product, FileZip $fileZip): Response\n    {\n        /** @var Collection<int,Images> */\n        $images = $product->getImages();\n\n        /** @var FileCollection */\n        $directoryOfImages = new FileCollection($images, 'product-image');\n\n        return $fileZip->createZipResponse($directoryOfImages);\n    }\n}\n"})}),"\n",(0,r.jsxs)(n.h2,{id:"returning-a-directoryinterface-in-the-getter-itself",children:["Returning a ",(0,r.jsx)(n.code,{children:"DirectoryInterface"})," in the Getter Itself"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"FileCollection"})," implements both ",(0,r.jsx)(n.code,{children:"DirectoryInterface"})," and ",(0,r.jsx)(n.code,{children:"Collection"}),". So, it\nis safe to return a ",(0,r.jsx)(n.code,{children:"FileCollection"})," in the getter because it won't change the\nexisting behavior of your getter."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-php",children:"use Rekalogika\\Domain\\File\\Association\\Entity\\FileCollection;\n\nclass Product\n{\n    // ...\n\n    /**\n     * @return FileCollection<int,Image>\n     */\n    public function getImages(): FileCollection\n    {\n        return new FileCollection(\n            $this->images,\n            sprintf('product %s images', $this->getName())\n        );\n    }\n\n    // ...\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"Then, you can do something like this in the controller:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-php",children:"use Rekalogika\\File\\Zip\\FileZip;\n\nclass SomeController {\n    public function download(Product $product, FileZip $fileZip): Response\n    {\n        return $fileZip->createZipResponse($product->getImages());\n    }\n}\n"})}),"\n",(0,r.jsx)(n.h2,{id:"creating-a-link-to-the-zip-file",children:"Creating a Link to the ZIP File"}),"\n",(0,r.jsxs)(n.p,{children:["The framework registers a temporary URL handler. So, you can simply use\n",(0,r.jsx)(n.code,{children:"TemporaryUrlGeneratorInterface::generateUrl()"})," to generate a temporary URL\nto the ZIP file."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-php",children:"use Rekalogika\\TemporaryUrl\\TemporaryUrlGeneratorInterface;\n\n/** @var TemporaryUrlGeneratorInterface $temporaryUrlGenerator */\n\n/** @var FileCollection */\n$images = $product->getImages();\n\n$url = $temporaryUrlGenerator->generateUrl($images);\n"})}),"\n",(0,r.jsx)(n.h2,{id:"in-twig-templates",children:"In Twig Templates"}),"\n",(0,r.jsxs)(n.p,{children:["In Twig templates, you can easily generate URLs to a ZIP file by using the\n",(0,r.jsx)(n.code,{children:"temporary_url"})," filter with a ",(0,r.jsx)(n.code,{children:"DirectoryInterface"})," as the input."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-twig",children:'<a href="{{ product.images|temporary_url }}" {{ temporary_url_autoexpire() }}>\n    Download Product Images\n</a>\n'})})]})}function p(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>o,x:()=>a});var t=i(6540);const r={},l=t.createContext(r);function o(e){const n=t.useContext(l);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),t.createElement(l.Provider,{value:n},e.children)}}}]);