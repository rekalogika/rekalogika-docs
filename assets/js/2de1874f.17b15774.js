"use strict";(self.webpackChunkrekalogika_docs=self.webpackChunkrekalogika_docs||[]).push([[4542],{4879:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>d,frontMatter:()=>r,metadata:()=>a,toc:()=>c});const a=JSON.parse('{"id":"analytics/summary-entity/measures","title":"Measures","description":"Measures are quantitative values that are aggregated in a summary table. In SQL,","source":"@site/docs/analytics/02-summary-entity/04-measures.md","sourceDirName":"analytics/02-summary-entity","slug":"/analytics/summary-entity/measures","permalink":"/analytics/summary-entity/measures","draft":false,"unlisted":false,"editUrl":"https://github.com/rekalogika/rekalogika-docs/edit/main/docs/analytics/02-summary-entity/04-measures.md","tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"title":"Measures"},"sidebar":"docs","previous":{"title":"Dimensions","permalink":"/analytics/summary-entity/dimensions"},"next":{"title":"Housekeeping","permalink":"/analytics/housekeeping"}}');var t=s(4848),i=s(8453);const r={title:"Measures"},o=void 0,l={},c=[{value:"Measure Definition",id:"measure-definition",level:2},{value:"Pseudo-Measures",id:"pseudo-measures",level:2}];function u(e){const n={a:"a",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.p,{children:["Measures are quantitative values that are aggregated in a summary table. In SQL,\nthese are fields that you would use in a ",(0,t.jsx)(n.code,{children:"SUM"}),", ",(0,t.jsx)(n.code,{children:"COUNT"}),", and other aggregate\nfunctions."]}),"\n",(0,t.jsxs)(n.p,{children:["Measures are defined using the ",(0,t.jsx)(n.code,{children:"#[Analytics\\Measure]"})," attribute."]}),"\n",(0,t.jsx)(n.h2,{id:"measure-definition",children:"Measure Definition"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-php",children:"use Doctrine\\DBAL\\Types\\Types;\nuse Doctrine\\ORM\\Mapping as ORM;\nuse Brick\\Money\\Money;\nuse Rekalogika\\Analytics\\Core\\Metadata as Analytics;\nuse Symfony\\Component\\Translation\\TranslatableMessage;\n\nclass YourSummary extends Summary\n{\n    #[ORM\\Column(type: Types::INTEGER)]\n    // highlight-start\n    #[Analytics\\Measure(\n        function: new Sum('price'),\n        label: new TranslatableMessage('Total Price'),\n    )]\n    // highlight-end\n    private ?int $price = null;\n\n    // The getter allows you to optionally transform the property above if needed\n    public function getPrice(): ?Money\n    {\n        return $this->price !== null ? Money::ofMinor($this->price, 'USD') : null;\n    }\n}\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Arguments of the ",(0,t.jsx)(n.code,{children:"#[Analytics\\Measure]"})," attribute:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"function"}),": An instance of an ",(0,t.jsx)(n.a,{href:"../aggregate-function",children:(0,t.jsx)(n.code,{children:"AggregateFunction"})})," that\ndefines how to aggregate the measure."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"label"}),": A label for the measure. An output renderer will be able to use it\nas a column header or a chart legend. It can be a string or a\n",(0,t.jsx)(n.code,{children:"TranslatableInterface"})," instance, which allows it to be translated into\ndifferent languages."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"unit"}),": A string or a ",(0,t.jsx)(n.code,{children:"TranslatableInterface"})," instance that describes the unit\nof the measure. A user interface may use it to determine if two measures can\nbe plotted together in the same chart axis."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"hidden"}),": If set to ",(0,t.jsx)(n.code,{children:"true"}),", user interface may choose to hide this measure\nfrom the user."]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"pseudo-measures",children:"Pseudo-Measures"}),"\n",(0,t.jsxs)(n.p,{children:["It is also possible to define pseudo-measures. Currently, the only supported\npseudo-measure is ",(0,t.jsx)(n.code,{children:"CoordinatesMeasure"}),", which uses the ",(0,t.jsx)(n.code,{children:"Coordinates"})," of the cell\nas the measure value. This can be used to add clickable actions to each cell in\na pivot table."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-php",children:"use Doctrine\\DBAL\\Types\\Types;\nuse Doctrine\\ORM\\Mapping as ORM;\nuse Brick\\Money\\Money;\nuse Rekalogika\\Analytics\\Core\\Metadata as Analytics;\nuse Rekalogika\\Analytics\\Core\\PseudoMeasure\\CoordinatesMeasure;\nuse Symfony\\Component\\Translation\\TranslatableMessage;\n\nclass YourSummary extends Summary\n{\n    #[Analytics\\Measure(\n        function: new CoordinatesMeasure(),\n        label: new TranslatableMessage('Actions'),\n    )]\n    public ?Coordinates $actions = null;\n}\n"})})]})}function d(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(u,{...e})}):u(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>r,x:()=>o});var a=s(6540);const t={},i=a.createContext(t);function r(e){const n=a.useContext(i);return a.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:r(e.components),a.createElement(i.Provider,{value:n},e.children)}}}]);