"use strict";(self.webpackChunkrekalogika_docs=self.webpackChunkrekalogika_docs||[]).push([[1980],{5830:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>a,default:()=>h,frontMatter:()=>l,metadata:()=>r,toc:()=>c});var i=t(5893),o=t(1151);const l={title:"Selectable Abstraction Leak"},a=void 0,r={id:"collections/behaviors/selectable-leak",title:"Selectable Abstraction Leak",description:"Problem",source:"@site/docs/collections/03-behaviors/04-selectable-leak.md",sourceDirName:"collections/03-behaviors",slug:"/collections/behaviors/selectable-leak",permalink:"/collections/behaviors/selectable-leak",draft:!1,unlisted:!1,editUrl:"https://github.com/rekalogika/rekalogika-docs/edit/main/docs/collections/03-behaviors/04-selectable-leak.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{title:"Selectable Abstraction Leak"},sidebar:"docs",previous:{title:"Slow Counting",permalink:"/collections/behaviors/counting"},next:{title:"Key Type Widening",permalink:"/collections/behaviors/key-type-widening"}},s={},c=[{value:"Problem",id:"problem",level:2},{value:"Solution",id:"solution",level:2},{value:"Example",id:"example",level:2}];function d(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,o.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h2,{id:"problem",children:"Problem"}),"\n",(0,i.jsxs)(n.p,{children:["Doctrine Collections classes implement ",(0,i.jsx)(n.code,{children:"Selectable"})," interface. This is a\npowerful feature that allows filtering and sorting the collection. However, it\nis also an abstraction leak, and a popular one at that."]}),"\n",(0,i.jsx)(n.p,{children:"To use it, the caller might need to know the internal structure of the class.\nWithout restraint, the knowledge about the internal structure of an entity might\nspread throughout the codebase. And updating the class can potentially break a\nlot of code."}),"\n",(0,i.jsx)(n.h2,{id:"solution",children:"Solution"}),"\n",(0,i.jsxs)(n.p,{children:["Our classes does not expose the ",(0,i.jsx)(n.code,{children:"Selectable"})," interface. Instead, they are made\nto be easily extended. We can easily add expressive, higher-level methods to the\nclass to provide the same functionality, but without exposing the inner workings\nof the class."]}),"\n",(0,i.jsx)(n.h2,{id:"example",children:"Example"}),"\n",(0,i.jsxs)(n.p,{children:["The following is an example of the problem. It is a problem because ",(0,i.jsx)(n.code,{children:"matching()"}),"\nis used outside the entity. It mentions the property 'age', which is almost\nalways private. If the property is, for example, renamed, then we would need to\nscour the codebase to find all the places where 'age' is used, and update them\naccordingly."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-php",children:"/** @var Country $country */\n\n$workingAgeCitizens = $country->getCitizens()->matching(\n    Criteria::create()\n        ->where(Criteria::expr()->gte('age', 15))\n        ->andWhere(Criteria::expr()->lte('age', 64))\n);\n"})}),"\n",(0,i.jsx)(n.p,{children:"That code above should have been written like this:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-php",children:"/** @var Country $country */\n\n$workingAgeCitizens = $country->getCitizens()->inWorkingAge();\n"})}),"\n",(0,i.jsx)(n.p,{children:"To achieve that, we can extend one of our decorator class like this:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-php",children:"use Rekalogika\\Domain\\Collections\\RecollectionDecorator;\nuse Rekalogika\\Contracts\\Collections\\ReadableRecollection;\n\n/**\n * @extends RecollectionDecorator<int,Citizen>\n */\nclass CitizenCollection extends RecollectionDecorator\n{\n    public function inWorkingAge(): ReadableRecollection\n    {\n        $criteria = $this->matching(\n            Criteria::create()\n                ->where(Criteria::expr()->gte('age', 15))\n                ->andWhere(Criteria::expr()->lte('age', 64))\n        );\n\n        return $this->createCriteriaRecollection(\n            criteria: $criteria,\n            instanceId: __METHOD__,\n        );\n    }\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Then, we can use the ",(0,i.jsx)(n.code,{children:"CitizenCollection"})," class in our ",(0,i.jsx)(n.code,{children:"Country"})," class:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-php",children:"use Rekalogika\\Contracts\\Collections\\ReadableRecollection;\n\nclass Country\n{\n    public function getCitizens(): CitizenCollection\n    {\n        return new CitizenCollection(\n            collection: $this->citizen,\n            indexBy: 'id'\n        );\n    }\n}\n"})})]})}function h(e={}){const{wrapper:n}={...(0,o.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},1151:(e,n,t)=>{t.d(n,{Z:()=>r,a:()=>a});var i=t(7294);const o={},l=i.createContext(o);function a(e){const n=i.useContext(l);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:a(e.components),i.createElement(l.Provider,{value:n},e.children)}}}]);