"use strict";(self.webpackChunkrekalogika_docs=self.webpackChunkrekalogika_docs||[]).push([[164],{6909:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>h,frontMatter:()=>o,metadata:()=>r,toc:()=>l});var a=t(5893),i=t(1151);const o={title:"Manual Control"},s=void 0,r={id:"domain-event/manual-control",title:"Manual Control",description:"To manually manage domain events, you can use",source:"@site/docs/domain-event/04-manual-control.md",sourceDirName:"domain-event",slug:"/domain-event/manual-control",permalink:"/domain-event/manual-control",draft:!1,unlisted:!1,editUrl:"https://github.com/rekalogika/rekalogika-docs/edit/main/docs/domain-event/04-manual-control.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{title:"Manual Control"},sidebar:"docs",previous:{title:"Transactions",permalink:"/domain-event/transaction"},next:{title:"Dispatch Events",permalink:"/domain-event/dispatch-events"}},c={},l=[{value:"Manual Dispatching",id:"manual-dispatching",level:2},{value:"Clearing Events",id:"clearing-events",level:2},{value:"Getting the Events in the Queue",id:"getting-the-events-in-the-queue",level:2}];function d(e){const n={admonition:"admonition",code:"code",h2:"h2",p:"p",pre:"pre",...(0,i.a)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsxs)(n.p,{children:["To manually manage domain events, you can use\n",(0,a.jsx)(n.code,{children:"DomainEventAwareEntityManagerInterface"})," in place of the regular\n",(0,a.jsx)(n.code,{children:"EntityManagerInterface"}),". It adds several methods to the Entity Manager that you\ncan use to manage domain event dispatching."]}),"\n",(0,a.jsx)(n.h2,{id:"manual-dispatching",children:"Manual Dispatching"}),"\n",(0,a.jsxs)(n.p,{children:["You can disable automatic dispatching on ",(0,a.jsx)(n.code,{children:"flush()"})," by calling\n",(0,a.jsx)(n.code,{children:"setAutoDispatchDomainEvents(false)"}),"."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-php",children:"use Rekalogika\\DomainEvent\\DomainEventAwareEntityManagerInterface;\n\n/** @var DomainEventAwareEntityManagerInterface $entityManager */\n\n$entityManager->setAutoDispatchDomainEvents(false);\n\n// ...\n\n$entityManager->dispatchPreFlushDomainEvents();\n$entityManager->flush();\n$entityManager->dispatchPostFlushDomainEvents();\n"})}),"\n",(0,a.jsx)(n.admonition,{type:"note",children:(0,a.jsxs)(n.p,{children:["Immediate dispatching is dispatched outside ",(0,a.jsx)(n.code,{children:"DomainEventManager"})," and\n",(0,a.jsx)(n.code,{children:"DomainEventAwareEntityManager"}),", and therefore unaffected by\n",(0,a.jsx)(n.code,{children:"setAutoDispatchDomainEvents()"}),"."]})}),"\n",(0,a.jsx)(n.h2,{id:"clearing-events",children:"Clearing Events"}),"\n",(0,a.jsxs)(n.p,{children:["If the domain event queues are not empty at the end of the request,\n",(0,a.jsx)(n.code,{children:"DomainEventManager"})," will throw ",(0,a.jsx)(n.code,{children:"UndispatchedEventsException"}),". To prevent that\nfrom happening, if you disable auto-dispatch, you need to make sure that you\ndispatch both pre-flush and post-flush events as above. Alternatively, you can\nclear the events if you don't want them dispatched:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-php",children:"use Rekalogika\\DomainEvent\\DomainEventAwareEntityManagerInterface;\n\n/** @var DomainEventAwareEntityManagerInterface $entityManager */\n\n$entityManager->setAutoDispatchDomainEvents(false);\n\n// ...\n\n$entityManager->flush();\n$entityManager->clearDomainEvents();\n"})}),"\n",(0,a.jsx)(n.admonition,{type:"note",children:(0,a.jsxs)(n.p,{children:["In the event of an uncaught error, the framework will automatically\nclear undispatched events using the ",(0,a.jsx)(n.code,{children:"kernel.exception"})," and ",(0,a.jsx)(n.code,{children:"console.error"}),"\nevents, so in such cases, you don't have to handle that manually. But if you\ncatch an exception that previously caused pending events not to be dispatched,\nyou need to manually clear the events."]})}),"\n",(0,a.jsx)(n.h2,{id:"getting-the-events-in-the-queue",children:"Getting the Events in the Queue"}),"\n",(0,a.jsxs)(n.p,{children:["You can get the undispatched events in the queue by calling ",(0,a.jsx)(n.code,{children:"popDomainEvents()"}),"."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-php",children:"use Rekalogika\\DomainEvent\\DomainEventAwareEntityManagerInterface;\n\n/** @var DomainEventAwareEntityManagerInterface $entityManager */\n\n$events = $entityManager->popDomainEvents();\n"})}),"\n",(0,a.jsx)(n.p,{children:"This can be useful if you want to dispatch the events in another process, or\nstore them in a database, etc."})]})}function h(e={}){const{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},1151:(e,n,t)=>{t.d(n,{Z:()=>r,a:()=>s});var a=t(7294);const i={},o=a.createContext(i);function s(e){const n=a.useContext(o);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),a.createElement(o.Provider,{value:n},e.children)}}}]);