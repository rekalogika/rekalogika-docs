"use strict";(self.webpackChunkrekalogika_docs=self.webpackChunkrekalogika_docs||[]).push([[6538],{6610:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>i,default:()=>l,frontMatter:()=>p,metadata:()=>o,toc:()=>c});const o=JSON.parse('{"id":"mapper/object-mapper","title":"Manual Mapping using an Object Mapper","description":"If you need a custom logic in an object to another object mapping, one way to do","source":"@site/docs/mapper/06-object-mapper.md","sourceDirName":"mapper","slug":"/mapper/object-mapper","permalink":"/mapper/object-mapper","draft":false,"unlisted":false,"editUrl":"https://github.com/rekalogika/rekalogika-docs/edit/main/docs/mapper/06-object-mapper.md","tags":[],"version":"current","sidebarPosition":6,"frontMatter":{"title":"Manual Mapping using an Object Mapper"},"sidebar":"docs","previous":{"title":"Context and Mapping Options","permalink":"/mapper/context"},"next":{"title":"Manual Mapping using a Class Factory Method","permalink":"/mapper/class-factory-mapper"}}');var a=t(4848),r=t(8453);const p={title:"Manual Mapping using an Object Mapper"},i=void 0,s={},c=[{value:"Getting the Existing Target Value",id:"getting-the-existing-target-value",level:2},{value:"Extra Arguments",id:"extra-arguments",level:2},{value:"Source Union Types",id:"source-union-types",level:2},{value:"Using a Lazy-Loading Proxy",id:"using-a-lazy-loading-proxy",level:2}];function u(e){const n={a:"a",admonition:"admonition",code:"code",h2:"h2",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsxs)(n.p,{children:["If you need a custom logic in an object to another object mapping, one way to do\nit is to create a service, and add the ",(0,a.jsx)(n.code,{children:"AsObjectMapper"})," attribute to a method."]}),"\n",(0,a.jsx)(n.p,{children:"Example:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-php",children:"use Brick\\Money\\Money;\nuse Rekalogika\\Mapper\\Attribute\\AsObjectMapper;\n\nclass MoneyObjectMapper\n{\n    #[AsObjectMapper]\n    public function mapMoneyToMoneyDto(Money $money): MoneyDto\n    {\n        return new MoneyDto(\n            $money->getAmount()->__toString(),\n            $money->getCurrency()->getCurrencyCode(),\n        );\n    }\n\n    #[AsObjectMapper]\n    public function mapMoneyDtoToMoney(MoneyDto $moneyDto): Money\n    {\n        return Money::of($moneyDto->getAmount(), $moneyDto->getCurrency());\n    }\n}\n"})}),"\n",(0,a.jsx)(n.h2,{id:"getting-the-existing-target-value",children:"Getting the Existing Target Value"}),"\n",(0,a.jsx)(n.p,{children:"If you need to get the existing value of the target property, you can add the\noptional second argument to the method. The mapper will pass the existing value\nto the method."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-php",children:"use Brick\\Money\\Money;\nuse Rekalogika\\Mapper\\Attribute\\AsObjectMapper;\n\nclass MoneyObjectMapper\n{\n    #[AsObjectMapper]\n    public function mapMoneyDtoToMoney(\n        MoneyDto $moneyDto,\n        // highlight-next-line\n        Money $existingMoney\n    ): Money {\n        return Money::of($moneyDto->getAmount(), $moneyDto->getCurrency());\n    }\n}\n"})}),"\n",(0,a.jsx)(n.admonition,{type:"note",children:(0,a.jsx)(n.p,{children:"You may return the original instance or a new instance. If you return a new\ninstance, Mapper will replace the original instance with the new one."})}),"\n",(0,a.jsx)(n.h2,{id:"extra-arguments",children:"Extra Arguments"}),"\n",(0,a.jsx)(n.p,{children:"You also have the option to inject the main transformer, sub-mapper, and the\ncontext to the property mapper. This can be in any order, but the first argument\nmust be the source object."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-php",children:"use Brick\\Money\\Money;\nuse Rekalogika\\Mapper\\Attribute\\AsObjectMapper;\nuse Rekalogika\\Mapper\\Context\\Context;\nuse Rekalogika\\Mapper\\MainTransformerInterface;\nuse Rekalogika\\Mapper\\SubMapper\\SubMapperInterface;\n\nclass MoneyObjectMapper\n{\n    #[AsObjectMapper]\n    public function mapMoneyToMoneyDto(\n        Money $money,\n        // highlight-start\n        MainTransformerInterface $mainTransformer,\n        SubMapperInterface $subMapper,\n        Context $context\n        // highlight-end\n    ): MoneyDto {\n        return new MoneyDto(\n            $money->getAmount()->__toString(),\n            $money->getCurrency()->getCurrencyCode(),\n        );\n    }\n}\n"})}),"\n",(0,a.jsx)(n.h2,{id:"source-union-types",children:"Source Union Types"}),"\n",(0,a.jsx)(n.p,{children:"Union types on the source side are supported."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-php",children:"use Rekalogika\\Mapper\\Attribute\\AsObjectMapper;\n\nclass AnimalMapper\n{\n    #[AsObjectMapper()]\n    // highlight-next-line\n    public function mapCatOrDogToAnimalDto(Cat|Dog $animal): AnimalDto\n    {\n        return new AnimalDto($animal);\n    }\n}\n"})}),"\n",(0,a.jsxs)(n.p,{children:["Read more about the sub mapper in the ",(0,a.jsx)(n.a,{href:"submapper",children:"SubMapper"})," chapter."]}),"\n",(0,a.jsx)(n.h2,{id:"using-a-lazy-loading-proxy",children:"Using a Lazy-Loading Proxy"}),"\n",(0,a.jsxs)(n.p,{children:["Instead of doing the mapping immediately, you can also use the ",(0,a.jsx)(n.code,{children:"createProxy()"}),"\nmethod to create a target proxy object. The mapping will be deferred to the\npoint when you first access the properties of the proxy object."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-php",children:"use Brick\\Money\\Money;\nuse Rekalogika\\Mapper\\Attribute\\AsObjectMapper;\nuse Rekalogika\\Mapper\\Context\\Context;\nuse Rekalogika\\Mapper\\MainTransformerInterface;\nuse Rekalogika\\Mapper\\SubMapper\\SubMapperInterface;\n\nclass MoneyObjectMapper\n{\n    #[AsObjectMapper]\n    public function mapMoneyToMoneyDto(\n        Money $source,\n        SubMapperInterface $subMapper,\n    ): MoneyDto {\n        return $subMapper->createProxy(\n            MoneyDto::class,\n            static function (MoneyDto $target) use ($source) {\n                $target->__construct(\n                    $source->getAmount()->__toString(),\n                    $source->getCurrency()->getCurrencyCode(),\n                );\n            },\n        );\n    }\n}\n"})}),"\n",(0,a.jsxs)(n.p,{children:["Read more about the ",(0,a.jsx)(n.code,{children:"createProxy()"})," method in the ",(0,a.jsx)(n.a,{href:"submapper#createproxy-method",children:"SubMapper"}),"\nchapter."]})]})}function l(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(u,{...e})}):u(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>p,x:()=>i});var o=t(6540);const a={},r=o.createContext(a);function p(e){const n=o.useContext(r);return o.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:p(e.components),o.createElement(r.Provider,{value:n},e.children)}}}]);