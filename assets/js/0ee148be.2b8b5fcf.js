"use strict";(self.webpackChunkrekalogika_docs=self.webpackChunkrekalogika_docs||[]).push([[3015],{4792:(e,o,t)=>{t.r(o),t.d(o,{assets:()=>l,contentTitle:()=>c,default:()=>h,frontMatter:()=>s,metadata:()=>n,toc:()=>r});const n=JSON.parse('{"id":"doctrine-collections-decorator/cookbook/extra-lazy-load-prevention","title":"Loading Prevention in Extra Lazy Collections","description":"Suppose you have an entity that has a one-to-many relation with a million of","source":"@site/docs/doctrine-collections-decorator/cookbook/15-extra-lazy-load-prevention.md","sourceDirName":"doctrine-collections-decorator/cookbook","slug":"/doctrine-collections-decorator/cookbook/extra-lazy-load-prevention","permalink":"/doctrine-collections-decorator/cookbook/extra-lazy-load-prevention","draft":false,"unlisted":false,"editUrl":"https://github.com/rekalogika/rekalogika-docs/edit/main/docs/doctrine-collections-decorator/cookbook/15-extra-lazy-load-prevention.md","tags":[],"version":"current","sidebarPosition":15,"frontMatter":{"title":"Loading Prevention in Extra Lazy Collections"},"sidebar":"docs","previous":{"title":"Decorating Member Objects","permalink":"/doctrine-collections-decorator/cookbook/decorating-members"},"next":{"title":"Lazy Chained Matching","permalink":"/doctrine-collections-decorator/cookbook/lazy-chained-matching"}}');var i=t(4848),a=t(8453);const s={title:"Loading Prevention in Extra Lazy Collections"},c=void 0,l={},r=[{value:"The Decorator Class",id:"the-decorator-class",level:2},{value:"Usage Example in Entities",id:"usage-example-in-entities",level:2}];function d(e){const o={a:"a",admonition:"admonition",code:"code",h2:"h2",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(o.p,{children:["Suppose you have an entity that has a one-to-many relation with a million of\nrelated entities. The solution is to use ",(0,i.jsx)(o.a,{href:"https://www.doctrine-project.org/projects/doctrine-orm/en/latest/tutorials/extra-lazy-associations.html",children:(0,i.jsx)(o.code,{children:"fetch: 'EXTRA_LAZY'"})})," and ",(0,i.jsx)(o.code,{children:"indexBy: 'id'"}),"."]}),"\n",(0,i.jsx)(o.p,{children:"This will allow working with some of the methods of the collection without\nloading the whole collection into memory. As long as you don't call the other\nmethods, you will be fine."}),"\n",(0,i.jsx)(o.p,{children:"But then one of your team members forgets about it and inadvertently calls one of\nthe methods that triggers a full load of the collection. In their development\nenvironment, it appears fine because of the much smaller dataset. It would pass\nCI and be deployed to production. But in production, everything immediately\ngrinds to a halt because it tries to load a million records into memory."}),"\n",(0,i.jsx)(o.p,{children:"A solution to prevent this problem is to decorate the collection to throw an\nexception if an unsafe method is called."}),"\n",(0,i.jsxs)(o.p,{children:["The list of safe methods is listed in the documentation of ",(0,i.jsx)(o.a,{href:"https://www.doctrine-project.org/projects/doctrine-orm/en/current/tutorials/extra-lazy-associations.html",children:"Extra Lazy\nAssociation"}),".\nThey are: ",(0,i.jsx)(o.code,{children:"contains()"}),", ",(0,i.jsx)(o.code,{children:"containsKey()"}),", ",(0,i.jsx)(o.code,{children:"count()"}),", ",(0,i.jsx)(o.code,{children:"get()"}),", ",(0,i.jsx)(o.code,{children:"slice()"}),", ",(0,i.jsx)(o.code,{children:"add()"}),",\nand ",(0,i.jsx)(o.code,{children:"offsetSet()"})," if the first argument is null. We also add ",(0,i.jsx)(o.code,{children:"matching()"})," to\nthat list."]}),"\n",(0,i.jsx)(o.h2,{id:"the-decorator-class",children:"The Decorator Class"}),"\n",(0,i.jsxs)(o.p,{children:["This package already comes with ",(0,i.jsx)(o.code,{children:"ExtraLazyCollection"})," for this purpose."]}),"\n",(0,i.jsx)(o.admonition,{type:"info",children:(0,i.jsxs)(o.p,{children:["While ",(0,i.jsx)(o.code,{children:"ExtraLazyCollection"})," only allows the safe methods, they still implement\nthe ",(0,i.jsx)(o.code,{children:"Collection"})," interface so that the object can still be used in places where\na ",(0,i.jsx)(o.code,{children:"Collection"})," is expected."]})}),"\n",(0,i.jsx)(o.h2,{id:"usage-example-in-entities",children:"Usage Example in Entities"}),"\n",(0,i.jsx)(o.pre,{children:(0,i.jsx)(o.code,{className:"language-php",children:"use Doctrine\\Common\\Collections\\Collection;\nuse Doctrine\\ORM\\Mapping as ORM;\nuse Rekalogika\\Collections\\Decorator\\ExtraLazy\\ExtraLazyCollection;\n\n#[ORM\\Entity()]\nclass BookShelf\n{\n    // our bookshelf has a million of books...\n    #[ORM\\OneToMany(\n        targetEntity: Book::class,\n        fetch: 'EXTRA_LAZY', // needs this, or the safe methods become unsafe\n        indexBy: 'id', // needs this, or containsKey() & get() become unsafe\n    )]\n    private Collection $books;\n\n    public function getBooks(): Collection\n    {\n        return new ExtraLazyCollection($this->books);\n    }\n}\n"})})]})}function h(e={}){const{wrapper:o}={...(0,a.R)(),...e.components};return o?(0,i.jsx)(o,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,o,t)=>{t.d(o,{R:()=>s,x:()=>c});var n=t(6540);const i={},a=n.createContext(i);function s(e){const o=n.useContext(a);return n.useMemo(function(){return"function"==typeof e?e(o):{...o,...e}},[o,e])}function c(e){let o;return o=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),n.createElement(a.Provider,{value:o},e.children)}}}]);