"use strict";(self.webpackChunkrekalogika_docs=self.webpackChunkrekalogika_docs||[]).push([[6678],{7580:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>p,contentTitle:()=>a,default:()=>h,frontMatter:()=>o,metadata:()=>s,toc:()=>c});var n=r(4848),i=r(8453);const o={title:"Changing the Mapping Behavior with the Map Attribute"},a=void 0,s={id:"mapper/object/map",title:"Changing the Mapping Behavior with the Map Attribute",description:"By default, Mapper will map a property on the source side to a property with the",source:"@site/docs/mapper/02-object/01-map.md",sourceDirName:"mapper/02-object",slug:"/mapper/object/map",permalink:"/mapper/object/map",draft:!1,unlisted:!1,editUrl:"https://github.com/rekalogika/rekalogika-docs/edit/main/docs/mapper/02-object/01-map.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{title:"Changing the Mapping Behavior with the Map Attribute"},sidebar:"docs",previous:{title:"General",permalink:"/mapper/object/general"},next:{title:"Mapping to Abstract Classes and Interfaces",permalink:"/mapper/object/abstract-interface"}},p={},c=[{value:"Mapping Properties with Different Source and Target Names",id:"mapping-properties-with-different-source-and-target-names",level:2},{value:"Ignoring a Property",id:"ignoring-a-property",level:2},{value:"Bidirectionality",id:"bidirectionality",level:2},{value:"Virtual Properties",id:"virtual-properties",level:2},{value:"Limiting to a Specific Class",id:"limiting-to-a-specific-class",level:2},{value:"Property Path",id:"property-path",level:2}];function l(e){const t={a:"a",admonition:"admonition",code:"code",h2:"h2",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(t.p,{children:["By default, Mapper will map a property on the source side to a property with the\nsame name on the target side. You can use the ",(0,n.jsx)(t.code,{children:"#[Map]"})," attribute to change this\ndefault behavior."]}),"\n",(0,n.jsx)(t.h2,{id:"mapping-properties-with-different-source-and-target-names",children:"Mapping Properties with Different Source and Target Names"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-php",children:"use Rekalogika\\Mapper\\Attribute\\Map;\nuse Rekalogika\\Mapper\\MapperInterface;\n\nclass SomeObject\n{\n    public string $sourcePropertyA = 'sourcePropertyA';\n}\n\nclass SomeObjectDto\n{\n    // highlight-next-line\n    #[Map(property: 'sourcePropertyA')]\n    public ?string $targetPropertyA = null;\n}\n\n/** @var MapperInterface $mapper */\n\n$source = new SomeObject();\n$result = $mapper->map($source, SomeObjectDto::class);\n"})}),"\n",(0,n.jsxs)(t.p,{children:["In the above example, the mapper will map the ",(0,n.jsx)(t.code,{children:"sourcePropertyA"})," from the source\nobject to the ",(0,n.jsx)(t.code,{children:"targetPropertyA"})," on the target object."]}),"\n",(0,n.jsx)(t.h2,{id:"ignoring-a-property",children:"Ignoring a Property"}),"\n",(0,n.jsxs)(t.p,{children:["If you want to ignore a property, you can use the ",(0,n.jsx)(t.code,{children:"#[Map]"})," attribute with the\n",(0,n.jsx)(t.code,{children:"property"})," argument set to null:"]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-php",children:"class SomeObject\n{\n    #[Map(property: null)]\n    public string $sourcePropertyA = 'sourcePropertyA';\n}\n"})}),"\n",(0,n.jsx)(t.h2,{id:"bidirectionality",children:"Bidirectionality"}),"\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.code,{children:"#[Map]"})," is bidirectional, the same attribute above will also work in reverse:"]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-php",children:"$source = new SomeObjectDto();\n$result = $mapper->map($source, SomeObject::class);\n"})}),"\n",(0,n.jsx)(t.h2,{id:"virtual-properties",children:"Virtual Properties"}),"\n",(0,n.jsxs)(t.p,{children:["A property may be 'virtual', i.e. it has a getter and setter, but no actual\nproperty. In this case, you can place the ",(0,n.jsx)(t.code,{children:"#[Map]"})," attribute on the getter or\nsetter method:"]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-php",children:"class Person\n{\n    // highlight-next-line\n    #[Map(property: 'alias')]\n    public function getName(): string\n    {\n        return 'John Doe';\n    }\n}\n"})}),"\n",(0,n.jsx)(t.admonition,{title:"Protip",type:"tip",children:(0,n.jsx)(t.p,{children:"It will also work with withers, issers, hassers, canners, adders, and removers."})}),"\n",(0,n.jsx)(t.h2,{id:"limiting-to-a-specific-class",children:"Limiting to a Specific Class"}),"\n",(0,n.jsxs)(t.p,{children:["The ",(0,n.jsx)(t.code,{children:"#[Map]"})," attribute has an optional ",(0,n.jsx)(t.code,{children:"$class"})," argument, which can be used to\nlimit the effect only to a specific paired class. i.e. it will only take effect\nif the other class is the class specified in the ",(0,n.jsx)(t.code,{children:"$class"})," argument:"]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-php",children:"class SomeObjectDto\n{\n    // highlight-next-line\n    #[Map(property: 'sourcePropertyA', class: SomeObject::class)]\n    public ?string $targetPropertyA = null;\n}\n"})}),"\n",(0,n.jsx)(t.admonition,{title:"Protip",type:"tip",children:(0,n.jsxs)(t.p,{children:["You may have multiple ",(0,n.jsx)(t.code,{children:"#[Map]"})," attributes on the same property, each with a\ndifferent ",(0,n.jsx)(t.code,{children:"$class"})," argument."]})}),"\n",(0,n.jsx)(t.h2,{id:"property-path",children:"Property Path"}),"\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.code,{children:"#[Map]"})," also supports property path using the same syntax provided by ",(0,n.jsx)(t.a,{href:"https://symfony.com/doc/current/components/property_access.html",children:"Symfony\nPropertyAccess"}),",\ni.e. you can map a property to a nested property:"]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-php",children:"class BookDto\n{\n    // highlight-next-line\n    #[Map(property: 'authors[0].name')]\n    public ?string $author = null;\n}\n"})}),"\n",(0,n.jsxs)(t.p,{children:["If the caller tries to map a ",(0,n.jsx)(t.code,{children:"Book"})," object to a ",(0,n.jsx)(t.code,{children:"BookDto"})," object above, Mapper\nwill get the name using ",(0,n.jsx)(t.code,{children:"$book->getAuthors()[0]->getName()"})," (or equivalent) and\nassign it to the ",(0,n.jsx)(t.code,{children:"author"})," property of the ",(0,n.jsx)(t.code,{children:"BookDto"})," object."]}),"\n",(0,n.jsxs)(t.p,{children:["The reverse will also work. If the caller tries to map a ",(0,n.jsx)(t.code,{children:"BookDto"})," object to a\n",(0,n.jsx)(t.code,{children:"Book"})," object, Mapper will set the name using\n",(0,n.jsx)(t.code,{children:"$book->getAuthors()[0]->setName($bookDto->author)"})," (or equivalent)."]}),"\n",(0,n.jsx)(t.admonition,{title:"Limitations",type:"caution",children:(0,n.jsxs)(t.p,{children:["Property path does not support variadic setter, i.e. things like\n",(0,n.jsx)(t.code,{children:"setAuthors(Author ...$authors)"}),". It also does not support immutable setters,\nor wither methods."]})})]})}function h(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(l,{...e})}):l(e)}},8453:(e,t,r)=>{r.d(t,{R:()=>a,x:()=>s});var n=r(6540);const i={},o=n.createContext(i);function a(e){const t=n.useContext(o);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function s(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),n.createElement(o.Provider,{value:t},e.children)}}}]);