"use strict";(self.webpackChunkrekalogika_docs=self.webpackChunkrekalogika_docs||[]).push([[4356],{1470:(e,n,t)=>{t.d(n,{A:()=>k});var a=t(6540),i=t(4164),s=t(3104),o=t(6347),r=t(205),l=t(7485),u=t(1682),c=t(679);function d(e){return a.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,a.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function h(e){const{values:n,children:t}=e;return(0,a.useMemo)((()=>{const e=n??function(e){return d(e).map((({props:{value:e,label:n,attributes:t,default:a}})=>({value:e,label:n,attributes:t,default:a})))}(t);return function(e){const n=(0,u.XI)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,t])}function p({value:e,tabValues:n}){return n.some((n=>n.value===e))}function m({queryString:e=!1,groupId:n}){const t=(0,o.W6)(),i=function({queryString:e=!1,groupId:n}){if("string"==typeof e)return e;if(!1===e)return null;if(!0===e&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:e,groupId:n});return[(0,l.aZ)(i),(0,a.useCallback)((e=>{if(!i)return;const n=new URLSearchParams(t.location.search);n.set(i,e),t.replace({...t.location,search:n.toString()})}),[i,t])]}function f(e){const{defaultValue:n,queryString:t=!1,groupId:i}=e,s=h(e),[o,l]=(0,a.useState)((()=>function({defaultValue:e,tabValues:n}){if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(e){if(!p({value:e,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${e}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return e}const t=n.find((e=>e.default))??n[0];if(!t)throw new Error("Unexpected error: 0 tabValues");return t.value}({defaultValue:n,tabValues:s}))),[u,d]=m({queryString:t,groupId:i}),[f,v]=function({groupId:e}){const n=function(e){return e?`docusaurus.tab.${e}`:null}(e),[t,i]=(0,c.Dv)(n);return[t,(0,a.useCallback)((e=>{n&&i.set(e)}),[n,i])]}({groupId:i}),b=(()=>{const e=u??f;return p({value:e,tabValues:s})?e:null})();(0,r.A)((()=>{b&&l(b)}),[b]);return{selectedValue:o,selectValue:(0,a.useCallback)((e=>{if(!p({value:e,tabValues:s}))throw new Error(`Can't select invalid tab value=${e}`);l(e),d(e),v(e)}),[d,v,s]),tabValues:s}}var v=t(2303);const b={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var g=t(4848);function y({className:e,block:n,selectedValue:t,selectValue:a,tabValues:o}){const r=[],{blockElementScrollPositionUntilNextRender:l}=(0,s.a_)(),u=e=>{const n=e.currentTarget,i=r.indexOf(n),s=o[i].value;s!==t&&(l(n),a(s))},c=e=>{let n=null;switch(e.key){case"Enter":u(e);break;case"ArrowRight":{const t=r.indexOf(e.currentTarget)+1;n=r[t]??r[0];break}case"ArrowLeft":{const t=r.indexOf(e.currentTarget)-1;n=r[t]??r[r.length-1];break}}n?.focus()};return(0,g.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.A)("tabs",{"tabs--block":n},e),children:o.map((({value:e,label:n,attributes:a})=>(0,g.jsx)("li",{role:"tab",tabIndex:t===e?0:-1,"aria-selected":t===e,ref:e=>{r.push(e)},onKeyDown:c,onClick:u,...a,className:(0,i.A)("tabs__item",b.tabItem,a?.className,{"tabs__item--active":t===e}),children:n??e},e)))})}function x({lazy:e,children:n,selectedValue:t}){const s=(Array.isArray(n)?n:[n]).filter(Boolean);if(e){const e=s.find((e=>e.props.value===t));return e?(0,a.cloneElement)(e,{className:(0,i.A)("margin-top--md",e.props.className)}):null}return(0,g.jsx)("div",{className:"margin-top--md",children:s.map(((e,n)=>(0,a.cloneElement)(e,{key:n,hidden:e.props.value!==t})))})}function j(e){const n=f(e);return(0,g.jsxs)("div",{className:(0,i.A)("tabs-container",b.tabList),children:[(0,g.jsx)(y,{...n,...e}),(0,g.jsx)(x,{...n,...e})]})}function k(e){const n=(0,v.A)();return(0,g.jsx)(j,{...e,children:d(e.children)},String(n))}},8453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>r});var a=t(6540);const i={},s=a.createContext(i);function o(e){const n=a.useContext(s);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),a.createElement(s.Provider,{value:n},e.children)}},9365:(e,n,t)=>{t.d(n,{A:()=>o});t(6540);var a=t(4164);const i={tabItem:"tabItem_Ymn6"};var s=t(4848);function o({children:e,hidden:n,className:t}){return(0,s.jsx)("div",{role:"tabpanel",className:(0,a.A)(i.tabItem,t),hidden:n,children:e})}},9719:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>u,default:()=>p,frontMatter:()=>l,metadata:()=>a,toc:()=>d});const a=JSON.parse('{"id":"domain-event/intro","title":"Introduction & Installation","description":"An implementation of domain event pattern for Symfony & Doctrine.","source":"@site/docs/domain-event/00-intro.md","sourceDirName":"domain-event","slug":"/domain-event/intro","permalink":"/domain-event/intro","draft":false,"unlisted":false,"editUrl":"https://github.com/rekalogika/rekalogika-docs/edit/main/docs/domain-event/00-intro.md","tags":[],"version":"current","sidebarPosition":0,"frontMatter":{"title":"Introduction & Installation"},"sidebar":"docs","previous":{"title":"rekalogika/domain-event","permalink":"/domain-event/"},"next":{"title":"Outbox Installation & Configuration","permalink":"/domain-event/outbox-setup"}}');var i=t(4848),s=t(8453),o=t(1470),r=t(9365);const l={title:"Introduction & Installation"},u=void 0,c={},d=[{value:"What is a Domain Event?",id:"what-is-a-domain-event",level:2},{value:"Why Use Domain Events?",id:"why-use-domain-events",level:2},{value:"Features",id:"features",level:2},{value:"To Do",id:"to-do",level:2},{value:"Synopsis",id:"synopsis",level:2},{value:"Installation",id:"installation",level:2},{value:"License",id:"license",level:2},{value:"Contributing",id:"contributing",level:2}];function h(e){const n={a:"a",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.p,{children:"An implementation of domain event pattern for Symfony & Doctrine."}),"\n",(0,i.jsx)(n.h2,{id:"what-is-a-domain-event",children:"What is a Domain Event?"}),"\n",(0,i.jsx)(n.p,{children:"A domain event is simply a regular event like you would normally use with\nSymfony's EventDispatcher. The difference is that a domain event represents\nsomething that has happened in your domain. It has a name that is meaningful to\nthe underlying business that the domain represents. A domain event is usually\ndispatched by your entities, as opposed to being dispatched from your\ncontrollers or other services."}),"\n",(0,i.jsx)(n.h2,{id:"why-use-domain-events",children:"Why Use Domain Events?"}),"\n",(0,i.jsx)(n.p,{children:'A domain event represents a business event that has happened. It is a good way\nto model the business requirements that say "when something happens, do this".'}),"\n",(0,i.jsx)(n.p,{children:"A domain event is raised by the part of your code where the event is actually\nhappening. Different part of your application might call the same method on an\nentity. In some cases, the method is called indirectly, and the caller has no\nidea that it is being called. By using domain events, the event will be\ndispatched in all the cases. No need to make sure to dispatch the event from all\nthe different places where the method is called."}),"\n",(0,i.jsxs)(n.p,{children:["The application layer (controllers, services) can tell an entity to do\nsomething, but it cannot reliably know if the action is actually performed, or\nif an additional action is performed. A controller or a service can ask\n",(0,i.jsx)(n.code,{children:"$bookshelf->removeBook($book)"}),", but only the ",(0,i.jsx)(n.code,{children:"$bookshelf"})," knows if the book was\nactually removed. And if the event actually happened, the entity can tell the\nworld about it by recording a ",(0,i.jsx)(n.code,{children:"BookRemoved"})," event."]}),"\n",(0,i.jsx)(n.p,{children:"Some problems might tempt you to inject a service into your entity. With domain\nevents, you can avoid that. Your entity can dispatch an event, and you can set\nup a listener to react to that event. The relevant services can then correctly\nact on your entity, instead of the other way around."}),"\n",(0,i.jsx)(n.h2,{id:"features",children:"Features"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Works out of the box. No configuration is required for basic features."}),"\n",(0,i.jsx)(n.li,{children:"Simple, unopinionated architecture. Uses plain event objects, and doesn't\nrequire much from your domain entities."}),"\n",(0,i.jsx)(n.li,{children:"Uses standard Symfony's EventDispatcher, with the same dispatching semantics\n& listener registrations."}),"\n",(0,i.jsx)(n.li,{children:"Transaction support."}),"\n",(0,i.jsx)(n.li,{children:"Works with multiple entity managers."}),"\n",(0,i.jsx)(n.li,{children:"Multiple events considered identical are dispatched only once."}),"\n",(0,i.jsx)(n.li,{children:"Four listening strategies: immediate, pre-flush, post-flush, and event bus."}),"\n",(0,i.jsx)(n.li,{children:"Uses Symfony Messenger as the event bus implementation."}),"\n",(0,i.jsx)(n.li,{children:"Utilizes the transactional outbox pattern when publishing events to the event\nbus to guarantee consistency and delivery."}),"\n",(0,i.jsx)(n.li,{children:"Utilizes Symfony Scheduler to relay undelivered events to the event bus."}),"\n",(0,i.jsx)(n.li,{children:"Does not require you to change how you work with entities."}),"\n",(0,i.jsx)(n.li,{children:"Should work everywhere without any change: in controllers, message handlers,\ncommand line, etc."}),"\n",(0,i.jsx)(n.li,{children:"Separated contracts & framework. Useful for enforcing architectural\nboundaries. Your domain doesn't have to depend on the framework."}),"\n",(0,i.jsx)(n.li,{children:"Symfony Profiler integration. Debug your events in the profiler's events\npanel."}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"to-do",children:"To Do"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Support for Doctrine MongoDB ODM."}),"\n",(0,i.jsx)(n.li,{children:"Support event inheritance."}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"synopsis",children:"Synopsis"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-php",children:"//\n// The event\n//\n\nfinal readonly class PostPublished\n{\n    public function __construct(public string $postId) {}\n}\n\n//\n// The entity\n//\n\nuse Rekalogika\\Contracts\\DomainEvent\\DomainEventEmitterInterface;\nuse Rekalogika\\Contracts\\DomainEvent\\DomainEventEmitterTrait;\n\nclass Post implements DomainEventEmitterInterface\n{\n    use DomainEventEmitterTrait;\n    \n    // ...\n\n    public function setStatus(string $status): void\n    {\n        $originalStatus = $this->status;\n        $this->status = $status;\n\n        // records the published event if the new status is published and it\n        // is different from the original status\n\n        if ($status === 'published' && $originalStatus !== $status) {\n            $this->recordEvent(new PostPublished($this->id));\n        }\n    }\n\n    // ...\n}\n\n//\n// The listener\n//\n\nuse Psr\\Log\\LoggerInterface;\nuse Rekalogika\\Contracts\\DomainEvent\\Attribute\\AsPostFlushDomainEventListener;\n\nclass PostEventListener\n{\n    public function __construct(private LoggerInterface $logger) {}\n\n    // will be called after the post is published and the entity manager is\n    // flushed\n    \n    #[AsPostFlushDomainEventListener]\n    public function onPostPublished(PostPublished $event) {\n        $postId = $event->postId;\n\n        $this->logger->info(\"Post $postId has been published.\");\n    }\n}\n\n//\n// The caller\n//\n\nuse Doctrine\\ORM\\EntityManagerInterface;\n\n/** @var Post $post */\n/** @var EntityManagerInterface $entityManager */\n\n$post->setStatus('published');\n$entityManager->flush();\n\n// the event will be dispatched after the flush above, afterwards the listener\n// above will be called, sending a message to the logger\n"})}),"\n",(0,i.jsx)(n.h2,{id:"installation",children:"Installation"}),"\n",(0,i.jsxs)(n.p,{children:["Make sure Composer is installed globally, as explained in the\n",(0,i.jsx)(n.a,{href:"https://getcomposer.org/doc/00-intro.md",children:"installation chapter"}),"\nof the Composer documentation."]}),"\n",(0,i.jsxs)(o.A,{children:[(0,i.jsxs)(r.A,{value:"flex",label:"With Symfony Flex",children:[(0,i.jsx)(n.p,{children:"Open a command console, enter your project directory and execute:"}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"composer require rekalogika/domain-event\n"})})]}),(0,i.jsxs)(r.A,{value:"noflex",label:"Without Symfony Flex",children:[(0,i.jsx)(n.p,{children:"Step 1: Download the Bundle"}),(0,i.jsx)(n.p,{children:"Open a command console, enter your project directory, and execute the\nfollowing command to download the latest stable version of this bundle:"}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"composer require rekalogika/domain-event\n"})}),(0,i.jsx)(n.p,{children:"Step 2: Enable the Bundle"}),(0,i.jsxs)(n.p,{children:["Then, enable the bundle by adding it to the list of registered bundles\nin the ",(0,i.jsx)(n.code,{children:"config/bundles.php"})," file of your project:"]}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-php",metastring:'title="config/bundles.php"',children:"return [\n    // ...\n    Rekalogika\\DomainEvent\\RekalogikaDomainEventBundle::class => ['all' => true],\n];\n"})})]})]}),"\n",(0,i.jsx)(n.h2,{id:"license",children:"License"}),"\n",(0,i.jsx)(n.p,{children:"MIT"}),"\n",(0,i.jsx)(n.h2,{id:"contributing",children:"Contributing"}),"\n",(0,i.jsxs)(n.p,{children:["This framework consists of multiple repositories split from a monorepo. Be\nsure to submit issues and pull requests to the\n",(0,i.jsx)(n.a,{href:"https://github.com/rekalogika/domain-event-src",children:(0,i.jsx)(n.code,{children:"rekalogika/domain-event-src"})})," monorepo."]})]})}function p(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}}}]);