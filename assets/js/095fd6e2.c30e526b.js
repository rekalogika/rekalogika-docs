"use strict";(self.webpackChunkrekalogika_docs=self.webpackChunkrekalogika_docs||[]).push([[4496],{56:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>o,contentTitle:()=>i,default:()=>u,frontMatter:()=>p,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"mapper/object/custom-property-mapper","title":"Custom Property Mapper","description":"If you need a custom mapping logic for a specific property, you can create a","source":"@site/docs/mapper/02-object/03-custom-property-mapper.md","sourceDirName":"mapper/02-object","slug":"/mapper/object/custom-property-mapper","permalink":"/mapper/object/custom-property-mapper","draft":false,"unlisted":false,"editUrl":"https://github.com/rekalogika/rekalogika-docs/edit/main/docs/mapper/02-object/03-custom-property-mapper.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"title":"Custom Property Mapper"},"sidebar":"docs","previous":{"title":"Mapping to Abstract Classes and Interfaces","permalink":"/mapper/object/abstract-interface"},"next":{"title":"Lazy Loading","permalink":"/mapper/object/lazy-loading"}}');var a=r(4848),s=r(8453);const p={title:"Custom Property Mapper"},i=void 0,o={},l=[{value:"Basic Usage",id:"basic-usage",level:2},{value:"Shorthand Using <code>AsPropertyMapper</code> Attached to the Class",id:"shorthand-using-aspropertymapper-attached-to-the-class",level:2},{value:"Property Name Magic",id:"property-name-magic",level:2},{value:"Getting the Existing Target Value",id:"getting-the-existing-target-value",level:2},{value:"Extra Arguments",id:"extra-arguments",level:2},{value:"Source Union Types",id:"source-union-types",level:2},{value:"Refusing To Map",id:"refusing-to-map",level:2},{value:"Handling Uninitialized Properties",id:"handling-uninitialized-properties",level:2},{value:"Manual Wiring",id:"manual-wiring",level:2},{value:"Dumping Property Mapper Table",id:"dumping-property-mapper-table",level:2}];function c(e){const n={admonition:"admonition",code:"code",h2:"h2",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsxs)(n.p,{children:["If you need a custom mapping logic for a specific property, you can create a\nservice and add the attribute ",(0,a.jsx)(n.code,{children:"AsPropertyMapper"})," to a custom method."]}),"\n",(0,a.jsx)(n.h2,{id:"basic-usage",children:"Basic Usage"}),"\n",(0,a.jsx)(n.p,{children:"Example:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-php",children:"use Rekalogika\\Mapper\\Attribute\\AsPropertyMapper;\n\nclass UserMapper\n{\n    #[AsPropertyMapper(\n        targetClass: UserDto::class,\n        property: 'name',\n    )]\n    public function mapName(User $user): string\n    {\n        return strtoupper($user->getFirstName() . ' ' . $user->getLastName());\n    }\n}\n"})}),"\n",(0,a.jsxs)(n.p,{children:["The above example concatenates first name and last name from the source ",(0,a.jsx)(n.code,{children:"User"}),"\nobject, transforms it to uppercase, and returns the result. Mapper will then\nassign the result to the ",(0,a.jsx)(n.code,{children:"name"})," property of the target ",(0,a.jsx)(n.code,{children:"UserDto"})," object, as\nspecified in the arguments of the ",(0,a.jsx)(n.code,{children:"AsPropertyMapper"})," attribute."]}),"\n",(0,a.jsxs)(n.h2,{id:"shorthand-using-aspropertymapper-attached-to-the-class",children:["Shorthand Using ",(0,a.jsx)(n.code,{children:"AsPropertyMapper"})," Attached to the Class"]}),"\n",(0,a.jsxs)(n.p,{children:["If you have many properties to manually map, you can put the ",(0,a.jsx)(n.code,{children:"AsPropertyMapper"}),"\nattribute on the class, and it will apply to all methods in the class. Example:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-php",children:"use Rekalogika\\Mapper\\Attribute\\AsPropertyMapper;\n\n#[AsPropertyMapper(targetClass: UserDto::class)]\nclass UserMapper\n{\n    #[AsPropertyMapper('name')]\n    public function mapName(User $user): string\n    {\n        return strtoupper($user->getFirstName() . ' ' . $user->getLastName());\n    }\n\n    #[AsPropertyMapper('birthDate')]\n    public function mapBirthDate(User $user): string\n    {\n        return $user->getBirthDate()->format('Y-m-d');\n    }\n\n    #[AsPropertyMapper('email')]\n    public function mapEmail(User $user): string\n    {\n        return $user->getEmailAddress();\n    }\n}\n"})}),"\n",(0,a.jsx)(n.h2,{id:"property-name-magic",children:"Property Name Magic"}),"\n",(0,a.jsx)(n.p,{children:"For even more shorthand, you can omit the property name altogether, and the\nmapper will use the method name, stripping the leading 'map' and lowercasing\nthe first letter."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-php",children:"use Rekalogika\\Mapper\\Attribute\\AsPropertyMapper;\n\n#[AsPropertyMapper(targetClass: UserDto::class)]\nclass UserMapper\n{\n    // maps to 'name'\n    #[AsPropertyMapper]\n    public function mapName(User $user): string\n    {\n        return strtoupper($user->getFirstName() . ' ' . $user->getLastName());\n    }\n\n    // maps to 'birthDate'\n    #[AsPropertyMapper]\n    public function mapBirthDate(User $user): string\n    {\n        return $user->getBirthDate()->format('Y-m-d');\n    }\n\n    // maps to 'email\n    #[AsPropertyMapper]\n    public function mapEmail(User $user): string\n    {\n        return $user->getEmailAddress();\n    }\n}\n"})}),"\n",(0,a.jsx)(n.h2,{id:"getting-the-existing-target-value",children:"Getting the Existing Target Value"}),"\n",(0,a.jsx)(n.p,{children:"If you need to get the existing value of the target property, you can add the\noptional second argument to the method. The mapper will pass the existing value\nto the method."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-php",children:"use Rekalogika\\Mapper\\Attribute\\AsPropertyMapper;\n\nclass UserMapper\n{\n    #[AsPropertyMapper(\n        targetClass: User::class,\n        property: 'birthDate',\n    )]\n    public function mapBirthDate(\n        UserDto $userDto,\n        // highlight-next-line\n        ?\\DateTimeInterface $birthDate // this will contain the current value\n    ): \\DateTimeInterface {\n        return new \\DateTimeImmutable($userDto->birthDate);\n    }\n}\n"})}),"\n",(0,a.jsx)(n.admonition,{type:"note",children:(0,a.jsx)(n.p,{children:"If the target property contains an object, you may return the original instance\nor a new instance. If you return a new instance, Mapper will replace the\noriginal instance with the new one."})}),"\n",(0,a.jsx)(n.h2,{id:"extra-arguments",children:"Extra Arguments"}),"\n",(0,a.jsx)(n.p,{children:"You also have the option to inject the main transformer, sub-mapper, and the\ncontext to the property mapper. This can be in any order, but the first argument\nmust be the source object, followed by an optional second argument for the\nexisting target value."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-php",children:"use Rekalogika\\Mapper\\Context\\Context;\nuse Rekalogika\\Mapper\\MainTransformerInterface;\nuse Rekalogika\\Mapper\\Attribute\\AsPropertyMapper;\nuse Rekalogika\\Mapper\\SubMapper\\SubMapperInterface;\n\n#[AsPropertyMapper(targetClass: UserDto::class)]\nclass UserMapper\n{\n    #[AsPropertyMapper]\n    public function mapName(\n        User $user,\n        // highlight-start\n        MainTransformerInterface $mainTransformer,\n        SubMapperInterface $subMapper,\n        Context $context\n        // highlight-end\n    ): string {\n        return strtoupper($user->getFirstName() . ' ' . $user->getLastName());\n    }\n}\n"})}),"\n",(0,a.jsx)(n.h2,{id:"source-union-types",children:"Source Union Types"}),"\n",(0,a.jsx)(n.p,{children:"Union types on the source side are supported."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-php",children:"use Rekalogika\\Mapper\\Attribute\\AsPropertyMapper;\n\nclass AnimalMapper\n{\n    #[AsPropertyMapper(\n        targetClass: AnimalDto::class,\n        property: 'name',\n    )]\n    // highlight-next-line\n    public function mapName(Cat|Dog $animal): string\n    {\n        return $animal->getName();\n    }\n}\n"})}),"\n",(0,a.jsx)(n.h2,{id:"refusing-to-map",children:"Refusing To Map"}),"\n",(0,a.jsxs)(n.p,{children:["If you throw ",(0,a.jsx)(n.code,{children:"RefuseToMapException"})," from the property mapper, the mapper will\nskip mapping the property."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-php",children:"use Rekalogika\\Mapper\\Attribute\\AsPropertyMapper;\nuse Rekalogika\\Mapper\\Exception\\RefuseToMapException;\n\nclass UserMapper\n{\n    #[AsPropertyMapper(\n        targetClass: UserDto::class,\n        property: 'name',\n    )]\n    public function mapName(User $user): string\n    {\n        if ($user->isDeleted()) {\n            // highlight-next-line\n            throw new RefuseToMapException();\n        }\n\n        return strtoupper($user->getFirstName() . ' ' . $user->getLastName());\n    }\n}\n"})}),"\n",(0,a.jsx)(n.h2,{id:"handling-uninitialized-properties",children:"Handling Uninitialized Properties"}),"\n",(0,a.jsx)(n.p,{children:"Because Mapper doesn't know the source property your custom property mapper\nwill be reading from, you need to handle the case if the source property might be\nuninitialized."}),"\n",(0,a.jsxs)(n.p,{children:["Alternatively, you can use the ",(0,a.jsx)(n.code,{children:"ignoreUninitialized"})," argument of\nthe ",(0,a.jsx)(n.code,{children:"AsPropertyMapper"})," attribute to make Mapper ignore any uninitialized\nerrors if it occurs inside your custom property mapper."]}),"\n",(0,a.jsx)(n.p,{children:"Both property mappers below will accomplish the same thing."}),"\n",(0,a.jsx)(n.p,{children:"Manually:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-php",children:"use Rekalogika\\Mapper\\Attribute\\AsPropertyMapper;\nuse Rekalogika\\Mapper\\Exception\\RefuseToMapException;\n\nclass UserMapper\n{\n    #[AsPropertyMapper(\n        targetClass: UserDto::class,\n        property: 'name',\n    )]\n    public function mapName(User $user): string\n    {\n        try {\n            return strtoupper($user->name);\n        } catch (\\Error $e) {\n            if (str_contains($e->getMessage(), 'must not be accessed before initialization')) {\n                throw new RefuseToMapException();\n            }\n\n            throw $e;\n        }\n    }\n}\n"})}),"\n",(0,a.jsxs)(n.p,{children:["With ",(0,a.jsx)(n.code,{children:"ignoreUninitialized"}),":"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-php",children:"use Rekalogika\\Mapper\\Attribute\\AsPropertyMapper;\n\nclass UserMapper\n{\n    #[AsPropertyMapper(\n        targetClass: UserDto::class,\n        property: 'name',\n        // highlight-next-line\n        ignoreUninitialized: true,\n    )]\n    public function mapName(User $user): string\n    {\n        // if $user->name is uninitialized, Mapper will ignore the mapping.\n        return strtoupper($user->name);\n    }\n}\n"})}),"\n",(0,a.jsxs)(n.p,{children:["As you can see, using the ",(0,a.jsx)(n.code,{children:"ignoreUninitialized"})," argument can remove a lot of\nboilerplate code."]}),"\n",(0,a.jsx)(n.h2,{id:"manual-wiring",children:"Manual Wiring"}),"\n",(0,a.jsx)(n.p,{children:"If you don't use autowiring, autoconfiguration, or don't want to use attributes,\nyou can add the service manually like this:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-yaml",metastring:'title="config/services.yaml"',children:"services:\n    App\\Mapper\\UserMapper:\n        tags:\n            -   name: 'rekalogika.mapper.property_mapper'\n                method: 'mapName'\n                sourceClass: 'App\\Entity\\User'\n                targetClass: 'App\\Dto\\UserDto'\n                property: 'name'\n            -   name: 'rekalogika.mapper.property_mapper'\n                method: 'mapBirthDate'\n                sourceClass: 'App\\Entity\\User'\n                targetClass: 'App\\Dto\\UserDto'\n                property: 'birthDate'\n            -   name: 'rekalogika.mapper.property_mapper'\n                method: 'mapEmail'\n                sourceClass: 'App\\Entity\\User'\n                targetClass: 'App\\Dto\\UserDto'\n                property: 'email'\n"})}),"\n",(0,a.jsx)(n.h2,{id:"dumping-property-mapper-table",children:"Dumping Property Mapper Table"}),"\n",(0,a.jsx)(n.p,{children:"To dump the list of all property mappers, run the following command:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"$ bin/console debug:container --tag=rekalogika.mapper.property_mapper\n"})})]})}function u(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(c,{...e})}):c(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>p,x:()=>i});var t=r(6540);const a={},s=t.createContext(a);function p(e){const n=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:p(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);