"use strict";(self.webpackChunkrekalogika_docs=self.webpackChunkrekalogika_docs||[]).push([[9137],{8951:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>u,frontMatter:()=>o,metadata:()=>a,toc:()=>l});var r=t(5893),i=t(1151);const o={title:"Object ID Resolver"},s=void 0,a={id:"file-bundle/advanced/object-id-resolver",title:"Object ID Resolver",description:"An object ID resolver takes an object and returns its ID. The framework uses an",source:"@site/docs/file-bundle/advanced/23-object-id-resolver.md",sourceDirName:"file-bundle/advanced",slug:"/file-bundle/advanced/object-id-resolver",permalink:"/file-bundle/advanced/object-id-resolver",draft:!1,unlisted:!1,editUrl:"https://github.com/rekalogika/rekalogika-docs/edit/main/docs/file-bundle/advanced/23-object-id-resolver.md",tags:[],version:"current",sidebarPosition:23,frontMatter:{title:"Object ID Resolver"},sidebar:"docs",previous:{title:"Creating Filters",permalink:"/file-bundle/advanced/creating-filters"},next:{title:"Marking Entities using Interface",permalink:"/file-bundle/advanced/file-association-interface"}},c={},l=[{value:"Creating An Object ID Resolver",id:"creating-an-object-id-resolver",level:2}];function d(e){const n={admonition:"admonition",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.p,{children:"An object ID resolver takes an object and returns its ID. The framework uses an\nobject ID resolver as one of the parameters used to determine where to store the\nfile."}),"\n",(0,r.jsx)(n.p,{children:"There are two built-in ID resolvers in the framework:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"DoctrineObjectIdResolver"}),": Uses Doctrine's ",(0,r.jsx)(n.code,{children:"ClassMetadata"})," and ",(0,r.jsx)(n.code,{children:"UnitOfWork"}),"\nto determine the ID of the entity."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"DefaultObjectIdResolver"}),": Calls the method ",(0,r.jsx)(n.code,{children:"getId()"})," on the object."]}),"\n"]}),"\n",(0,r.jsx)(n.admonition,{title:"Protip",type:"tip",children:(0,r.jsxs)(n.p,{children:["You can have multiple implementations of ",(0,r.jsx)(n.code,{children:"ObjectIdResolverInterface"})," in your\napplication. The framework will use the first one that returns a value."]})}),"\n",(0,r.jsx)(n.admonition,{type:"info",children:(0,r.jsxs)(n.p,{children:["If you have a custom implementation of ",(0,r.jsx)(n.code,{children:"ObjectIdResolverInterface"}),", the default\nresolvers are still active but have a lower priority than your custom\nimplementation."]})}),"\n",(0,r.jsx)(n.h2,{id:"creating-an-object-id-resolver",children:"Creating An Object ID Resolver"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-php",children:"use Rekalogika\\Contracts\\File\\Association\\ObjectIdResolverInterface;\n\nclass MyObjectIdResolver implements ObjectIdResolverInterface\n{\n    public function getObjectId(object $object): string\n    {\n        // your implementation here\n    }\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"If you are using autoconfiguration, then it is all set. If not, you need to\nregister your class in the service container:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",metastring:'title="config/services.yaml"',children:"services:\n    App\\MyObjectIdResolver:\n        tags:\n            - { name: 'rekalogika.file.association.object_id_resolver' }\n"})})]})}function u(e={}){const{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},1151:(e,n,t)=>{t.d(n,{Z:()=>a,a:()=>s});var r=t(7294);const i={},o=r.createContext(i);function s(e){const n=r.useContext(o);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),r.createElement(o.Provider,{value:n},e.children)}}}]);