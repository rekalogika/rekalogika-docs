"use strict";(self.webpackChunkrekalogika_docs=self.webpackChunkrekalogika_docs||[]).push([[2700],{3178:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>r,default:()=>g,frontMatter:()=>s,metadata:()=>a,toc:()=>l});const a=JSON.parse('{"id":"analytics/aggregate-function/count-sum-max-min","title":"Count, Sum, Max, Min","description":"These are self-decomposable aggregation functions, which are the simplest form","source":"@site/docs/analytics/06-aggregate-function/01-count-sum-max-min.md","sourceDirName":"analytics/06-aggregate-function","slug":"/analytics/aggregate-function/count-sum-max-min","permalink":"/analytics/aggregate-function/count-sum-max-min","draft":false,"unlisted":false,"editUrl":"https://github.com/rekalogika/rekalogika-docs/edit/main/docs/analytics/06-aggregate-function/01-count-sum-max-min.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"title":"Count, Sum, Max, Min"},"sidebar":"docs","previous":{"title":"Aggregate Functions","permalink":"/analytics/aggregate-function/"},"next":{"title":"Average","permalink":"/analytics/aggregate-function/average"}}');var i=t(4848),o=t(8453);const s={title:"Count, Sum, Max, Min"},r=void 0,c={},l=[{value:"Example",id:"example",level:2}];function u(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.p,{children:["These are self-decomposable aggregation functions, which are the simplest form\nof aggregate functions. They all take a string or ",(0,i.jsx)(n.code,{children:"ValueResolver"})," as an\nargument, which must point to the property to be aggregated. A string will be\nconverted to a ",(0,i.jsx)(n.code,{children:"PropertyValue"}),"."]}),"\n",(0,i.jsx)(n.h2,{id:"example",children:"Example"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-php",children:"use Doctrine\\ORM\\Mapping as ORM;\nuse Doctrine\\ORM\\Types\\Types;\nuse Rekalogika\\Analytics\\Core\\AggregateFunction\\Count;\nuse Rekalogika\\Analytics\\Core\\AggregateFunction\\Sum;\nuse Rekalogika\\Analytics\\Core\\Metadata as Analytics;\nuse Rekalogika\\Analytics\\Core\\Entity\\BaseSummary;\nuse Rekalogika\\Analytics\\Core\\ValueResolver\\PropertyValue;\n\nclass OrderSummary extends BaseSummary\n{\n    #[ORM\\Column(type: Types::INTEGER)]\n    #[Analytics\\Measure(\n        // highlight-next-line\n        function: new Sum(new PropertyValue('item.price'),\n    )]\n    private ?int $price = null;\n\n    #[ORM\\Column(type: Types::INTEGER)]\n    #[Analytics\\Measure(\n        // highlight-next-line\n        function: new Count('id'),\n    )]\n    private ?int $count = null;\n}\n"})})]})}function g(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(u,{...e})}):u(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>r});var a=t(6540);const i={},o=a.createContext(i);function s(e){const n=a.useContext(o);return a.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),a.createElement(o.Provider,{value:n},e.children)}}}]);