"use strict";(self.webpackChunkrekalogika_docs=self.webpackChunkrekalogika_docs||[]).push([[6386],{1866:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>l,frontMatter:()=>r,metadata:()=>a,toc:()=>m});const a=JSON.parse('{"id":"mapper/object/immutable-objects","title":"Immutable Objects","description":"Immutable objects are objects whose state cannot be changed after they are","source":"@site/docs/mapper/02-object/06-immutable-objects.md","sourceDirName":"mapper/02-object","slug":"/mapper/object/immutable-objects","permalink":"/mapper/object/immutable-objects","draft":false,"unlisted":false,"editUrl":"https://github.com/rekalogika/rekalogika-docs/edit/main/docs/mapper/02-object/06-immutable-objects.md","tags":[],"version":"current","sidebarPosition":6,"frontMatter":{"title":"Immutable Objects"},"sidebar":"docs","previous":{"title":"Dynamic Properties & Property Overloading","permalink":"/mapper/object/dynamic-properties"},"next":{"title":"Extra Target Values","permalink":"/mapper/object/extra-target-values"}}');var o=n(4848),s=n(8453);const r={title:"Immutable Objects"},i=void 0,c={},m=[];function p(e){const t={admonition:"admonition",p:"p",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.p,{children:"Immutable objects are objects whose state cannot be changed after they are\ncreated. Their state is set during construction and cannot be changed."}),"\n",(0,o.jsx)(t.p,{children:"While the object itself is immutable, it can provide an immutable setter method,\nalso known as a wither method. Rather than returning void or itself, the wither\nmethod returns a new instance of the object with the requested change."}),"\n",(0,o.jsx)(t.p,{children:"Mapper supports these immutable setters, as well as immutable adders and\nremovers. The caveat is that the host object that contains the immutable object\nmust have a setter method that accepts the new instance. Otherwise, Mapper will\ngive a warning."}),"\n",(0,o.jsx)(t.admonition,{type:"note",children:(0,o.jsx)(t.p,{children:"Mapping using property paths does not support immutable setters."})})]})}function l(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(p,{...e})}):p(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>i});var a=n(6540);const o={},s=a.createContext(o);function r(e){const t=a.useContext(s);return a.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),a.createElement(s.Provider,{value:t},e.children)}}}]);