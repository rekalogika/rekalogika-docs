"use strict";(self.webpackChunkrekalogika_docs=self.webpackChunkrekalogika_docs||[]).push([[9283],{4540:(e,i,t)=>{t.r(i),t.d(i,{assets:()=>s,contentTitle:()=>r,default:()=>f,frontMatter:()=>o,metadata:()=>n,toc:()=>c});const n=JSON.parse('{"id":"file/file","title":"Using File & FileRepository","description":"When using this framework, the user will primarily work with the","source":"@site/docs/file/03-file.md","sourceDirName":"file","slug":"/file/file","permalink":"/file/file","draft":false,"unlisted":false,"editUrl":"https://github.com/rekalogika/rekalogika-docs/edit/main/docs/file/03-file.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"title":"Using File & FileRepository"},"sidebar":"docs","previous":{"title":"Concepts & Terms","permalink":"/file/concepts"},"next":{"title":"Adapters","permalink":"/file/adapters"}}');var a=t(4848),l=t(8453);const o={title:"Using File & FileRepository"},r=void 0,s={},c=[{value:"Working With the File Repository",id:"working-with-the-file-repository",level:2},{value:"Create a file",id:"create-a-file",level:3},{value:"Get a file",id:"get-a-file",level:3},{value:"Delete a file",id:"delete-a-file",level:3},{value:"Copy and move a file",id:"copy-and-move-a-file",level:3},{value:"Create a temporary file",id:"create-a-temporary-file",level:3},{value:"Working With a File",id:"working-with-a-file",level:2},{value:"Reading the file&#39;s content",id:"reading-the-files-content",level:3},{value:"Writing to the file, replacing its content",id:"writing-to-the-file-replacing-its-content",level:3},{value:"Renaming the file",id:"renaming-the-file",level:3},{value:"Saving to a local file",id:"saving-to-a-local-file",level:3},{value:"Media type (MIME type) handling",id:"media-type-mime-type-handling",level:3},{value:"File size &amp; last modified time",id:"file-size--last-modified-time",level:3},{value:"Image metadata",id:"image-metadata",level:3},{value:"HTTP metadata",id:"http-metadata",level:3},{value:"Flushing metadata",id:"flushing-metadata",level:3},{value:"File Pointer &amp; comparison",id:"file-pointer--comparison",level:3}];function d(e){const i={admonition:"admonition",code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,l.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsxs)(i.p,{children:["When using this framework, the user will primarily work with the\n",(0,a.jsx)(i.code,{children:"FileRepositoryInterface"})," and ",(0,a.jsx)(i.code,{children:"FileInterface"})," objects."]}),"\n",(0,a.jsx)(i.h2,{id:"working-with-the-file-repository",children:"Working With the File Repository"}),"\n",(0,a.jsx)(i.h3,{id:"create-a-file",children:"Create a file"}),"\n",(0,a.jsx)(i.admonition,{type:"caution",children:(0,a.jsx)(i.p,{children:"These methods overwrite the existing file if it already exists."})}),"\n",(0,a.jsx)(i.pre,{children:(0,a.jsx)(i.code,{className:"language-php",children:"use Rekalogika\\Contracts\\File\\FileRepositoryInterface;\nuse Rekalogika\\File\\FilePointer;\n\n/** @var FileRepositoryInterface $fileRepository */\n\n// Create a file from a string\n$file = $fileRepository->createFromString(\n    new FilePointer('default', 'key'),\n    'Hello World!'\n);\n\n// Create a file from a stream (resource or PSR-7 StreamInterface)\n$file = $fileRepository->createFromStream(\n    new FilePointer('default', 'key'),\n    $stream\n);\n\n// Create a file from a local file\n$file = $fileRepository->createFromLocalFile(\n    new FilePointer('default', 'key'),\n    '/tmp/foo.txt'\n);\n\n"})}),"\n",(0,a.jsx)(i.h3,{id:"get-a-file",children:"Get a file"}),"\n",(0,a.jsx)(i.pre,{children:(0,a.jsx)(i.code,{className:"language-php",children:"use Rekalogika\\Contracts\\File\\FileRepositoryInterface;\nuse Rekalogika\\Contracts\\File\\Exception\\File\\FileNotFoundException;\nuse Rekalogika\\File\\FilePointer;\n\n/** @var FileRepositoryInterface $fileRepository */\n\n// get() will throw an exception if the file is not found\ntry {\n    $file = $fileRepository->get(new FilePointer('default', 'key'));\n} catch (FileNotFoundException $e) {\n    // File not found\n}\n\n// tryGet() will return null if the file is not found\n$file = $fileRepository->tryGet(new FilePointer('default', 'key'));\n\n// With a local file, you can also do it without using file repository:\ntry {\n    $file = new File('/path/to/file');\n} catch (FileNotFoundException $e) {\n    // File not found\n}\n"})}),"\n",(0,a.jsx)(i.h3,{id:"delete-a-file",children:"Delete a file"}),"\n",(0,a.jsx)(i.pre,{children:(0,a.jsx)(i.code,{className:"language-php",children:"use Rekalogika\\Contracts\\File\\FileRepositoryInterface;\nuse Rekalogika\\File\\FilePointer;\n\n/** @var FileRepositoryInterface $fileRepository */\n\n$fileRepository->delete(new FilePointer('default', 'key'));\n"})}),"\n",(0,a.jsx)(i.h3,{id:"copy-and-move-a-file",children:"Copy and move a file"}),"\n",(0,a.jsx)(i.pre,{children:(0,a.jsx)(i.code,{className:"language-php",children:"use Rekalogika\\Contracts\\File\\FileRepositoryInterface;\nuse Rekalogika\\File\\FilePointer;\n\n/** @var FileRepositoryInterface $fileRepository */\n\n$newFile = $fileRepository->copy(\n    new FilePointer('default', 'key'),\n    new FilePointer('otherfilesystem', 'destinationkey')\n);\n\n$newFile = $fileRepository->move(\n    new FilePointer('default', 'key'),\n    new FilePointer('otherfilesystem', 'destinationkey')\n);\n"})}),"\n",(0,a.jsx)(i.admonition,{type:"tip",children:(0,a.jsxs)(i.p,{children:["You can also use a ",(0,a.jsx)(i.code,{children:"FileInterface"})," as the origin or the destination\nof the move or copy operation."]})}),"\n",(0,a.jsx)(i.h3,{id:"create-a-temporary-file",children:"Create a temporary file"}),"\n",(0,a.jsx)(i.pre,{children:(0,a.jsx)(i.code,{className:"language-php",children:"use Rekalogika\\Contracts\\File\\FileRepositoryInterface;\n\n/** @var FileRepositoryInterface $fileRepository */\n\n$file = $fileRepository->createTemporaryFile();\n"})}),"\n",(0,a.jsx)(i.admonition,{type:"note",children:(0,a.jsxs)(i.p,{children:["The temporary file is represented by a special ",(0,a.jsx)(i.code,{children:"TemporaryFile"})," that will be\nautomatically deleted if it is unset or falls out of scope."]})}),"\n",(0,a.jsx)(i.h2,{id:"working-with-a-file",children:"Working With a File"}),"\n",(0,a.jsx)(i.h3,{id:"reading-the-files-content",children:"Reading the file's content"}),"\n",(0,a.jsx)(i.pre,{children:(0,a.jsx)(i.code,{className:"language-php",children:"use Rekalogika\\Contracts\\File\\FileInterface;\n\n/** @var FileInterface $file */\n\n// As a string\n$string = $file->getContent();\n\n// As a stream\n$stream = $file->getContentAsStream();\n\n// getContentAsStream() returns a PSR-7 StreamInterface, to get a plain PHP\n// resource, call detach() on it\n$resource = $stream->detach();\n"})}),"\n",(0,a.jsx)(i.h3,{id:"writing-to-the-file-replacing-its-content",children:"Writing to the file, replacing its content"}),"\n",(0,a.jsx)(i.pre,{children:(0,a.jsx)(i.code,{className:"language-php",children:"use Rekalogika\\Contracts\\File\\FileInterface;\n\n/** @var FileInterface $file */\n\n// From a string\n$file->setContent('Hello World!');\n\n// From a stream or resource\n$file->setContentFromStream($resource);\n"})}),"\n",(0,a.jsx)(i.h3,{id:"renaming-the-file",children:"Renaming the file"}),"\n",(0,a.jsx)(i.pre,{children:(0,a.jsx)(i.code,{className:"language-php",children:"use Rekalogika\\Contracts\\File\\FileInterface;\n\n/** @var FileInterface $file */\n\n$file->setName('my-photo.jpg');\n\n// If you omit the extension, the library will automatically choose the correct\n// extension based on the file's MIME type\n\n$file->setName('my-photo');\n$name = (string) $file->getName(); // my-photo.jpg\n\n// If you absolutely don't want an extension, you can set it directly to the\n// metadata\n\n$file->get(FileMetadataInterface::class)->setName('my-photo');\n$file->flush();\n\n// getName() returns FileNameInterface that provides several convenient methods\n// to get information about the filename\n\n$file->setName('foo.png');\n\n$name = (string) $file->getName(); // foo.png\n$fullName = $file->getName()->getFull(); // foo.png\n$baseName = $file->getName()->getBase(); // foo\n$extension = $file->getName()->getExtension(); // png\n$hasExtension = $file->getName()->hasExtension(); // true\n"})}),"\n",(0,a.jsx)(i.h3,{id:"saving-to-a-local-file",children:"Saving to a local file"}),"\n",(0,a.jsx)(i.pre,{children:(0,a.jsx)(i.code,{className:"language-php",children:"use Rekalogika\\Contracts\\File\\FileInterface;\n\n/** @var FileInterface $file */\n\n// Saves the file to /tmp/foo.txt\n$localFile = $file->saveToLocalFile('/tmp/foo.txt'); \n\n// Saves the file to a temporary file\n$temporaryFile = $file->createLocalTemporaryFile();\n"})}),"\n",(0,a.jsx)(i.h3,{id:"media-type-mime-type-handling",children:"Media type (MIME type) handling"}),"\n",(0,a.jsx)(i.pre,{children:(0,a.jsx)(i.code,{className:"language-php",children:"use Rekalogika\\Contracts\\File\\FileInterface;\n\n/** @var FileInterface $file */\n\n// Setting the MIME type is usally not necessary as the framework will\n// automatically detect media type\n$file->setType('image/jpeg'); // sets the media type to image/jpeg\n\n$type = (string) $file->getType(); // image/jpeg\n$type = $file->getType()->getName(); // image/jpeg\n$type = $file->getType()->getType(); // image\n$type = $file->getType()->getSubType(); // jpeg\n$type = $file->getType()->getCommonExtensions(); // ['jpg', 'jpeg', 'jpe']\n$type = $file->getType()->getExtension(); // jpg\n$type = (string) $file->getType()->getDescription(); // JPEG image\n"})}),"\n",(0,a.jsx)(i.h3,{id:"file-size--last-modified-time",children:"File size & last modified time"}),"\n",(0,a.jsx)(i.pre,{children:(0,a.jsx)(i.code,{className:"language-php",children:"use Rekalogika\\Contracts\\File\\FileInterface;\n\n/** @var FileInterface $file */\n\n// Main metadata\n$size = $file->getSize(); // file size in bytes\n$lastModified = $file->getLastModified(); // last modified time\n"})}),"\n",(0,a.jsx)(i.h3,{id:"image-metadata",children:"Image metadata"}),"\n",(0,a.jsx)(i.pre,{children:(0,a.jsx)(i.code,{className:"language-php",children:"use Rekalogika\\Contracts\\File\\FileInterface;\nuse Rekalogika\\Contracts\\File\\Metadata\\ImageMetadataInterface;\n\n/** @var FileInterface $file */\n\n$width = $file->get(ImageMetadataInterface::class)?->getWidth(); \n$height = $file->get(ImageMetadataInterface::class)?->getHeight(); \n\n// You can also use string identifiers, useful when specifying FQCNs is\n// unwieldy, like in Twig templates\n\n$width = $file->get('imageMetadata')?->getWidth(); \n$height = $file->get('imageMetadata')?->getHeight(); \n"})}),"\n",(0,a.jsx)(i.h3,{id:"http-metadata",children:"HTTP metadata"}),"\n",(0,a.jsx)(i.pre,{children:(0,a.jsx)(i.code,{className:"language-php",children:"use Rekalogika\\Contracts\\File\\FileInterface;\nuse Rekalogika\\Contracts\\File\\Metadata\\HttpMetadataInterface;\n\n/** @var FileInterface $file */\n\n// Setting the disposition value, will be used in the Content-Disposition header\n// when the file is downloaded\n$file->get(HttpMetadataInterface::class)?->setDisposition('attachment'); \n$file->flush();\n\n// Getting all the HTTP headers that will be used when the file is downloaded\n$httpHeaders = $file->get(HttpMetadataInterface::class)?->getHeaders(); \n"})}),"\n",(0,a.jsx)(i.h3,{id:"flushing-metadata",children:"Flushing metadata"}),"\n",(0,a.jsxs)(i.p,{children:["Updating metadata using a high-level method (those on ",(0,a.jsx)(i.code,{children:"FileInterface"}),") will be\nsaved automatically. But using a low-level method (under\n",(0,a.jsx)(i.code,{children:"FileInterface::get()"}),"), you have to call ",(0,a.jsx)(i.code,{children:"flush()"})," manually. You can take\nadvantage of this so that multiple metadata updates are saved in a single round\ntrip."]}),"\n",(0,a.jsx)(i.pre,{children:(0,a.jsx)(i.code,{className:"language-php",children:"use Rekalogika\\Contracts\\File\\FileInterface;\nuse Rekalogika\\Contracts\\File\\Metadata\\HttpMetadataInterface;\n\n/** @var FileInterface $file */\n\n// Each of the following will be flush automatically individually, and will\n// require two roundtrips to the storage backend\n$file->setType('image/jpeg');\n$file->setName('foo.jpg');\n\n// The following needs an explicit flush(). It will only require one roundtrip\n// to the storage backend.\n$file->get(FileMetadataInterface::class)?->setType('image/jpeg'); \n$file->get(FileMetadataInterface::class)?->setName('foo.jpg'); \n$file->flush();\n"})}),"\n",(0,a.jsx)(i.h3,{id:"file-pointer--comparison",children:"File Pointer & comparison"}),"\n",(0,a.jsx)(i.pre,{children:(0,a.jsx)(i.code,{className:"language-php",children:"use Rekalogika\\Contracts\\File\\FileInterface;\n\n/** @var FileInterface $file */\n\n// get pointer from a FileInterface\n$filePointer = $file->getPointer();\n\n// determine if two File/FilePointer objects point to the same file\n$isEqual = $filePointer->isEqualTo($file);\n$isEqual = $file->isEqualTo($filePointer);\n$isEqual = $file1->isEqualTo($file2);\n$isEqual = $filePointer1->isEqualTo($filePointer2);\n"})})]})}function f(e={}){const{wrapper:i}={...(0,l.R)(),...e.components};return i?(0,a.jsx)(i,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},8453:(e,i,t)=>{t.d(i,{R:()=>o,x:()=>r});var n=t(6540);const a={},l=n.createContext(a);function o(e){const i=n.useContext(l);return n.useMemo(function(){return"function"==typeof e?e(i):{...i,...e}},[i,e])}function r(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),n.createElement(l.Provider,{value:i},e.children)}}}]);