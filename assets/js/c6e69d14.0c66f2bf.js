"use strict";(self.webpackChunkrekalogika_docs=self.webpackChunkrekalogika_docs||[]).push([[8189],{5537:(e,n,t)=>{t.d(n,{A:()=>I});var i=t(6540),a=t(4164),l=t(5627),o=t(6347),r=t(372),s=t(604),c=t(1861),d=t(8749);function u(e){return i.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,i.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function h(e){const{values:n,children:t}=e;return(0,i.useMemo)((()=>{const e=n??function(e){return u(e).map((e=>{let{props:{value:n,label:t,attributes:i,default:a}}=e;return{value:n,label:t,attributes:i,default:a}}))}(t);return function(e){const n=(0,c.XI)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,t])}function m(e){let{value:n,tabValues:t}=e;return t.some((e=>e.value===n))}function p(e){let{queryString:n=!1,groupId:t}=e;const a=(0,o.W6)(),l=function(e){let{queryString:n=!1,groupId:t}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:n,groupId:t});return[(0,s.aZ)(l),(0,i.useCallback)((e=>{if(!l)return;const n=new URLSearchParams(a.location.search);n.set(l,e),a.replace({...a.location,search:n.toString()})}),[l,a])]}function g(e){const{defaultValue:n,queryString:t=!1,groupId:a}=e,l=h(e),[o,s]=(0,i.useState)((()=>function(e){let{defaultValue:n,tabValues:t}=e;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!m({value:n,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${t.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const i=t.find((e=>e.default))??t[0];if(!i)throw new Error("Unexpected error: 0 tabValues");return i.value}({defaultValue:n,tabValues:l}))),[c,u]=p({queryString:t,groupId:a}),[g,f]=function(e){let{groupId:n}=e;const t=function(e){return e?`docusaurus.tab.${e}`:null}(n),[a,l]=(0,d.Dv)(t);return[a,(0,i.useCallback)((e=>{t&&l.set(e)}),[t,l])]}({groupId:a}),x=(()=>{const e=c??g;return m({value:e,tabValues:l})?e:null})();(0,r.A)((()=>{x&&s(x)}),[x]);return{selectedValue:o,selectValue:(0,i.useCallback)((e=>{if(!m({value:e,tabValues:l}))throw new Error(`Can't select invalid tab value=${e}`);s(e),u(e),f(e)}),[u,f,l]),tabValues:l}}var f=t(9136);const x={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var b=t(4848);function y(e){let{className:n,block:t,selectedValue:i,selectValue:o,tabValues:r}=e;const s=[],{blockElementScrollPositionUntilNextRender:c}=(0,l.a_)(),d=e=>{const n=e.currentTarget,t=s.indexOf(n),a=r[t].value;a!==i&&(c(n),o(a))},u=e=>{let n=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const t=s.indexOf(e.currentTarget)+1;n=s[t]??s[0];break}case"ArrowLeft":{const t=s.indexOf(e.currentTarget)-1;n=s[t]??s[s.length-1];break}}n?.focus()};return(0,b.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,a.A)("tabs",{"tabs--block":t},n),children:r.map((e=>{let{value:n,label:t,attributes:l}=e;return(0,b.jsx)("li",{role:"tab",tabIndex:i===n?0:-1,"aria-selected":i===n,ref:e=>{s.push(e)},onKeyDown:u,onClick:d,...l,className:(0,a.A)("tabs__item",x.tabItem,l?.className,{"tabs__item--active":i===n}),children:t??n},n)}))})}function j(e){let{lazy:n,children:t,selectedValue:l}=e;const o=(Array.isArray(t)?t:[t]).filter(Boolean);if(n){const e=o.find((e=>e.props.value===l));return e?(0,i.cloneElement)(e,{className:(0,a.A)("margin-top--md",e.props.className)}):null}return(0,b.jsx)("div",{className:"margin-top--md",children:o.map(((e,n)=>(0,i.cloneElement)(e,{key:n,hidden:e.props.value!==l})))})}function v(e){const n=g(e);return(0,b.jsxs)("div",{className:(0,a.A)("tabs-container",x.tabList),children:[(0,b.jsx)(y,{...n,...e}),(0,b.jsx)(j,{...n,...e})]})}function I(e){const n=(0,f.A)();return(0,b.jsx)(v,{...e,children:u(e.children)},String(n))}},8453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>r});var i=t(6540);const a={},l=i.createContext(a);function o(e){const n=i.useContext(l);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),i.createElement(l.Provider,{value:n},e.children)}},9329:(e,n,t)=>{t.d(n,{A:()=>o});t(6540);var i=t(4164);const a={tabItem:"tabItem_Ymn6"};var l=t(4848);function o(e){let{children:n,hidden:t,className:o}=e;return(0,l.jsx)("div",{role:"tabpanel",className:(0,i.A)(a.tabItem,o),hidden:t,children:n})}},9993:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>c,default:()=>m,frontMatter:()=>s,metadata:()=>i,toc:()=>u});const i=JSON.parse('{"id":"file-bundle/collection","title":"Implementing a Collection of Files","description":"This chapter describes how to implement a collection of files, or one-to-many","source":"@site/docs/file-bundle/13-collection.md","sourceDirName":"file-bundle","slug":"/file-bundle/collection","permalink":"/file-bundle/collection","draft":false,"unlisted":false,"editUrl":"https://github.com/rekalogika/rekalogika-docs/edit/main/docs/file-bundle/13-collection.md","tags":[],"version":"current","sidebarPosition":13,"frontMatter":{"title":"Implementing a Collection of Files"},"sidebar":"docs","previous":{"title":"Replicating Metadata in Entities","permalink":"/file-bundle/replicating-metadata-in-entities"},"next":{"title":"Streaming a ZIP File of Files","permalink":"/file-bundle/zip-streaming"}}');var a=t(4848),l=t(8453),o=t(5537),r=t(9329);const s={title:"Implementing a Collection of Files"},c=void 0,d={},u=[{value:"Summary",id:"summary",level:2},{value:"The <code>many-to-one</code> Side",id:"the-many-to-one-side",level:2},{value:"The <code>one-to-many</code> Side",id:"the-one-to-many-side",level:2},{value:"(Optional) Accepting <code>FileInterface</code> in the Adder",id:"optional-accepting-fileinterface-in-the-adder",level:2},{value:"(Optional) Decorate the Collection Using <code>FileCollection</code>",id:"optional-decorate-the-collection-using-filecollection",level:2},{value:"Using The Relation",id:"using-the-relation",level:2},{value:"Indexing and Querying by File Properties",id:"indexing-and-querying-by-file-properties",level:2}];function h(e){const n={a:"a",admonition:"admonition",code:"code",h2:"h2",li:"li",ol:"ol",p:"p",pre:"pre",...(0,l.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.p,{children:"This chapter describes how to implement a collection of files, or one-to-many\nrelation between a Doctrine entity and several files."}),"\n",(0,a.jsx)(n.h2,{id:"summary",children:"Summary"}),"\n",(0,a.jsx)(n.p,{children:"This is what we do to implement a one-to-many relation between an entity and\nseveral files:"}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:["Create a new entity that will represent a file. For convenience, we provide\n",(0,a.jsx)(n.code,{children:"AbstractFile"})," or ",(0,a.jsx)(n.code,{children:"FileTrait"})," that your entity can extend or use."]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsx)(n.p,{children:"Create a one-to-many relation from an entity to the entity in #1."}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(n.admonition,{title:"Preparation",type:"info",children:[(0,a.jsxs)(n.p,{children:["You need to install the package ",(0,a.jsx)(n.code,{children:"rekalogika/file-association-entity"})," to use this\nfeature:"]}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"composer require rekalogika/file-association-entity\n"})})]}),"\n",(0,a.jsxs)(n.h2,{id:"the-many-to-one-side",children:["The ",(0,a.jsx)(n.code,{children:"many-to-one"})," Side"]}),"\n",(0,a.jsxs)(n.p,{children:["In the following example, we will be creating an entity ",(0,a.jsx)(n.code,{children:"Product"})," that will\nhave multiple ",(0,a.jsx)(n.code,{children:"Image"}),"s."]}),"\n",(0,a.jsxs)(n.p,{children:["You will need your ",(0,a.jsx)(n.code,{children:"Product"})," entity to extend ",(0,a.jsx)(n.code,{children:"AbstractFile"}),". Alternatively, if\nyour entity needs to extend another entity, you can use the trait ",(0,a.jsx)(n.code,{children:"FileTrait"}),"\ninstead."]}),"\n",(0,a.jsxs)(o.A,{children:[(0,a.jsxs)(r.A,{value:"abstract",label:"By Extending AbstractFile",children:[(0,a.jsxs)(n.p,{children:["Create the ",(0,a.jsx)(n.code,{children:"Image"})," entity by extending ",(0,a.jsx)(n.code,{children:"AbstractFile"}),". The following are the\nrelevant parts."]}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-php",children:"use Doctrine\\ORM\\Mapping as ORM;\nuse Rekalogika\\Domain\\File\\Association\\Entity\\AbstractFile;\n\n#[ORM\\Entity]\nclass Image extends AbstractFile\n{\n    // ...\n\n    #[ORM\\ManyToOne(inversedBy: 'images')]\n    #[ORM\\JoinColumn(nullable: false)]\n    private ?Product $product = null;\n\n    public function getProduct(): ?Product\n    {\n        return $this->product;\n    }\n\n    public function setProduct(?Product $product): static\n    {\n        $this->product = $product;\n\n        return $this;\n    }\n\n    // ...\n}\n"})})]}),(0,a.jsxs)(r.A,{value:"trait",label:"By Using FileTrait",children:[(0,a.jsxs)(n.p,{children:["Create the ",(0,a.jsx)(n.code,{children:"Image"})," entity by using the ",(0,a.jsx)(n.code,{children:"FileTrait"}),". The following are the\nrelevant parts."]}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-php",children:"use Doctrine\\ORM\\Mapping as ORM;\nuse Rekalogika\\Domain\\File\\Association\\Entity\\AbstractFile;\nuse Rekalogika\\Contracts\\File\\FileInterface;\nuse Rekalogika\\File\\Association\\Attribute\\WithFileAssociation;\n\n#[ORM\\Entity]\n#[WithFileAssociation]\nclass Image implements FileInterface\n{\n    use FileTrait;\n\n    #[ORM\\ManyToOne(inversedBy: 'images')]\n    #[ORM\\JoinColumn(nullable: false)]\n    private ?Product $product = null;\n\n    public function getProduct(): ?Product\n    {\n        return $this->product;\n    }\n\n    public function setProduct(?Product $product): static\n    {\n        $this->product = $product;\n\n        return $this;\n    }\n}\n"})}),(0,a.jsx)(n.p,{children:"If you don't use attributes to configure your Doctrine mappings, you will need\nto add the following configuration to the Doctrine's mapping configuration."}),(0,a.jsx)(o.A,{children:(0,a.jsx)(r.A,{value:"xml",label:"XML",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-markup",children:'<doctrine-mapping>\n    \x3c!-- ... --\x3e\n    <entity name="Image">\n        \x3c!-- ... --\x3e\n        <embedded\n             name="metadata"\n             class="Rekalogika\\Domain\\File\\Association\\Entity\\EmbeddedMetadata" />\n    </entity>\n    \x3c!-- ... --\x3e\n</doctrine-mapping>\n'})})})})]})]}),"\n",(0,a.jsxs)(n.h2,{id:"the-one-to-many-side",children:["The ",(0,a.jsx)(n.code,{children:"one-to-many"})," Side"]}),"\n",(0,a.jsx)(n.p,{children:"The relevant parts:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-php",children:"use Doctrine\\Common\\Collections\\ArrayCollection;\nuse Doctrine\\Common\\Collections\\Collection;\nuse Doctrine\\ORM\\Mapping as ORM;\n\n#[ORM\\Entity]\nclass Product\n{\n    // ...\n\n    #[ORM\\OneToMany(mappedBy: 'product', targetEntity: Image::class, orphanRemoval: true)]\n    private Collection $images;\n\n    public function __construct()\n    {\n        $this->images = new ArrayCollection();\n    }\n\n    /**\n     * @return Collection<int, Image>\n     */\n    public function getImages(): Collection\n    {\n        return $this->images;\n    }\n\n    public function addImage(Image $image): static\n    {\n        if (!$this->images->contains($image)) {\n            $this->images->add($image);\n            $image->setProduct($this);\n        }\n\n        return $this;\n    }\n\n    public function removeImage(Image $image): static\n    {\n        if ($this->images->removeElement($image)) {\n            // set the owning side to null (unless already changed)\n            if ($image->getProduct() === $this) {\n                $image->setProduct(null);\n            }\n        }\n\n        return $this;\n    }\n\n    // ...\n}\n"})}),"\n",(0,a.jsxs)(n.h2,{id:"optional-accepting-fileinterface-in-the-adder",children:["(Optional) Accepting ",(0,a.jsx)(n.code,{children:"FileInterface"})," in the Adder"]}),"\n",(0,a.jsxs)(n.p,{children:["For convenience, you might also want to modify the adder ",(0,a.jsx)(n.code,{children:"addImage"})," above so\nthat it also accepts an instance of ",(0,a.jsx)(n.code,{children:"FileInterface"}),":"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-php",children:"use Rekalogika\\Contracts\\File\\FileInterface;\n\nclass Product\n{\n    // ...\n\n    // highlight-next-line\n    public function addImage(Image|FileInterface $image): static\n    {\n        // highlight-start\n        if (!$image instanceof Image) {\n            $image = new Image($image);\n        }\n        // highlight-end\n\n        if (!$this->images->contains($image)) {\n            $this->images->add($image);\n            $image->setProduct($this);\n        }\n\n        return $this;\n    }\n\n    // ...\n}\n"})}),"\n",(0,a.jsxs)(n.h2,{id:"optional-decorate-the-collection-using-filecollection",children:["(Optional) Decorate the Collection Using ",(0,a.jsx)(n.code,{children:"FileCollection"})]}),"\n",(0,a.jsxs)(n.p,{children:["In the getter, you can also return a ",(0,a.jsx)(n.code,{children:"FileCollection"})," wrapping the original\ncollection, and change the type hint. Then, the caller will be able to know that\nthe Collection contains files and also an instance of ",(0,a.jsx)(n.code,{children:"DirectoryInterface"}),"."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-php",children:"use Rekalogika\\Domain\\File\\Association\\Entity\\FileCollection;\n\nclass Product\n{\n    // ...\n\n    /**\n     * @return FileCollection<int,Image>\n     */\n    public function getImages(): FileCollection\n    {\n        return new FileCollection(\n            $this->images,\n            sprintf('product %s images', $this->getName())\n        );\n    }\n\n    // ...\n}\n"})}),"\n",(0,a.jsxs)(n.admonition,{type:"info",children:[(0,a.jsxs)(n.p,{children:["The second argument of ",(0,a.jsx)(n.code,{children:"FileCollection"})," is the name of the file collection,\nand will be used for the directory name, ZIP file name, etc."]}),(0,a.jsxs)(n.p,{children:["Read the chapter ",(0,a.jsx)(n.a,{href:"zip-streaming",children:"Stream a ZIP File"})," if you need to download\nan entire collection as a ZIP file."]})]}),"\n",(0,a.jsx)(n.admonition,{title:"Protip",type:"tip",children:(0,a.jsxs)(n.p,{children:["There is also ",(0,a.jsx)(n.code,{children:"ReadableFileCollection"}),", which is the read-only flavor of\n",(0,a.jsx)(n.code,{children:"FileCollection"}),"."]})}),"\n",(0,a.jsx)(n.h2,{id:"using-the-relation",children:"Using The Relation"}),"\n",(0,a.jsxs)(n.p,{children:["By following the guide above, your ",(0,a.jsx)(n.code,{children:"Image"})," entity is a ",(0,a.jsx)(n.code,{children:"FileInterface"}),".\nTherefore, with the example above, you can treat the ",(0,a.jsx)(n.code,{children:"Image"})," entity as a file."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-php",children:"use Rekalogika\\File\\File;\n\n$product = new Product();\n$image1 = new File('product_image_1.jpg');\n$image2 = new File('product_image_2.jpg');\n$image3 = new File('product_image_3.jpg');\n\n$product\n    ->addImage($image1)\n    ->addImage($image2)\n    ->addImage($image3);\n\nforeach ($product->getImages() as $image) {\n    $name = $image->getName(); // product_image_1.jpg, etc.\n    $description = $image->getType()->getDescription(); // \"JPEG image\", etc.\n}\n"})}),"\n",(0,a.jsx)(n.h2,{id:"indexing-and-querying-by-file-properties",children:"Indexing and Querying by File Properties"}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"AbstractFile"})," uses ",(0,a.jsx)(n.code,{children:"EmbeddedMetadata"})," under the hood. Read more about it in the\n",(0,a.jsx)(n.a,{href:"replicating-metadata-in-entities",children:"Replicating Metadata in Entities"})," section."]})]})}function m(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(h,{...e})}):h(e)}}}]);