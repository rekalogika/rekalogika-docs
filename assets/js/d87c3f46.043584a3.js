"use strict";(self.webpackChunkrekalogika_docs=self.webpackChunkrekalogika_docs||[]).push([[6470],{5682:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>d,contentTitle:()=>r,default:()=>x,frontMatter:()=>s,metadata:()=>a,toc:()=>h});var t=i(5893),o=i(1151),c=i(4996),l=i(9965);const s={title:"Interfaces"},r=void 0,a={id:"collections/interfaces",title:"Interfaces",description:"Interfaces implemented by classes in this package.",source:"@site/docs/collections/01-interfaces.md",sourceDirName:"collections",slug:"/collections/interfaces",permalink:"/collections/interfaces",draft:!1,unlisted:!1,editUrl:"https://github.com/rekalogika/rekalogika-docs/edit/main/docs/collections/01-interfaces.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{title:"Interfaces"},sidebar:"docs",previous:{title:"Introduction",permalink:"/collections/intro"},next:{title:"Implementations",permalink:"/collections/implementations/"}},d={},h=[{value:"<code>Recollection</code>",id:"recollection",level:2},{value:"<code>MinimalRecollection</code>",id:"minimalrecollection",level:2},{value:"<code>PageableRecollection</code>",id:"pageablerecollection",level:2},{value:"<code>Repository</code>",id:"repository",level:2},{value:"<code>MinimalRepository</code>",id:"minimalrepository",level:2}];function m(e){const n={admonition:"admonition",code:"code",h2:"h2",li:"li",p:"p",ul:"ul",...(0,o.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.p,{children:"Interfaces implemented by classes in this package."}),"\n",(0,t.jsx)(n.h2,{id:"recollection",children:(0,t.jsx)(n.code,{children:"Recollection"})}),"\n",(0,t.jsxs)(n.p,{children:["This package improves Doctrine Collections by extending the ",(0,t.jsx)(n.code,{children:"Collection"}),"\ninterface with additional methods. We call this new interface ",(0,t.jsx)(n.code,{children:"Recollection"}),"."]}),"\n",(0,t.jsx)(l.Z,{alt:"File classes",sources:{light:(0,c.ZP)("/diagrams/light/collections-recollection.svg"),dark:(0,c.ZP)("/diagrams/dark/collections-recollection.svg")},width:"100%"}),"\n",(0,t.jsxs)(n.p,{children:["In Doctrine ",(0,t.jsx)(n.code,{children:"Collection"}),", the following methods accept ",(0,t.jsx)(n.code,{children:"int|string"})," as the argument. In\n",(0,t.jsx)(n.code,{children:"Recollection"}),", they are overriden, and these arguments are widen to ",(0,t.jsx)(n.code,{children:"mixed"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"containsKey($key)"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"get($key)"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"remove($key)"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"set($key, $value)"})}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["By the widening, it can now accept UUID objects as the key. Decorators will\nautomatically transform the UUID to the format expected by the underlying\n",(0,t.jsx)(n.code,{children:"Collection"}),". Also, by accepting ",(0,t.jsx)(n.code,{children:"mixed"}),", the caller does not need to perform\ntype checking, avoiding a lot of boilerplate code."]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"Recollection"})," adds these new methods:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"fetch($key)"}),": Similar to ",(0,t.jsx)(n.code,{children:"get($key)"}),", but throws an exception if the object\nis not found. If uncaught in a web application, this exception will\nautomatically be converted to a 404 response, which will further avoid\nboilerplate code."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"refreshCount()"}),": Recalculates the count of the collection. The exact behavior\ndepends on the provided counting strategy."]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["It also extends ",(0,t.jsx)(n.code,{children:"PageableInterface"})," which enables pagination support."]}),"\n",(0,t.jsx)(n.h2,{id:"minimalrecollection",children:(0,t.jsx)(n.code,{children:"MinimalRecollection"})}),"\n",(0,t.jsxs)(n.p,{children:["A minimal version of ",(0,t.jsx)(n.code,{children:"Recollection"})," that does not extend Doctrine ",(0,t.jsx)(n.code,{children:"Collection"}),"\nbut retains its safe methods with compatible signature. These are the methods\nthat should never trigger full initialization of an extra-lazy ",(0,t.jsx)(n.code,{children:"Collection"}),"."]}),"\n",(0,t.jsx)(n.p,{children:"The idea is that if a collection becomes too large, you can simply switch to the\ncorresponding minimal version, run static analysis, and deal with the parts of\nyour code that still call non-safe methods."}),"\n",(0,t.jsx)(l.Z,{alt:"File classes",sources:{light:(0,c.ZP)("/diagrams/light/collections-minimal-recollection.svg"),dark:(0,c.ZP)("/diagrams/dark/collections-minimal-recollection.svg")},width:"100%"}),"\n",(0,t.jsx)(n.admonition,{type:"warning",children:(0,t.jsxs)(n.p,{children:["This interface will be updated if Doctrine adds new safe methods in the future.\nCurrently, the glaring omissions are the ",(0,t.jsx)(n.code,{children:"remove"})," and ",(0,t.jsx)(n.code,{children:"removeElement"})," methods.\nWe expect them to be added to Doctrine ORM sooner or later."]})}),"\n",(0,t.jsx)(n.h2,{id:"pageablerecollection",children:(0,t.jsx)(n.code,{children:"PageableRecollection"})}),"\n",(0,t.jsxs)(n.p,{children:["An extra-minimal version of ",(0,t.jsx)(n.code,{children:"Recollection"})," that only extends ",(0,t.jsx)(n.code,{children:"PageableInterface"}),"."]}),"\n",(0,t.jsx)(l.Z,{alt:"File classes",sources:{light:(0,c.ZP)("/diagrams/light/collections-pageable-recollection.svg"),dark:(0,c.ZP)("/diagrams/dark/collections-pageable-recollection.svg")},width:"100%"}),"\n",(0,t.jsx)(n.h2,{id:"repository",children:(0,t.jsx)(n.code,{children:"Repository"})}),"\n",(0,t.jsxs)(n.p,{children:["An alternative implementation of the repository pattern using the ",(0,t.jsx)(n.code,{children:"Recollection"}),"\ninterface. You can treat the repository like a regular collection."]}),"\n",(0,t.jsx)(l.Z,{alt:"File classes",sources:{light:(0,c.ZP)("/diagrams/light/collections-repository.svg"),dark:(0,c.ZP)("/diagrams/dark/collections-repository.svg")},width:"100%"}),"\n",(0,t.jsx)(n.p,{children:"It adds one new method:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"reference($key)"}),": Creates a reference, or a proxy object, to the object\nidentified by the given key. This method has the same function as the\n",(0,t.jsx)(n.code,{children:"EntityManagerInterface::getReference()"})," method."]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"minimalrepository",children:(0,t.jsx)(n.code,{children:"MinimalRepository"})}),"\n",(0,t.jsxs)(n.p,{children:["The minimal flavor of ",(0,t.jsx)(n.code,{children:"Repository"})," above."]}),"\n",(0,t.jsx)(l.Z,{alt:"File classes",sources:{light:(0,c.ZP)("/diagrams/light/collections-minimal-repository.svg"),dark:(0,c.ZP)("/diagrams/dark/collections-minimal-repository.svg")},width:"100%"}),"\n",(0,t.jsx)(n.p,{children:"It adds these new methods:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"reference($key)"}),": Creates a reference, or a proxy object, to the object\nidentified by the given key. This method has the same function as the\n",(0,t.jsx)(n.code,{children:"EntityManagerInterface::getReference()"})," method."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"remove($key)"}),": Removes the object identified by the given key."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"removeElement($element)"}),": Removes the given element from the repository."]}),"\n"]})]})}function x(e={}){const{wrapper:n}={...(0,o.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(m,{...e})}):m(e)}},1151:(e,n,i)=>{i.d(n,{Z:()=>s,a:()=>l});var t=i(7294);const o={},c=t.createContext(o);function l(e){const n=t.useContext(c);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:l(e.components),t.createElement(c.Provider,{value:n},e.children)}}}]);