"use strict";(self.webpackChunkrekalogika_docs=self.webpackChunkrekalogika_docs||[]).push([[2592],{168:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>a,default:()=>u,frontMatter:()=>o,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"analytics/query/querying","title":"Querying","description":"To work with the summary entities, we interact with the service","source":"@site/docs/analytics/04-query/01-querying.md","sourceDirName":"analytics/04-query","slug":"/analytics/query/querying","permalink":"/analytics/query/querying","draft":false,"unlisted":false,"editUrl":"https://github.com/rekalogika/rekalogika-docs/edit/main/docs/analytics/04-query/01-querying.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"title":"Querying"},"sidebar":"docs","previous":{"title":"Queries","permalink":"/analytics/query/"},"next":{"title":"Data Cube Result","permalink":"/analytics/query/cube-result"}}');var s=n(4848),i=n(8453);const o={title:"Querying"},a=void 0,d={},c=[{value:"Querying the Summary",id:"querying-the-summary",level:2},{value:"Query Methods",id:"query-methods",level:2},{value:"<code>from</code>",id:"from",level:3},{value:"<code>groupBy</code> and <code>addGroupBy</code>",id:"groupby-and-addgroupby",level:3},{value:"<code>select</code> and <code>addSelect</code>",id:"select-and-addselect",level:3},{value:"<code>where</code> and <code>andWhere</code>",id:"where-and-andwhere",level:3},{value:"The <code>Result</code> Object",id:"the-result-object",level:2}];function l(e){const t={code:"code",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(t.p,{children:["To work with the summary entities, we interact with the service\n",(0,s.jsx)(t.code,{children:"SummaryManager"}),"."]}),"\n",(0,s.jsx)(t.h2,{id:"querying-the-summary",children:"Querying the Summary"}),"\n",(0,s.jsxs)(t.p,{children:["You can query the summary entity using the ",(0,s.jsx)(t.code,{children:"createQuery"})," method. The method\nreturns an instance of ",(0,s.jsx)(t.code,{children:"Query"})," that you can use to build your query."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-php",children:"use Doctrine\\Common\\Collections\\Criteria;\nuse Rekalogika\\Analytics\\Contracts\\SummaryManager;\n\n/** @var SummaryManager $summaryManager */\n\n$result = $summaryManager\n    ->createQuery()\n    ->from(OrderSummary::class) // the summary entity class name\n    ->groupBy('time.year', 'customerCountry') // property names of the dimension\n    ->select('price', 'count') // property names of the measures\n    ->where(Criteria::expr()->eq('time.year', 2023))\n    ->getResult();\n"})}),"\n",(0,s.jsxs)(t.p,{children:["The result is an instance of ",(0,s.jsx)(t.code,{children:"Result"}),". It presents the query result in two\nshapes, for user convenience:"]}),"\n",(0,s.jsxs)(t.ol,{children:["\n",(0,s.jsx)(t.li,{children:"Data cube format"}),"\n",(0,s.jsx)(t.li,{children:"Table format."}),"\n"]}),"\n",(0,s.jsx)(t.h2,{id:"query-methods",children:"Query Methods"}),"\n",(0,s.jsxs)(t.p,{children:["The methods of the ",(0,s.jsx)(t.code,{children:"Query"})," object are modeled after the Doctrine ",(0,s.jsx)(t.code,{children:"QueryBuilder"}),"\nmethods. The methods are chainable, so you can write the query in a fluent\nstyle."]}),"\n",(0,s.jsx)(t.h3,{id:"from",children:(0,s.jsx)(t.code,{children:"from"})}),"\n",(0,s.jsxs)(t.p,{children:["The ",(0,s.jsx)(t.code,{children:"from"})," method is used to specify the summary entity class that you want to\nquery."]}),"\n",(0,s.jsxs)(t.h3,{id:"groupby-and-addgroupby",children:[(0,s.jsx)(t.code,{children:"groupBy"})," and ",(0,s.jsx)(t.code,{children:"addGroupBy"})]}),"\n",(0,s.jsxs)(t.p,{children:["The ",(0,s.jsx)(t.code,{children:"groupBy"})," method is used to specify the dimensions of the query. The\ndimension name is the same as the property name of your summary class. The order\nin ",(0,s.jsx)(t.code,{children:"groupBy"})," is important, and will be used to determine the order of the\ndimensions in the result."]}),"\n",(0,s.jsxs)(t.h3,{id:"select-and-addselect",children:[(0,s.jsx)(t.code,{children:"select"})," and ",(0,s.jsx)(t.code,{children:"addSelect"})]}),"\n",(0,s.jsxs)(t.p,{children:["The ",(0,s.jsx)(t.code,{children:"select"})," method is used to specify the measures of the query. Again, the\nmeasure name is the name of the property in the summary class."]}),"\n",(0,s.jsxs)(t.h3,{id:"where-and-andwhere",children:[(0,s.jsx)(t.code,{children:"where"})," and ",(0,s.jsx)(t.code,{children:"andWhere"})]}),"\n",(0,s.jsxs)(t.p,{children:["The ",(0,s.jsx)(t.code,{children:"where"})," method is used to filter the data. The method accepts a Doctrine\nCriteria ",(0,s.jsx)(t.code,{children:"Expression"})," object."]}),"\n",(0,s.jsxs)(t.h2,{id:"the-result-object",children:["The ",(0,s.jsx)(t.code,{children:"Result"})," Object"]}),"\n",(0,s.jsxs)(t.p,{children:["The ",(0,s.jsx)(t.code,{children:"Result"})," object provides the user with methods to get the data in the\nuser's preferred format."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-php",children:"use Rekalogika\\Analytics\\Contracts\\Result\\Result;\n\n/** @var Result $result */\n\n// Get the result in the data cube format\n$tree = $result->getCube();\n\n// Get the result in the table format\n$table = $result->getTable();\n"})})]})}function u(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>o,x:()=>a});var r=n(6540);const s={},i=r.createContext(s);function o(e){const t=r.useContext(i);return r.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),r.createElement(i.Provider,{value:t},e.children)}}}]);