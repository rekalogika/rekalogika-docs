"use strict";(self.webpackChunkrekalogika_docs=self.webpackChunkrekalogika_docs||[]).push([[400],{286:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>r,contentTitle:()=>a,default:()=>h,frontMatter:()=>l,metadata:()=>o,toc:()=>d});const o=JSON.parse('{"id":"file-bundle/symfony","title":"Integration With Symfony Components","description":"This chapter describes how to integrate this framework with the typical Symfony","source":"@site/docs/file-bundle/06-symfony.md","sourceDirName":"file-bundle","slug":"/file-bundle/symfony","permalink":"/file-bundle/symfony","draft":false,"unlisted":false,"editUrl":"https://github.com/rekalogika/rekalogika-docs/edit/main/docs/file-bundle/06-symfony.md","tags":[],"version":"current","sidebarPosition":6,"frontMatter":{"title":"Integration With Symfony Components"},"sidebar":"docs","previous":{"title":"File Uploads Using FilePond","permalink":"/file-bundle/file-upload-filepond"},"next":{"title":"Serving Files","permalink":"/file-bundle/serving-files"}}');var t=i(4848),s=i(8453);const l={title:"Integration With Symfony Components"},a=void 0,r={},d=[{value:"Components Summary",id:"components-summary",level:2},{value:"Adapters",id:"adapters",level:2},{value:"Streaming a <code>FileInterface</code>",id:"streaming-a-fileinterface",level:2},{value:"Forms",id:"forms",level:2},{value:"Validators",id:"validators",level:2}];function c(e){const n={a:"a",admonition:"admonition",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.p,{children:"This chapter describes how to integrate this framework with the typical Symfony\ncomponents used to work with files."}),"\n",(0,t.jsxs)(n.admonition,{title:"Preparation",type:"info",children:[(0,t.jsxs)(n.p,{children:["To enable this feature, you need to install the package\n",(0,t.jsx)(n.code,{children:"rekalogika/file-symfony-bridge"}),":"]}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"composer require rekalogika/file-symfony-bridge\n"})})]}),"\n",(0,t.jsx)(n.h2,{id:"components-summary",children:"Components Summary"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Adapters to convert HttpFoundation ",(0,t.jsx)(n.code,{children:"File"})," objects to a ",(0,t.jsx)(n.code,{children:"FileInterface"})," and\nvice versa, with special handling for ",(0,t.jsx)(n.code,{children:"UploadedFile"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"FileResponse"})," for streaming a ",(0,t.jsx)(n.code,{children:"FileInterface"})," to the client web browser."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"FileType"})," form that works with ",(0,t.jsx)(n.code,{children:"FileInterface"})," objects."]}),"\n",(0,t.jsxs)(n.li,{children:["A form transformer ",(0,t.jsx)(n.code,{children:"FileTransformer"})," that you can add to an existing Symfony\n",(0,t.jsx)(n.code,{children:"FileType"})," fields so that it gives us a ",(0,t.jsx)(n.code,{children:"FileInterface"})," instead of a\n",(0,t.jsx)(n.code,{children:"UploadedFile"})," object."]}),"\n",(0,t.jsxs)(n.li,{children:["A form extension ",(0,t.jsx)(n.code,{children:"FileTypeExtension"})," that you can optionally register to\nautomatically convert all the existing Symfony ",(0,t.jsx)(n.code,{children:"FileType"})," so they all give us\na ",(0,t.jsx)(n.code,{children:"FileInterface"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:["Subclassed ",(0,t.jsx)(n.code,{children:"FileValidator"})," and ",(0,t.jsx)(n.code,{children:"ImageValidator"})," that works with\n",(0,t.jsx)(n.code,{children:"FileInterface"})," objects."]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"adapters",children:"Adapters"}),"\n",(0,t.jsxs)(n.p,{children:["Converts a HttpFoundation ",(0,t.jsx)(n.code,{children:"File"})," (and child classes, including ",(0,t.jsx)(n.code,{children:"UploadedFile"}),")\nto a ",(0,t.jsx)(n.code,{children:"FileInterface"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-php",children:"use Rekalogika\\File\\Bridge\\Symfony\\HttpFoundation\\FromHttpFoundationFileAdapter;\nuse Symfony\\Component\\HttpFoundation\\File\\File;\n\n/** @var File $httpFoundationFile */\n\n$file = FromHttpFoundationFileAdapter::adapt($httpFoundationFile);\n"})}),"\n",(0,t.jsx)(n.p,{children:"However, it is more convenient to use the universal adapter instead, although\nthe universal adapter still needs this package to be installed."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-php",children:"use Symfony\\Component\\HttpFoundation\\File\\File;\nuse Rekalogika\\File\\FileAdapter;\n\n/** @var File $httpFoundationFile */\n\n$file = FileAdapter::adapt($httpFoundationFile);\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Converts a ",(0,t.jsx)(n.code,{children:"FileInterface"})," to a HttpFoundation ",(0,t.jsx)(n.code,{children:"File"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-php",children:"use Rekalogika\\File\\Bridge\\Symfony\\HttpFoundation\\ToHttpFoundationFileAdapter;\nuse Rekalogika\\Contracts\\File\\FileInterface;\n\n/** @var FileInterface $file */\n\n$httpFoundationFile = ToHttpFoundationFileAdapter::adapt($file);\n"})}),"\n",(0,t.jsxs)(n.h2,{id:"streaming-a-fileinterface",children:["Streaming a ",(0,t.jsx)(n.code,{children:"FileInterface"})]}),"\n",(0,t.jsxs)(n.p,{children:["To stream a ",(0,t.jsx)(n.code,{children:"FileInterface"})," to the client's web browser, you can use\n",(0,t.jsx)(n.code,{children:"FileResponse"}),"."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-php",children:"use Rekalogika\\File\\Bridge\\Symfony\\HttpFoundation\\FileResponse;\nuse Rekalogika\\Contracts\\File\\FileInterface;\nuse Symfony\\Component\\HttpFoundation\\Response;\n\nclass SomeController\n{\n    public function download(): Response\n    {\n        /** @var FileInterface $file */\n        $file = ...;\n\n        return new FileResponse($file);\n    }\n}\n"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"FileResponse"})," accepts additional optional parameters:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"$status"}),": HTTP status code. Default: ",(0,t.jsx)(n.code,{children:"200"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"$headers"}),": Array of additional headers. Default: ",(0,t.jsx)(n.code,{children:"[]"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"$disposition"}),": Force the first parameter of the ",(0,t.jsx)(n.code,{children:"Content-Disposition"})," header\nto the specified value. It can be ",(0,t.jsx)(n.code,{children:"attachment"})," or ",(0,t.jsx)(n.code,{children:"inline"}),". The filename is\nautomatically taken from the metadata."]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"forms",children:"Forms"}),"\n",(0,t.jsx)(n.admonition,{title:"Protip",type:"tip",children:(0,t.jsxs)(n.p,{children:["You might want to use our ",(0,t.jsx)(n.code,{children:"FilePondType"})," form type instead. See the chapter\n",(0,t.jsx)(n.a,{href:"./file-upload-filepond",children:"File Upload With FilePond"})," for more information."]})}),"\n",(0,t.jsxs)(n.p,{children:["We provide a ",(0,t.jsx)(n.code,{children:"FileType"})," that works with ",(0,t.jsx)(n.code,{children:"FileInterface"})," objects. This is\nbasically the same as Symfony's ",(0,t.jsx)(n.code,{children:"FileType"})," with a transformer built-in:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-php",children:"use Rekalogika\\File\\Bridge\\Symfony\\Form\\FileType;\nuse Symfony\\Component\\Form\\AbstractType;\nuse Symfony\\Component\\Form\\FormBuilderInterface;\n\nclass SomeFormType extends AbstractType\n{\n    public function buildForm(FormBuilderInterface $builder, array $options): void\n    {\n        $builder\n            // ...\n            ->add('file', FileType::class, [\n                // ...\n            ])\n        ;\n    }\n}\n"})}),"\n",(0,t.jsxs)(n.p,{children:["If for some reason you cannot change the form type, you can use\n",(0,t.jsx)(n.code,{children:"FileTransformer"})," to transform existing fields. It should work with Symfony's\n",(0,t.jsx)(n.code,{children:"FileType"})," and any third-party form types with a compatible behavior:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-php",children:"use Rekalogika\\File\\Bridge\\Symfony\\Form\\FileTransformer;\nuse Symfony\\Component\\Form\\Extension\\Core\\Type\\FileType;\nuse Symfony\\Component\\Form\\AbstractType;\nuse Symfony\\Component\\Form\\FormBuilderInterface;\n\nclass SomeFormType extends AbstractType\n{\n    public function buildForm(FormBuilderInterface $builder, array $options): void\n    {\n        $builder\n            ->add('file', FileType::class, [\n                // ...\n            ]);\n\n        $builder->get('file')->addModelTransformer(new FileTransformer());\n    }\n}\n"})}),"\n",(0,t.jsxs)(n.p,{children:["You can also modify all the existing Symfony's ",(0,t.jsx)(n.code,{children:"FileType"})," fields en masse by\nregistering the ",(0,t.jsx)(n.code,{children:"FileTypeExtension"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",metastring:'title="config/services.yaml"',children:"services:\n    Rekalogika\\File\\Bridge\\Symfony\\Form\\FileTypeExtension:\n        tags:\n            - { name: form.type_extension }\n"})}),"\n",(0,t.jsx)(n.h2,{id:"validators",children:"Validators"}),"\n",(0,t.jsxs)(n.p,{children:["We provide ",(0,t.jsx)(n.code,{children:"File"})," and ",(0,t.jsx)(n.code,{children:"Image"})," validators. They are the same as Symfony's\n",(0,t.jsx)(n.code,{children:"File"})," and ",(0,t.jsx)(n.code,{children:"Image"})," validators, except that they work with ",(0,t.jsx)(n.code,{children:"FileInterface"}),"\nobjects instead of HttpFoundation ",(0,t.jsx)(n.code,{children:"File"})," objects:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-php",children:"use Rekalogika\\Contracts\\File\\FileInterface;\nuse Rekalogika\\File\\Bridge\\Symfony\\Constraints\\File as FileConstraint;\nuse Rekalogika\\File\\Bridge\\Symfony\\Constraints\\Image as ImageConstraint;\n\nclass Product\n{\n    #[ImageConstraint(minWidth: '1000']\n    private ?FileInterface $photo = null;\n\n    #[ImageConstraint(maxSize: '10000k']\n    private ?FileInterface $manual = null;\n\n    // ...\n}\n"})}),"\n",(0,t.jsx)(n.admonition,{type:"caution",children:(0,t.jsx)(n.p,{children:"Due to how the adapters work, some validator functions might not work\ncorrectly, like those that check file names."})})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>l,x:()=>a});var o=i(6540);const t={},s=o.createContext(t);function l(e){const n=o.useContext(s);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:l(e.components),o.createElement(s.Provider,{value:n},e.children)}}}]);