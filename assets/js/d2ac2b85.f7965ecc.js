"use strict";(self.webpackChunkrekalogika_docs=self.webpackChunkrekalogika_docs||[]).push([[9936],{8997:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>l,frontMatter:()=>o,metadata:()=>r,toc:()=>p});var i=n(4848),a=n(8453);const o={title:"Mapping DateTime"},s=void 0,r={id:"mapper/datetime",title:"Mapping DateTime",description:"This chapter describes how to do a mapping involving DateTime objects.",source:"@site/docs/mapper/04-datetime.md",sourceDirName:"mapper",slug:"/mapper/datetime",permalink:"/mapper/datetime",draft:!1,unlisted:!1,editUrl:"https://github.com/rekalogika/rekalogika-docs/edit/main/docs/mapper/04-datetime.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{title:"Mapping DateTime"},sidebar:"docs",previous:{title:"Mapping Arrays & Array-Like Objects",permalink:"/mapper/collection"},next:{title:"Context and Mapping Options",permalink:"/mapper/context"}},c={},p=[{value:"Supported Transformations",id:"supported-transformations",level:2},{value:"Changing the Time Zone",id:"changing-the-time-zone",level:2},{value:"Changing the Format",id:"changing-the-format",level:2},{value:"Some Examples",id:"some-examples",level:2}];function d(e){const t={admonition:"admonition",code:"code",h2:"h2",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(t.p,{children:["This chapter describes how to do a mapping involving ",(0,i.jsx)(t.code,{children:"DateTime"})," objects."]}),"\n",(0,i.jsx)(t.h2,{id:"supported-transformations",children:"Supported Transformations"}),"\n",(0,i.jsxs)(t.p,{children:["Supported target type-hints are ",(0,i.jsx)(t.code,{children:"DateTimeInterface"}),", ",(0,i.jsx)(t.code,{children:"DateTimeImmutable"}),",\n",(0,i.jsx)(t.code,{children:"DateTime"})," and Symfony ",(0,i.jsx)(t.code,{children:"DatePoint"}),". Mapper supports transformation among these\nobjects, and also to & from string, integer, and float."]}),"\n",(0,i.jsxs)(t.p,{children:["To perform the transformation, Mapper will convert the source value to an\nintermediate Symfony ",(0,i.jsx)(t.code,{children:"DatePoint"})," object. Then it will transform the intermediate\nobject into the target type."]}),"\n",(0,i.jsx)(t.h2,{id:"changing-the-time-zone",children:"Changing the Time Zone"}),"\n",(0,i.jsx)(t.p,{children:"By default, Mapper will leave the time zone alone. If the data does not have the\ntime zone (e.g. when the string representation does not have the time zone), it\nuses the system time zone."}),"\n",(0,i.jsxs)(t.p,{children:["To change the time zone, use the ",(0,i.jsx)(t.code,{children:"#[DateTimeOptions]"})," attribute on the property:"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-php",children:"use Rekalogika\\Mapper\\Attribute\\DateTimeOptions;\n\nclass SomeObject\n{\n    #[DateTimeOptions(timeZone: 'Asia/Jakarta')]\n    public \\DateTimeInterface $someDate;\n}\n"})}),"\n",(0,i.jsx)(t.p,{children:"If it is on the source side, Mapper will convert the source value to the\nspecified time zone. Or, if the source does not have time zone information,\nMapper will assume the source is already in the specified time zone."}),"\n",(0,i.jsx)(t.p,{children:"If it is on the target side, Mapper will convert the incoming date time object\nto the specified time zone."}),"\n",(0,i.jsx)(t.h2,{id:"changing-the-format",children:"Changing the Format"}),"\n",(0,i.jsxs)(t.p,{children:["If the mapping involves string, float, or integer, you can specify the format\nusing the ",(0,i.jsx)(t.code,{children:"#[DateTimeOptions]"})," attribute:"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-php",children:"use Rekalogika\\Mapper\\Attribute\\DateTimeOptions;\n\nclass SomeObject\n{\n    #[DateTimeOptions(format: 'Y-m-d H:i:s', timeZone: 'Asia/Pontianak')]\n    public string $someDate;\n}\n"})}),"\n",(0,i.jsx)(t.p,{children:"It will work as anyone would expect. At the source side, Mapper will assume the\nstring is in the specified format. At the target side, Mapper will transform to\nthe target using the specified format."}),"\n",(0,i.jsxs)(t.admonition,{type:"note",children:[(0,i.jsxs)(t.p,{children:["Without ",(0,i.jsx)(t.code,{children:"DateTimeOptions"}),", a source date time will be passed as is to the\n",(0,i.jsx)(t.code,{children:"DatePoint"})," constructor, and will be automatically detected. At the target\nside, the string will be formatted as ",(0,i.jsx)(t.code,{children:"DateTimeInterface::ATOM"})," by default."]}),(0,i.jsx)(t.p,{children:"Date time in integer or float is assumed to be in Unix time."})]}),"\n",(0,i.jsx)(t.h2,{id:"some-examples",children:"Some Examples"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-php",children:"use Rekalogika\\Mapper\\Attribute\\DateTimeOptions;\n\nclass SomeObject\n{\n    #[DateTimeOptions(format: 'Ymd', timeZone: 'Asia/Jayapura')]\n    public int $YYYYMMDDinInteger;\n\n    #[DateTimeOptions(format: 'd-m-y')]\n    public string $DDMMYYinString;\n}       \n"})})]})}function l(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>s,x:()=>r});var i=n(6540);const a={},o=i.createContext(a);function s(e){const t=i.useContext(o);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:s(e.components),i.createElement(o.Provider,{value:t},e.children)}}}]);