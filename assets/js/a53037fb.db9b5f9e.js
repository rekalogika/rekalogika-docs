"use strict";(self.webpackChunkrekalogika_docs=self.webpackChunkrekalogika_docs||[]).push([[4414],{4129:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>m,frontMatter:()=>a,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"analytics/summary-entity/dimensions","title":"Dimensions","description":"A summary table can have one or more dimensions. Dimensions are properties of","source":"@site/docs/analytics/02-summary-entity/03-dimensions.md","sourceDirName":"analytics/02-summary-entity","slug":"/analytics/summary-entity/dimensions","permalink":"/analytics/summary-entity/dimensions","draft":false,"unlisted":false,"editUrl":"https://github.com/rekalogika/rekalogika-docs/edit/main/docs/analytics/02-summary-entity/03-dimensions.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"title":"Dimensions"},"sidebar":"docs","previous":{"title":"Partitioning","permalink":"/analytics/summary-entity/partitioning"},"next":{"title":"Measures","permalink":"/analytics/summary-entity/measures"}}');var t=i(4848),r=i(8453);const a={title:"Dimensions"},o=void 0,c={},l=[{value:"Source Definition",id:"source-definition",level:2},{value:"Hierarchical Dimensions",id:"hierarchical-dimensions",level:2}];function d(e){const n={code:"code",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.p,{children:"A summary table can have one or more dimensions. Dimensions are properties of\nthe source entity that are used to group the data. They have distinct, descriptive\nvalues."}),"\n",(0,t.jsxs)(n.p,{children:["In a summary table, a dimension is defined using the ",(0,t.jsx)(n.code,{children:"#[Analytics\\Dimension]"}),"\nattribute."]}),"\n",(0,t.jsx)(n.h2,{id:"source-definition",children:"Source Definition"}),"\n",(0,t.jsxs)(n.p,{children:["The most important property of a dimension is the ",(0,t.jsx)(n.code,{children:"source"})," argument. This\nargument specifies how we get the value from the source entity."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-php",children:"use Doctrine\\DBAL\\Types\\Types;\nuse Doctrine\\ORM\\Mapping as ORM;\nuse Rekalogika\\Analytics\\Attribute as Analytics;\nuse Rekalogika\\Analytics\\ValueResolver\\PropertyValueResolver;\n\nclass YourSummary extends Summary\n{\n    #[ORM\\Column(type: Types::STRING)]\n    #[Analytics\\Dimension(\n        // highlight-start\n        source: new PropertyValueResolver('status'),\n        // highlight-end\n    )]\n    private ?string $status = null;\n}\n"})}),"\n",(0,t.jsx)(n.p,{children:"The source can be of these types:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"string"}),": The name of the property in the source entity; can also be a path\nthat will traverse the entity tree. The framework will try to autodetect how\nto get the value from the source entity."]}),"\n",(0,t.jsxs)(n.li,{children:["A ",(0,t.jsx)(n.code,{children:"ValueResolver"})," instance: Defines a DQL expression on how to get the value\nfrom the source entity."]}),"\n",(0,t.jsxs)(n.li,{children:["An array of ",(0,t.jsx)(n.code,{children:"string"})," or ",(0,t.jsx)(n.code,{children:"ValueResolver"})," instances: Explained TBD."]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"hierarchical-dimensions",children:"Hierarchical Dimensions"}),"\n",(0,t.jsxs)(n.p,{children:["A dimension can be hierarchical. A common example is the ",(0,t.jsx)(n.code,{children:"time"})," dimension. The\n",(0,t.jsx)(n.code,{children:"time"})," dimension can be further divided into ",(0,t.jsx)(n.code,{children:"year"}),", ",(0,t.jsx)(n.code,{children:"month"}),", ",(0,t.jsx)(n.code,{children:"day"}),", and more.\nThe caller will then be able to decide whether to group the time by ",(0,t.jsx)(n.code,{children:"year"}),",\n",(0,t.jsx)(n.code,{children:"month"}),", or ",(0,t.jsx)(n.code,{children:"day"}),", etc."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-php",children:"use Doctrine\\ORM\\Mapping as ORM;\nuse Rekalogika\\Analytics\\Attribute as Analytics;\nuse Rekalogika\\Analytics\\Model\\Hierarchy\\TimeDimensionHierarchy;\nuse Rekalogika\\Analytics\\ValueResolver\\PropertyValueResolver;\n\nclass YourSummary extends Summary\n{\n    #[ORM\\Embedded()]\n    #[Analytics\\Dimension(\n        source: new PropertyValueResolver('time'),\n        sourceTimeZone: new \\DateTimeZone('UTC'),\n        summaryTimeZone: new \\DateTimeZone('Asia/Jakarta'),\n    )]\n    private TimeDimensionHierarchy $time;\n}\n"})}),"\n",(0,t.jsx)(n.p,{children:"The framework provides these predefined time hierarchies:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"TimeDimensionHierarchy"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"DateDimensionHierarchy"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"SimpleTimeDimensionHierarchy"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"SimpleDateDimensionHierarchy"})}),"\n"]})]})}function m(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>a,x:()=>o});var s=i(6540);const t={},r=s.createContext(t);function a(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);