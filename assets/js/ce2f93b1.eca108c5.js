"use strict";(self.webpackChunkrekalogika_docs=self.webpackChunkrekalogika_docs||[]).push([[4128],{979:(e,i,t)=>{t.r(i),t.d(i,{assets:()=>r,contentTitle:()=>s,default:()=>h,frontMatter:()=>l,metadata:()=>o,toc:()=>d});var n=t(4848),a=t(8453);const l={title:"Replicating Metadata in Entities"},s=void 0,o={id:"file-bundle/replicating-metadata-in-entities",title:"Replicating Metadata in Entities",description:"This chapter describes how to replicate file metadata in your entities.",source:"@site/docs/file-bundle/12-replicating-metadata-in-entities.md",sourceDirName:"file-bundle",slug:"/file-bundle/replicating-metadata-in-entities",permalink:"/file-bundle/replicating-metadata-in-entities",draft:!1,unlisted:!1,editUrl:"https://github.com/rekalogika/rekalogika-docs/edit/main/docs/file-bundle/12-replicating-metadata-in-entities.md",tags:[],version:"current",sidebarPosition:12,frontMatter:{title:"Replicating Metadata in Entities"},sidebar:"docs",previous:{title:"Lazy-Loading Files",permalink:"/file-bundle/lazy-loading"},next:{title:"Implementing a Collection of Files",permalink:"/file-bundle/collection"}},r={},d=[{value:"Objective",id:"objective",level:2},{value:"Execution",id:"execution",level:2},{value:"Using The Metadata Fields for Querying and Indexing",id:"using-the-metadata-fields-for-querying-and-indexing",level:2},{value:"Mandatory File Properties",id:"mandatory-file-properties",level:2}];function c(e){const i={a:"a",admonition:"admonition",code:"code",h2:"h2",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,a.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(i.p,{children:"This chapter describes how to replicate file metadata in your entities."}),"\n",(0,n.jsx)(i.h2,{id:"objective",children:"Objective"}),"\n",(0,n.jsx)(i.p,{children:"This framework gives you the convenience of requiring only a single property to\nassociate a file with an entity. However, there are cases where it can be useful\nto have the file's metadata stored in the entity. For example:"}),"\n",(0,n.jsxs)(i.ul,{children:["\n",(0,n.jsxs)(i.li,{children:["To optimize performance together with our ",(0,n.jsx)(i.a,{href:"lazy-loading",children:"lazy-loading\nfeature"}),", especially when you are dealing with a lot of entities\nand/or files."]}),"\n",(0,n.jsx)(i.li,{children:"You need to use the database to index, search, or sort the files based on\ntheir metadata."}),"\n"]}),"\n",(0,n.jsx)(i.p,{children:"Using the method described in this chapter, you will be able to accomplish that\nby replicating the files' metadata in your entities and it does not require you\nto change the way you work with files."}),"\n",(0,n.jsx)(i.h2,{id:"execution",children:"Execution"}),"\n",(0,n.jsxs)(i.admonition,{title:"Preparation",type:"info",children:[(0,n.jsxs)(i.p,{children:["You need to install the package ",(0,n.jsx)(i.code,{children:"rekalogika/file-association-entity"})," to use this\nfeature:"]}),(0,n.jsx)(i.pre,{children:(0,n.jsx)(i.code,{className:"language-bash",children:"composer require rekalogika/file-association-entity\n"})})]}),"\n",(0,n.jsx)(i.p,{children:"In short, you need to:"}),"\n",(0,n.jsxs)(i.ol,{children:["\n",(0,n.jsxs)(i.li,{children:["Add a property with ",(0,n.jsx)(i.code,{children:"EmbeddedMetadata"})," type. This is a ",(0,n.jsx)(i.a,{href:"https://www.doctrine-project.org/projects/doctrine-orm/en/current/tutorials/embeddables.html",children:"Doctrine embeddable"}),"\nthat implements ",(0,n.jsx)(i.code,{children:"RawMetadataInterface"})," we will be using to store the file's\nmetadata."]}),"\n",(0,n.jsxs)(i.li,{children:["Modify the getter of the file property so that it returns a decorated\nversion of the ",(0,n.jsx)(i.code,{children:"FileInterface"})," that will use our ",(0,n.jsx)(i.code,{children:"EmbeddedMetadata"})," in #1."]}),"\n",(0,n.jsxs)(i.li,{children:["Modify the setter of the file property so it will copy the metadata of a new\nfile to our ",(0,n.jsx)(i.code,{children:"EmbeddedMetadata"})," in #1."]}),"\n"]}),"\n",(0,n.jsx)(i.p,{children:"If your original entity looks like this:"}),"\n",(0,n.jsx)(i.pre,{children:(0,n.jsx)(i.code,{className:"language-php",children:"use Doctrine\\ORM\\Mapping\\Entity;\nuse Rekalogika\\Contracts\\File\\FileInterface;\nuse Rekalogika\\File\\Association\\Attribute\\WithFileAssociation;\nuse Rekalogika\\File\\Association\\Attribute\\AsFileAssociation;\n\n#[Entity]\n#[WithFileAssociation]\nclass Product\n{\n    #[AsFileAssociation]\n    private ?FileInterface $image = null;\n\n    public function getImage(): ?FileInterface\n    {\n        return $this->image;\n    }\n\n    public function setImage(?FileInterface $image): self\n    {\n        $this->image = $image;\n\n        return $this;\n    }\n}\n"})}),"\n",(0,n.jsx)(i.p,{children:"You need to modify it to look like this:"}),"\n",(0,n.jsx)(i.pre,{children:(0,n.jsx)(i.code,{className:"language-php",children:"// highlight-next-line\nuse Doctrine\\ORM\\Mapping\\Embedded;\nuse Doctrine\\ORM\\Mapping\\Entity;\nuse Rekalogika\\Contracts\\File\\FileInterface;\n// highlight-start\nuse Rekalogika\\Domain\\File\\Association\\Entity\\EmbeddedMetadata;\nuse Rekalogika\\Domain\\File\\Association\\Entity\\FileDecorator;\n// highlight-end\nuse Rekalogika\\File\\Association\\Attribute\\WithFileAssociation;\nuse Rekalogika\\File\\Association\\Attribute\\AsFileAssociation;\n\n#[Entity]\n#[WithFileAssociation]\nclass Product\n{\n    #[AsFileAssociation]\n    private ?FileInterface $image = null;\n\n    // highlight-start\n    #[Embedded]\n    private EmbeddedMetadata $imageMetadata;\n    // highlight-end\n\n    public function __construct()\n    {\n        // highlight-next-line\n        $this->imageMetadata = new EmbeddedMetadata();  \n    }\n\n    public function getImage(): ?FileInterface\n    {\n        // highlight-next-line\n        return FileDecorator::getFile($this->image, $this->imageMetadata);\n    }\n\n    public function setImage(?FileInterface $image): self\n    {\n        // highlight-next-line\n        FileDecorator::setFile($image, $this->image, $this->imageMetadata);\n\n        return $this;\n    }\n}\n"})}),"\n",(0,n.jsxs)(i.p,{children:["After the change, calling the setter will still give you a ",(0,n.jsx)(i.code,{children:"FileInterface"})," that\nyou can use like before. But behind the scenes, any reads to the metadata will\nbe done from the data stored in the entity. And any writes to the metadata are\nsaved to both the file and the entity."]}),"\n",(0,n.jsx)(i.admonition,{type:"info",children:(0,n.jsxs)(i.p,{children:["Because the metadata is now saved in the entity, after any changes to the\nmetadata, you need to call ",(0,n.jsx)(i.code,{children:"flush()"})," on the entity manager to save the metadata\nto the database."]})}),"\n",(0,n.jsx)(i.h2,{id:"using-the-metadata-fields-for-querying-and-indexing",children:"Using The Metadata Fields for Querying and Indexing"}),"\n",(0,n.jsxs)(i.p,{children:[(0,n.jsx)(i.code,{children:"EmbeddedMetadata"})," is a ",(0,n.jsx)(i.a,{href:"https://www.doctrine-project.org/projects/doctrine-orm/en/current/tutorials/embeddables.html",children:"Doctrine embeddable"})," that contains the following fields:"]}),"\n",(0,n.jsxs)(i.ul,{children:["\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.code,{children:"name"}),": The file name."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.code,{children:"size"}),": The file size in bytes."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.code,{children:"type"}),": The file MIME type."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.code,{children:"modificationTime"}),": The file modification time."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.code,{children:"width"}),": The width, if the file is an image."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.code,{children:"height"}),": The height, if the file is an image."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.code,{children:"other"}),": Other metadata that is not covered by the above fields."]}),"\n"]}),"\n",(0,n.jsxs)(i.p,{children:["You can use these fields (other than the ",(0,n.jsx)(i.code,{children:"other"}),") to query and index the files\nin your database."]}),"\n",(0,n.jsx)(i.h2,{id:"mandatory-file-properties",children:"Mandatory File Properties"}),"\n",(0,n.jsx)(i.p,{children:"If your file property does not accept a null value, you need to modify the\nsetter like the following."}),"\n",(0,n.jsx)(i.pre,{children:(0,n.jsx)(i.code,{className:"language-php",children:"use Doctrine\\ORM\\Mapping\\Entity;\nuse Rekalogika\\Contracts\\File\\FileInterface;\nuse Rekalogika\\Domain\\File\\Association\\Entity\\FileDecorator;\nuse Rekalogika\\Domain\\File\\Null\\NullFile;\nuse Rekalogika\\File\\Association\\Attribute\\WithFileAssociation;\nuse Rekalogika\\File\\Association\\Attribute\\AsFileAssociation;\n\n#[Entity]\n#[WithFileAssociation]\nclass Product\n{\n    // highlight-start\n    // $image is not nullable\n    #[AsFileAssociation]\n    private FileInterface $image;\n    // highlight-end\n\n    // ...\n\n    public function setImage(FileInterface $image): self\n    {\n        // highlight-start\n        // make sure the image is not unset, otherwise the next line won't work\n        $this->image = new NullFile();\n\n        // setFileMandatory is identical to setFile, except it does not accept\n        // null value and works with properties that does not accept null\n        FileDecorator::setFileMandatory($file, $this->file, $this->fileMetadata);\n        // highlight-end\n\n        return $this;\n    }\n}\n"})})]})}function h(e={}){const{wrapper:i}={...(0,a.R)(),...e.components};return i?(0,n.jsx)(i,{...e,children:(0,n.jsx)(c,{...e})}):c(e)}},8453:(e,i,t)=>{t.d(i,{R:()=>s,x:()=>o});var n=t(6540);const a={},l=n.createContext(a);function s(e){const i=n.useContext(l);return n.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function o(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:s(e.components),n.createElement(l.Provider,{value:i},e.children)}}}]);